{
  "version": 3,
  "sources": ["../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/webpack/universalModuleDefinition", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/browser/AccessibilityManager.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/browser/Clipboard.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/browser/ColorContrastCache.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/browser/Lifecycle.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/browser/Linkifier.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/browser/LocalizableStrings.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/browser/OscLinkProvider.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/browser/RenderDebouncer.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/browser/Terminal.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/browser/TimeBasedDebouncer.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/browser/Viewport.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/browser/decorations/BufferDecorationRenderer.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/browser/decorations/ColorZoneStore.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/browser/decorations/OverviewRulerRenderer.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/browser/input/CompositionHelper.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/browser/input/Mouse.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/browser/input/MoveToCell.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/browser/renderer/dom/DomRenderer.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/browser/renderer/dom/DomRendererRowFactory.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/browser/renderer/dom/WidthCache.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/browser/renderer/shared/Constants.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/browser/renderer/shared/RendererUtils.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/browser/renderer/shared/SelectionRenderModel.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/browser/selection/SelectionModel.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/browser/services/CharSizeService.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/browser/services/CharacterJoinerService.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/browser/services/CoreBrowserService.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/browser/services/LinkProviderService.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/browser/services/MouseService.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/browser/services/RenderService.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/browser/services/SelectionService.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/browser/services/Services.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/browser/services/ThemeService.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/CircularList.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/Clone.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/Color.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/CoreTerminal.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/EventEmitter.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/InputHandler.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/Lifecycle.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/MultiKeyMap.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/Platform.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/SortedList.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/TaskQueue.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/WindowsMode.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/buffer/AttributeData.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/buffer/Buffer.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/buffer/BufferLine.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/buffer/BufferRange.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/buffer/BufferReflow.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/buffer/BufferSet.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/buffer/CellData.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/buffer/Constants.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/buffer/Marker.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/data/Charsets.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/data/EscapeSequences.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/input/Keyboard.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/input/TextDecoder.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/input/UnicodeV6.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/input/WriteBuffer.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/input/XParseColor.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/parser/Constants.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/parser/DcsParser.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/parser/EscapeSequenceParser.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/parser/OscParser.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/parser/Params.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/public/AddonManager.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/public/BufferApiView.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/public/BufferLineApiView.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/public/BufferNamespaceApi.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/public/ParserApi.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/public/UnicodeApi.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/services/BufferService.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/services/CharsetService.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/services/CoreMouseService.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/services/CoreService.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/services/DecorationService.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/services/InstantiationService.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/services/LogService.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/services/OptionsService.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/services/OscLinkService.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/services/ServiceRegistry.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/services/Services.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/common/services/UnicodeService.ts", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/webpack/bootstrap", "../../../node_modules/.pnpm/@xterm+xterm@5.5.0/node_modules/@xterm/xterm/lib/webpack:/@xterm/xterm/src/browser/public/Terminal.ts", "../../../node_modules/.pnpm/@xterm+addon-fit@0.9.0_@xterm+xterm@5.5.0/node_modules/@xterm/addon-fit/lib/webpack:/FitAddon/webpack/universalModuleDefinition", "../../../node_modules/.pnpm/@xterm+addon-fit@0.9.0_@xterm+xterm@5.5.0/node_modules/@xterm/addon-fit/lib/webpack:/FitAddon/src/FitAddon.ts", "../../../app/components/Terminal.client.tsx", "../../../node_modules/.pnpm/remix-utils@7.7.0_@remix-run+node@2.13.1_typescript@5.6.3__@remix-run+react@2.13.1_react-dom@_xsmmuujp2uft3qloyy7qypblli/node_modules/remix-utils/build/react/client-only.js", "../../../node_modules/.pnpm/remix-utils@7.7.0_@remix-run+node@2.13.1_typescript@5.6.3__@remix-run+react@2.13.1_react-dom@_xsmmuujp2uft3qloyy7qypblli/node_modules/remix-utils/build/react/use-hydrated.js", "../../../app/routes/vim.tsx"],
  "sourcesContent": ["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(globalThis, () => {\nreturn ", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport * as Strings from 'browser/LocalizableStrings';\nimport { ITerminal, IRenderDebouncer } from 'browser/Types';\nimport { TimeBasedDebouncer } from 'browser/TimeBasedDebouncer';\nimport { Disposable, toDisposable } from 'common/Lifecycle';\nimport { ICoreBrowserService, IRenderService } from 'browser/services/Services';\nimport { IBuffer } from 'common/buffer/Types';\nimport { IInstantiationService } from 'common/services/Services';\nimport { addDisposableDomListener } from 'browser/Lifecycle';\n\nconst MAX_ROWS_TO_READ = 20;\n\nconst enum BoundaryPosition {\n  TOP,\n  BOTTOM\n}\n\n// Turn this on to unhide the accessibility tree and display it under\n// (instead of overlapping with) the terminal.\nconst DEBUG = false;\n\nexport class AccessibilityManager extends Disposable {\n  private _debugRootContainer: HTMLElement | undefined;\n  private _accessibilityContainer: HTMLElement;\n\n  private _rowContainer: HTMLElement;\n  private _rowElements: HTMLElement[];\n  private _rowColumns: WeakMap<HTMLElement, number[]> = new WeakMap();\n\n  private _liveRegion: HTMLElement;\n  private _liveRegionLineCount: number = 0;\n  private _liveRegionDebouncer: IRenderDebouncer;\n\n  private _topBoundaryFocusListener: (e: FocusEvent) => void;\n  private _bottomBoundaryFocusListener: (e: FocusEvent) => void;\n\n  /**\n   * This queue has a character pushed to it for keys that are pressed, if the\n   * next character added to the terminal is equal to the key char then it is\n   * not announced (added to live region) because it has already been announced\n   * by the textarea event (which cannot be canceled). There are some race\n   * condition cases if there is typing while data is streaming, but this covers\n   * the main case of typing into the prompt and inputting the answer to a\n   * question (Y/N, etc.).\n   */\n  private _charsToConsume: string[] = [];\n\n  private _charsToAnnounce: string = '';\n\n  constructor(\n    private readonly _terminal: ITerminal,\n    @IInstantiationService instantiationService: IInstantiationService,\n    @ICoreBrowserService private readonly _coreBrowserService: ICoreBrowserService,\n    @IRenderService private readonly _renderService: IRenderService\n  ) {\n    super();\n    this._accessibilityContainer = this._coreBrowserService.mainDocument.createElement('div');\n    this._accessibilityContainer.classList.add('xterm-accessibility');\n\n    this._rowContainer = this._coreBrowserService.mainDocument.createElement('div');\n    this._rowContainer.setAttribute('role', 'list');\n    this._rowContainer.classList.add('xterm-accessibility-tree');\n    this._rowElements = [];\n    for (let i = 0; i < this._terminal.rows; i++) {\n      this._rowElements[i] = this._createAccessibilityTreeNode();\n      this._rowContainer.appendChild(this._rowElements[i]);\n    }\n\n    this._topBoundaryFocusListener = e => this._handleBoundaryFocus(e, BoundaryPosition.TOP);\n    this._bottomBoundaryFocusListener = e => this._handleBoundaryFocus(e, BoundaryPosition.BOTTOM);\n    this._rowElements[0].addEventListener('focus', this._topBoundaryFocusListener);\n    this._rowElements[this._rowElements.length - 1].addEventListener('focus', this._bottomBoundaryFocusListener);\n\n    this._refreshRowsDimensions();\n    this._accessibilityContainer.appendChild(this._rowContainer);\n\n    this._liveRegion = this._coreBrowserService.mainDocument.createElement('div');\n    this._liveRegion.classList.add('live-region');\n    this._liveRegion.setAttribute('aria-live', 'assertive');\n    this._accessibilityContainer.appendChild(this._liveRegion);\n    this._liveRegionDebouncer = this.register(new TimeBasedDebouncer(this._renderRows.bind(this)));\n\n    if (!this._terminal.element) {\n      throw new Error('Cannot enable accessibility before Terminal.open');\n    }\n\n    if (DEBUG) {\n      this._accessibilityContainer.classList.add('debug');\n      this._rowContainer.classList.add('debug');\n\n      // Use a `<div class=\"xterm\">` container so that the css will still apply.\n      this._debugRootContainer = document.createElement('div');\n      this._debugRootContainer.classList.add('xterm');\n\n      this._debugRootContainer.appendChild(document.createTextNode('------start a11y------'));\n      this._debugRootContainer.appendChild(this._accessibilityContainer);\n      this._debugRootContainer.appendChild(document.createTextNode('------end a11y------'));\n\n      this._terminal.element.insertAdjacentElement('afterend', this._debugRootContainer);\n    } else {\n      this._terminal.element.insertAdjacentElement('afterbegin', this._accessibilityContainer);\n    }\n\n    this.register(this._terminal.onResize(e => this._handleResize(e.rows)));\n    this.register(this._terminal.onRender(e => this._refreshRows(e.start, e.end)));\n    this.register(this._terminal.onScroll(() => this._refreshRows()));\n    // Line feed is an issue as the prompt won't be read out after a command is run\n    this.register(this._terminal.onA11yChar(char => this._handleChar(char)));\n    this.register(this._terminal.onLineFeed(() => this._handleChar('\\n')));\n    this.register(this._terminal.onA11yTab(spaceCount => this._handleTab(spaceCount)));\n    this.register(this._terminal.onKey(e => this._handleKey(e.key)));\n    this.register(this._terminal.onBlur(() => this._clearLiveRegion()));\n    this.register(this._renderService.onDimensionsChange(() => this._refreshRowsDimensions()));\n    this.register(addDisposableDomListener(document, 'selectionchange', () => this._handleSelectionChange()));\n    this.register(this._coreBrowserService.onDprChange(() => this._refreshRowsDimensions()));\n\n    this._refreshRows();\n    this.register(toDisposable(() => {\n      if (DEBUG) {\n        this._debugRootContainer!.remove();\n      } else {\n        this._accessibilityContainer.remove();\n      }\n      this._rowElements.length = 0;\n    }));\n  }\n\n  private _handleTab(spaceCount: number): void {\n    for (let i = 0; i < spaceCount; i++) {\n      this._handleChar(' ');\n    }\n  }\n\n  private _handleChar(char: string): void {\n    if (this._liveRegionLineCount < MAX_ROWS_TO_READ + 1) {\n      if (this._charsToConsume.length > 0) {\n        // Have the screen reader ignore the char if it was just input\n        const shiftedChar = this._charsToConsume.shift();\n        if (shiftedChar !== char) {\n          this._charsToAnnounce += char;\n        }\n      } else {\n        this._charsToAnnounce += char;\n      }\n\n      if (char === '\\n') {\n        this._liveRegionLineCount++;\n        if (this._liveRegionLineCount === MAX_ROWS_TO_READ + 1) {\n          this._liveRegion.textContent += Strings.tooMuchOutput;\n        }\n      }\n    }\n  }\n\n  private _clearLiveRegion(): void {\n    this._liveRegion.textContent = '';\n    this._liveRegionLineCount = 0;\n  }\n\n  private _handleKey(keyChar: string): void {\n    this._clearLiveRegion();\n    // Only add the char if there is no control character.\n    if (!/\\p{Control}/u.test(keyChar)) {\n      this._charsToConsume.push(keyChar);\n    }\n  }\n\n  private _refreshRows(start?: number, end?: number): void {\n    this._liveRegionDebouncer.refresh(start, end, this._terminal.rows);\n  }\n\n  private _renderRows(start: number, end: number): void {\n    const buffer: IBuffer = this._terminal.buffer;\n    const setSize = buffer.lines.length.toString();\n    for (let i = start; i <= end; i++) {\n      const line = buffer.lines.get(buffer.ydisp + i);\n      const columns: number[] = [];\n      const lineData = line?.translateToString(true, undefined, undefined, columns) || '';\n      const posInSet = (buffer.ydisp + i + 1).toString();\n      const element = this._rowElements[i];\n      if (element) {\n        if (lineData.length === 0) {\n          element.innerText = '\\u00a0';\n          this._rowColumns.set(element, [0, 1]);\n        } else {\n          element.textContent = lineData;\n          this._rowColumns.set(element, columns);\n        }\n        element.setAttribute('aria-posinset', posInSet);\n        element.setAttribute('aria-setsize', setSize);\n      }\n    }\n    this._announceCharacters();\n  }\n\n  private _announceCharacters(): void {\n    if (this._charsToAnnounce.length === 0) {\n      return;\n    }\n    this._liveRegion.textContent += this._charsToAnnounce;\n    this._charsToAnnounce = '';\n  }\n\n  private _handleBoundaryFocus(e: FocusEvent, position: BoundaryPosition): void {\n    const boundaryElement = e.target as HTMLElement;\n    const beforeBoundaryElement = this._rowElements[position === BoundaryPosition.TOP ? 1 : this._rowElements.length - 2];\n\n    // Don't scroll if the buffer top has reached the end in that direction\n    const posInSet = boundaryElement.getAttribute('aria-posinset');\n    const lastRowPos = position === BoundaryPosition.TOP ? '1' : `${this._terminal.buffer.lines.length}`;\n    if (posInSet === lastRowPos) {\n      return;\n    }\n\n    // Don't scroll when the last focused item was not the second row (focus is going the other\n    // direction)\n    if (e.relatedTarget !== beforeBoundaryElement) {\n      return;\n    }\n\n    // Remove old boundary element from array\n    let topBoundaryElement: HTMLElement;\n    let bottomBoundaryElement: HTMLElement;\n    if (position === BoundaryPosition.TOP) {\n      topBoundaryElement = boundaryElement;\n      bottomBoundaryElement = this._rowElements.pop()!;\n      this._rowContainer.removeChild(bottomBoundaryElement);\n    } else {\n      topBoundaryElement = this._rowElements.shift()!;\n      bottomBoundaryElement = boundaryElement;\n      this._rowContainer.removeChild(topBoundaryElement);\n    }\n\n    // Remove listeners from old boundary elements\n    topBoundaryElement.removeEventListener('focus', this._topBoundaryFocusListener);\n    bottomBoundaryElement.removeEventListener('focus', this._bottomBoundaryFocusListener);\n\n    // Add new element to array/DOM\n    if (position === BoundaryPosition.TOP) {\n      const newElement = this._createAccessibilityTreeNode();\n      this._rowElements.unshift(newElement);\n      this._rowContainer.insertAdjacentElement('afterbegin', newElement);\n    } else {\n      const newElement = this._createAccessibilityTreeNode();\n      this._rowElements.push(newElement);\n      this._rowContainer.appendChild(newElement);\n    }\n\n    // Add listeners to new boundary elements\n    this._rowElements[0].addEventListener('focus', this._topBoundaryFocusListener);\n    this._rowElements[this._rowElements.length - 1].addEventListener('focus', this._bottomBoundaryFocusListener);\n\n    // Scroll up\n    this._terminal.scrollLines(position === BoundaryPosition.TOP ? -1 : 1);\n\n    // Focus new boundary before element\n    this._rowElements[position === BoundaryPosition.TOP ? 1 : this._rowElements.length - 2].focus();\n\n    // Prevent the standard behavior\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  }\n\n  private _handleSelectionChange(): void {\n    if (this._rowElements.length === 0) {\n      return;\n    }\n\n    const selection = document.getSelection();\n    if (!selection) {\n      return;\n    }\n\n    if (selection.isCollapsed) {\n      // Only do something when the anchorNode is inside the row container. This\n      // behavior mirrors what we do with mouse --- if the mouse clicks\n      // somewhere outside of the terminal, we don't clear the selection.\n      if (this._rowContainer.contains(selection.anchorNode)) {\n        this._terminal.clearSelection();\n      }\n      return;\n    }\n\n    if (!selection.anchorNode || !selection.focusNode) {\n      console.error('anchorNode and/or focusNode are null');\n      return;\n    }\n\n    // Sort the two selection points in document order.\n    let begin = { node: selection.anchorNode, offset: selection.anchorOffset };\n    let end = { node: selection.focusNode, offset: selection.focusOffset };\n    if ((begin.node.compareDocumentPosition(end.node) & Node.DOCUMENT_POSITION_PRECEDING) || (begin.node === end.node && begin.offset > end.offset) ) {\n      [begin, end] = [end, begin];\n    }\n\n    // Clamp begin/end to the inside of the row container.\n    if (begin.node.compareDocumentPosition(this._rowElements[0]) & (Node.DOCUMENT_POSITION_CONTAINED_BY | Node.DOCUMENT_POSITION_FOLLOWING)) {\n      begin = { node: this._rowElements[0].childNodes[0], offset: 0 };\n    }\n    if (!this._rowContainer.contains(begin.node)) {\n      // This happens when `begin` is below the last row.\n      return;\n    }\n    const lastRowElement = this._rowElements.slice(-1)[0];\n    if (end.node.compareDocumentPosition(lastRowElement) & (Node.DOCUMENT_POSITION_CONTAINED_BY | Node.DOCUMENT_POSITION_PRECEDING)) {\n      end = {\n        node: lastRowElement,\n        offset: lastRowElement.textContent?.length ?? 0\n      };\n    }\n    if (!this._rowContainer.contains(end.node)) {\n      // This happens when `end` is above the first row.\n      return;\n    }\n\n    const toRowColumn = ({ node, offset }: typeof begin): {row: number, column: number} | null => {\n      // `node` is either the row element or the Text node inside it.\n      const rowElement: any = node instanceof Text ? node.parentNode : node;\n      let row = parseInt(rowElement?.getAttribute('aria-posinset'), 10) - 1;\n      if (isNaN(row)) {\n        console.warn('row is invalid. Race condition?');\n        return null;\n      }\n\n      const columns = this._rowColumns.get(rowElement);\n      if (!columns) {\n        console.warn('columns is null. Race condition?');\n        return null;\n      }\n\n      let column = offset < columns.length ? columns[offset] : columns.slice(-1)[0] + 1;\n      if (column >= this._terminal.cols) {\n        ++row;\n        column = 0;\n      }\n      return {\n        row,\n        column\n      };\n    };\n\n    const beginRowColumn = toRowColumn(begin);\n    const endRowColumn = toRowColumn(end);\n\n    if (!beginRowColumn || !endRowColumn) {\n      return;\n    }\n\n    if (beginRowColumn.row > endRowColumn.row || (beginRowColumn.row === endRowColumn.row && beginRowColumn.column >= endRowColumn.column)) {\n      // This should not happen unless we have some bugs.\n      throw new Error('invalid range');\n    }\n\n    this._terminal.select(\n      beginRowColumn.column,\n      beginRowColumn.row,\n      (endRowColumn.row - beginRowColumn.row) * this._terminal.cols - beginRowColumn.column + endRowColumn.column\n    );\n  }\n\n  private _handleResize(rows: number): void {\n    // Remove bottom boundary listener\n    this._rowElements[this._rowElements.length - 1].removeEventListener('focus', this._bottomBoundaryFocusListener);\n\n    // Grow rows as required\n    for (let i = this._rowContainer.children.length; i < this._terminal.rows; i++) {\n      this._rowElements[i] = this._createAccessibilityTreeNode();\n      this._rowContainer.appendChild(this._rowElements[i]);\n    }\n    // Shrink rows as required\n    while (this._rowElements.length > rows) {\n      this._rowContainer.removeChild(this._rowElements.pop()!);\n    }\n\n    // Add bottom boundary listener\n    this._rowElements[this._rowElements.length - 1].addEventListener('focus', this._bottomBoundaryFocusListener);\n\n    this._refreshRowsDimensions();\n  }\n\n  private _createAccessibilityTreeNode(): HTMLElement {\n    const element = this._coreBrowserService.mainDocument.createElement('div');\n    element.setAttribute('role', 'listitem');\n    element.tabIndex = -1;\n    this._refreshRowDimensions(element);\n    return element;\n  }\n  private _refreshRowsDimensions(): void {\n    if (!this._renderService.dimensions.css.cell.height) {\n      return;\n    }\n    this._accessibilityContainer.style.width = `${this._renderService.dimensions.css.canvas.width}px`;\n    if (this._rowElements.length !== this._terminal.rows) {\n      this._handleResize(this._terminal.rows);\n    }\n    for (let i = 0; i < this._terminal.rows; i++) {\n      this._refreshRowDimensions(this._rowElements[i]);\n    }\n  }\n  private _refreshRowDimensions(element: HTMLElement): void {\n    element.style.height = `${this._renderService.dimensions.css.cell.height}px`;\n  }\n}\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ISelectionService } from 'browser/services/Services';\nimport { ICoreService, IOptionsService } from 'common/services/Services';\n\n/**\n * Prepares text to be pasted into the terminal by normalizing the line endings\n * @param text The pasted text that needs processing before inserting into the terminal\n */\nexport function prepareTextForTerminal(text: string): string {\n  return text.replace(/\\r?\\n/g, '\\r');\n}\n\n/**\n * Bracket text for paste, if necessary, as per https://cirw.in/blog/bracketed-paste\n * @param text The pasted text to bracket\n */\nexport function bracketTextForPaste(text: string, bracketedPasteMode: boolean): string {\n  if (bracketedPasteMode) {\n    return '\\x1b[200~' + text + '\\x1b[201~';\n  }\n  return text;\n}\n\n/**\n * Binds copy functionality to the given terminal.\n * @param ev The original copy event to be handled\n */\nexport function copyHandler(ev: ClipboardEvent, selectionService: ISelectionService): void {\n  if (ev.clipboardData) {\n    ev.clipboardData.setData('text/plain', selectionService.selectionText);\n  }\n  // Prevent or the original text will be copied.\n  ev.preventDefault();\n}\n\n/**\n * Redirect the clipboard's data to the terminal's input handler.\n */\nexport function handlePasteEvent(ev: ClipboardEvent, textarea: HTMLTextAreaElement, coreService: ICoreService, optionsService: IOptionsService): void {\n  ev.stopPropagation();\n  if (ev.clipboardData) {\n    const text = ev.clipboardData.getData('text/plain');\n    paste(text, textarea, coreService, optionsService);\n  }\n}\n\nexport function paste(text: string, textarea: HTMLTextAreaElement, coreService: ICoreService, optionsService: IOptionsService): void {\n  text = prepareTextForTerminal(text);\n  text = bracketTextForPaste(text, coreService.decPrivateModes.bracketedPasteMode && optionsService.rawOptions.ignoreBracketedPasteMode !== true);\n  coreService.triggerDataEvent(text, true);\n  textarea.value = '';\n}\n\n/**\n * Moves the textarea under the mouse cursor and focuses it.\n * @param ev The original right click event to be handled.\n * @param textarea The terminal's textarea.\n */\nexport function moveTextAreaUnderMouseCursor(ev: MouseEvent, textarea: HTMLTextAreaElement, screenElement: HTMLElement): void {\n\n  // Calculate textarea position relative to the screen element\n  const pos = screenElement.getBoundingClientRect();\n  const left = ev.clientX - pos.left - 10;\n  const top = ev.clientY - pos.top - 10;\n\n  // Bring textarea at the cursor position\n  textarea.style.width = '20px';\n  textarea.style.height = '20px';\n  textarea.style.left = `${left}px`;\n  textarea.style.top = `${top}px`;\n  textarea.style.zIndex = '1000';\n\n  textarea.focus();\n}\n\n/**\n * Bind to right-click event and allow right-click copy and paste.\n */\nexport function rightClickHandler(ev: MouseEvent, textarea: HTMLTextAreaElement, screenElement: HTMLElement, selectionService: ISelectionService, shouldSelectWord: boolean): void {\n  moveTextAreaUnderMouseCursor(ev, textarea, screenElement);\n\n  if (shouldSelectWord) {\n    selectionService.rightClickSelect(ev);\n  }\n\n  // Get textarea ready to copy from the context menu\n  textarea.value = selectionService.selectionText;\n  textarea.select();\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IColorContrastCache } from 'browser/Types';\nimport { IColor } from 'common/Types';\nimport { TwoKeyMap } from 'common/MultiKeyMap';\n\nexport class ColorContrastCache implements IColorContrastCache {\n  private _color: TwoKeyMap</* bg */number, /* fg */number, IColor | null> = new TwoKeyMap();\n  private _css: TwoKeyMap</* bg */number, /* fg */number, string | null> = new TwoKeyMap();\n\n  public setCss(bg: number, fg: number, value: string | null): void {\n    this._css.set(bg, fg, value);\n  }\n\n  public getCss(bg: number, fg: number): string | null | undefined {\n    return this._css.get(bg, fg);\n  }\n\n  public setColor(bg: number, fg: number, value: IColor | null): void {\n    this._color.set(bg, fg, value);\n  }\n\n  public getColor(bg: number, fg: number): IColor | null | undefined {\n    return this._color.get(bg, fg);\n  }\n\n  public clear(): void {\n    this._color.clear();\n    this._css.clear();\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\n/**\n * Adds a disposable listener to a node in the DOM, returning the disposable.\n * @param node The node to add a listener to.\n * @param type The event type.\n * @param handler The handler for the listener.\n * @param options The boolean or options object to pass on to the event\n * listener.\n */\nexport function addDisposableDomListener(\n  node: Element | Window | Document,\n  type: string,\n  handler: (e: any) => void,\n  options?: boolean | AddEventListenerOptions\n): IDisposable {\n  node.addEventListener(type, handler, options);\n  let disposed = false;\n  return {\n    dispose: () => {\n      if (disposed) {\n        return;\n      }\n      disposed = true;\n      node.removeEventListener(type, handler, options);\n    }\n  };\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport { IBufferCellPosition, ILink, ILinkDecorations, ILinkWithState, ILinkifier2, ILinkifierEvent } from 'browser/Types';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { Disposable, disposeArray, getDisposeArrayDisposable, toDisposable } from 'common/Lifecycle';\nimport { IDisposable } from 'common/Types';\nimport { IBufferService } from 'common/services/Services';\nimport { ILinkProviderService, IMouseService, IRenderService } from './services/Services';\n\nexport class Linkifier extends Disposable implements ILinkifier2 {\n  public get currentLink(): ILinkWithState | undefined { return this._currentLink; }\n  protected _currentLink: ILinkWithState | undefined;\n  private _mouseDownLink: ILinkWithState | undefined;\n  private _lastMouseEvent: MouseEvent | undefined;\n  private _linkCacheDisposables: IDisposable[] = [];\n  private _lastBufferCell: IBufferCellPosition | undefined;\n  private _isMouseOut: boolean = true;\n  private _wasResized: boolean = false;\n  private _activeProviderReplies: Map<Number, ILinkWithState[] | undefined> | undefined;\n  private _activeLine: number = -1;\n\n  private readonly _onShowLinkUnderline = this.register(new EventEmitter<ILinkifierEvent>());\n  public readonly onShowLinkUnderline = this._onShowLinkUnderline.event;\n  private readonly _onHideLinkUnderline = this.register(new EventEmitter<ILinkifierEvent>());\n  public readonly onHideLinkUnderline = this._onHideLinkUnderline.event;\n\n  constructor(\n    private readonly _element: HTMLElement,\n    @IMouseService private readonly _mouseService: IMouseService,\n    @IRenderService private readonly _renderService: IRenderService,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @ILinkProviderService private readonly _linkProviderService: ILinkProviderService\n  ) {\n    super();\n    this.register(getDisposeArrayDisposable(this._linkCacheDisposables));\n    this.register(toDisposable(() => {\n      this._lastMouseEvent = undefined;\n      // Clear out link providers as they could easily cause an embedder memory leak\n      this._activeProviderReplies?.clear();\n    }));\n    // Listen to resize to catch the case where it's resized and the cursor is out of the viewport.\n    this.register(this._bufferService.onResize(() => {\n      this._clearCurrentLink();\n      this._wasResized = true;\n    }));\n    this.register(addDisposableDomListener(this._element, 'mouseleave', () => {\n      this._isMouseOut = true;\n      this._clearCurrentLink();\n    }));\n    this.register(addDisposableDomListener(this._element, 'mousemove', this._handleMouseMove.bind(this)));\n    this.register(addDisposableDomListener(this._element, 'mousedown', this._handleMouseDown.bind(this)));\n    this.register(addDisposableDomListener(this._element, 'mouseup', this._handleMouseUp.bind(this)));\n  }\n\n  private _handleMouseMove(event: MouseEvent): void {\n    this._lastMouseEvent = event;\n\n    const position = this._positionFromMouseEvent(event, this._element, this._mouseService);\n    if (!position) {\n      return;\n    }\n    this._isMouseOut = false;\n\n    // Ignore the event if it's an embedder created hover widget\n    const composedPath = event.composedPath() as HTMLElement[];\n    for (let i = 0; i < composedPath.length; i++) {\n      const target = composedPath[i];\n      // Hit Terminal.element, break and continue\n      if (target.classList.contains('xterm')) {\n        break;\n      }\n      // It's a hover, don't respect hover event\n      if (target.classList.contains('xterm-hover')) {\n        return;\n      }\n    }\n\n    if (!this._lastBufferCell || (position.x !== this._lastBufferCell.x || position.y !== this._lastBufferCell.y)) {\n      this._handleHover(position);\n      this._lastBufferCell = position;\n    }\n  }\n\n  private _handleHover(position: IBufferCellPosition): void {\n    // TODO: This currently does not cache link provider results across wrapped lines, activeLine\n    //       should be something like `activeRange: {startY, endY}`\n    // Check if we need to clear the link\n    if (this._activeLine !== position.y || this._wasResized) {\n      this._clearCurrentLink();\n      this._askForLink(position, false);\n      this._wasResized = false;\n      return;\n    }\n\n    // Check the if the link is in the mouse position\n    const isCurrentLinkInPosition = this._currentLink && this._linkAtPosition(this._currentLink.link, position);\n    if (!isCurrentLinkInPosition) {\n      this._clearCurrentLink();\n      this._askForLink(position, true);\n    }\n  }\n\n  private _askForLink(position: IBufferCellPosition, useLineCache: boolean): void {\n    if (!this._activeProviderReplies || !useLineCache) {\n      this._activeProviderReplies?.forEach(reply => {\n        reply?.forEach(linkWithState => {\n          if (linkWithState.link.dispose) {\n            linkWithState.link.dispose();\n          }\n        });\n      });\n      this._activeProviderReplies = new Map();\n      this._activeLine = position.y;\n    }\n    let linkProvided = false;\n\n    // There is no link cached, so ask for one\n    for (const [i, linkProvider] of this._linkProviderService.linkProviders.entries()) {\n      if (useLineCache) {\n        const existingReply = this._activeProviderReplies?.get(i);\n        // If there isn't a reply, the provider hasn't responded yet.\n\n        // TODO: If there isn't a reply yet it means that the provider is still resolving. Ensuring\n        // provideLinks isn't triggered again saves ILink.hover firing twice though. This probably\n        // needs promises to get fixed\n        if (existingReply) {\n          linkProvided = this._checkLinkProviderResult(i, position, linkProvided);\n        }\n      } else {\n        linkProvider.provideLinks(position.y, (links: ILink[] | undefined) => {\n          if (this._isMouseOut) {\n            return;\n          }\n          const linksWithState: ILinkWithState[] | undefined = links?.map(link  => ({ link }));\n          this._activeProviderReplies?.set(i, linksWithState);\n          linkProvided = this._checkLinkProviderResult(i, position, linkProvided);\n\n          // If all providers have responded, remove lower priority links that intersect ranges of\n          // higher priority links\n          if (this._activeProviderReplies?.size === this._linkProviderService.linkProviders.length) {\n            this._removeIntersectingLinks(position.y, this._activeProviderReplies);\n          }\n        });\n      }\n    }\n  }\n\n  private _removeIntersectingLinks(y: number, replies: Map<Number, ILinkWithState[] | undefined>): void {\n    const occupiedCells = new Set<number>();\n    for (let i = 0; i < replies.size; i++) {\n      const providerReply = replies.get(i);\n      if (!providerReply) {\n        continue;\n      }\n      for (let i = 0; i < providerReply.length; i++) {\n        const linkWithState = providerReply[i];\n        const startX = linkWithState.link.range.start.y < y ? 0 : linkWithState.link.range.start.x;\n        const endX = linkWithState.link.range.end.y > y ? this._bufferService.cols : linkWithState.link.range.end.x;\n        for (let x = startX; x <= endX; x++) {\n          if (occupiedCells.has(x)) {\n            providerReply.splice(i--, 1);\n            break;\n          }\n          occupiedCells.add(x);\n        }\n      }\n    }\n  }\n\n  private _checkLinkProviderResult(index: number, position: IBufferCellPosition, linkProvided: boolean): boolean {\n    if (!this._activeProviderReplies) {\n      return linkProvided;\n    }\n\n    const links = this._activeProviderReplies.get(index);\n\n    // Check if every provider before this one has come back undefined\n    let hasLinkBefore = false;\n    for (let j = 0; j < index; j++) {\n      if (!this._activeProviderReplies.has(j) || this._activeProviderReplies.get(j)) {\n        hasLinkBefore = true;\n      }\n    }\n\n    // If all providers with higher priority came back undefined, then this provider's link for\n    // the position should be used\n    if (!hasLinkBefore && links) {\n      const linkAtPosition = links.find(link => this._linkAtPosition(link.link, position));\n      if (linkAtPosition) {\n        linkProvided = true;\n        this._handleNewLink(linkAtPosition);\n      }\n    }\n\n    // Check if all the providers have responded\n    if (this._activeProviderReplies.size === this._linkProviderService.linkProviders.length && !linkProvided) {\n      // Respect the order of the link providers\n      for (let j = 0; j < this._activeProviderReplies.size; j++) {\n        const currentLink = this._activeProviderReplies.get(j)?.find(link => this._linkAtPosition(link.link, position));\n        if (currentLink) {\n          linkProvided = true;\n          this._handleNewLink(currentLink);\n          break;\n        }\n      }\n    }\n\n    return linkProvided;\n  }\n\n  private _handleMouseDown(): void {\n    this._mouseDownLink = this._currentLink;\n  }\n\n  private _handleMouseUp(event: MouseEvent): void {\n    if (!this._currentLink) {\n      return;\n    }\n\n    const position = this._positionFromMouseEvent(event, this._element, this._mouseService);\n    if (!position) {\n      return;\n    }\n\n    if (this._mouseDownLink === this._currentLink && this._linkAtPosition(this._currentLink.link, position)) {\n      this._currentLink.link.activate(event, this._currentLink.link.text);\n    }\n  }\n\n  private _clearCurrentLink(startRow?: number, endRow?: number): void {\n    if (!this._currentLink || !this._lastMouseEvent) {\n      return;\n    }\n\n    // If we have a start and end row, check that the link is within it\n    if (!startRow || !endRow || (this._currentLink.link.range.start.y >= startRow && this._currentLink.link.range.end.y <= endRow)) {\n      this._linkLeave(this._element, this._currentLink.link, this._lastMouseEvent);\n      this._currentLink = undefined;\n      disposeArray(this._linkCacheDisposables);\n    }\n  }\n\n  private _handleNewLink(linkWithState: ILinkWithState): void {\n    if (!this._lastMouseEvent) {\n      return;\n    }\n\n    const position = this._positionFromMouseEvent(this._lastMouseEvent, this._element, this._mouseService);\n\n    if (!position) {\n      return;\n    }\n\n    // Trigger hover if the we have a link at the position\n    if (this._linkAtPosition(linkWithState.link, position)) {\n      this._currentLink = linkWithState;\n      this._currentLink.state = {\n        decorations: {\n          underline: linkWithState.link.decorations === undefined ? true : linkWithState.link.decorations.underline,\n          pointerCursor: linkWithState.link.decorations === undefined ? true : linkWithState.link.decorations.pointerCursor\n        },\n        isHovered: true\n      };\n      this._linkHover(this._element, linkWithState.link, this._lastMouseEvent);\n\n      // Add listener for tracking decorations changes\n      linkWithState.link.decorations = {} as ILinkDecorations;\n      Object.defineProperties(linkWithState.link.decorations, {\n        pointerCursor: {\n          get: () => this._currentLink?.state?.decorations.pointerCursor,\n          set: v => {\n            if (this._currentLink?.state && this._currentLink.state.decorations.pointerCursor !== v) {\n              this._currentLink.state.decorations.pointerCursor = v;\n              if (this._currentLink.state.isHovered) {\n                this._element.classList.toggle('xterm-cursor-pointer', v);\n              }\n            }\n          }\n        },\n        underline: {\n          get: () => this._currentLink?.state?.decorations.underline,\n          set: v => {\n            if (this._currentLink?.state && this._currentLink?.state?.decorations.underline !== v) {\n              this._currentLink.state.decorations.underline = v;\n              if (this._currentLink.state.isHovered) {\n                this._fireUnderlineEvent(linkWithState.link, v);\n              }\n            }\n          }\n        }\n      });\n\n      // Listen to viewport changes to re-render the link under the cursor (only when the line the\n      // link is on changes)\n      this._linkCacheDisposables.push(this._renderService.onRenderedViewportChange(e => {\n        // Sanity check, this shouldn't happen in practice as this listener would be disposed\n        if (!this._currentLink) {\n          return;\n        }\n        // When start is 0 a scroll most likely occurred, make sure links above the fold also get\n        // cleared.\n        const start = e.start === 0 ? 0 : e.start + 1 + this._bufferService.buffer.ydisp;\n        const end = this._bufferService.buffer.ydisp + 1 + e.end;\n        // Only clear the link if the viewport change happened on this line\n        if (this._currentLink.link.range.start.y >= start && this._currentLink.link.range.end.y <= end) {\n          this._clearCurrentLink(start, end);\n          if (this._lastMouseEvent) {\n            // re-eval previously active link after changes\n            const position = this._positionFromMouseEvent(this._lastMouseEvent, this._element, this._mouseService!);\n            if (position) {\n              this._askForLink(position, false);\n            }\n          }\n        }\n      }));\n    }\n  }\n\n  protected _linkHover(element: HTMLElement, link: ILink, event: MouseEvent): void {\n    if (this._currentLink?.state) {\n      this._currentLink.state.isHovered = true;\n      if (this._currentLink.state.decorations.underline) {\n        this._fireUnderlineEvent(link, true);\n      }\n      if (this._currentLink.state.decorations.pointerCursor) {\n        element.classList.add('xterm-cursor-pointer');\n      }\n    }\n\n    if (link.hover) {\n      link.hover(event, link.text);\n    }\n  }\n\n  private _fireUnderlineEvent(link: ILink, showEvent: boolean): void {\n    const range = link.range;\n    const scrollOffset = this._bufferService.buffer.ydisp;\n    const event = this._createLinkUnderlineEvent(range.start.x - 1, range.start.y - scrollOffset - 1, range.end.x, range.end.y - scrollOffset - 1, undefined);\n    const emitter = showEvent ? this._onShowLinkUnderline : this._onHideLinkUnderline;\n    emitter.fire(event);\n  }\n\n  protected _linkLeave(element: HTMLElement, link: ILink, event: MouseEvent): void {\n    if (this._currentLink?.state) {\n      this._currentLink.state.isHovered = false;\n      if (this._currentLink.state.decorations.underline) {\n        this._fireUnderlineEvent(link, false);\n      }\n      if (this._currentLink.state.decorations.pointerCursor) {\n        element.classList.remove('xterm-cursor-pointer');\n      }\n    }\n\n    if (link.leave) {\n      link.leave(event, link.text);\n    }\n  }\n\n  /**\n   * Check if the buffer position is within the link\n   * @param link\n   * @param position\n   */\n  private _linkAtPosition(link: ILink, position: IBufferCellPosition): boolean {\n    const lower = link.range.start.y * this._bufferService.cols + link.range.start.x;\n    const upper = link.range.end.y * this._bufferService.cols + link.range.end.x;\n    const current = position.y * this._bufferService.cols + position.x;\n    return (lower <= current && current <= upper);\n  }\n\n  /**\n   * Get the buffer position from a mouse event\n   * @param event\n   */\n  private _positionFromMouseEvent(event: MouseEvent, element: HTMLElement, mouseService: IMouseService): IBufferCellPosition | undefined {\n    const coords = mouseService.getCoords(event, element, this._bufferService.cols, this._bufferService.rows);\n    if (!coords) {\n      return;\n    }\n\n    return { x: coords[0], y: coords[1] + this._bufferService.buffer.ydisp };\n  }\n\n  private _createLinkUnderlineEvent(x1: number, y1: number, x2: number, y2: number, fg: number | undefined): ILinkifierEvent {\n    return { x1, y1, x2, y2, cols: this._bufferService.cols, fg };\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n// This file contains strings that get exported in the API so they can be localized\n\n// eslint-disable-next-line prefer-const\nexport let promptLabel = 'Terminal input';\n\n// eslint-disable-next-line prefer-const\nexport let tooMuchOutput = 'Too much output to announce, navigate to rows manually to read';\n", "/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferRange, ILink } from 'browser/Types';\nimport { ILinkProvider } from 'browser/services/Services';\nimport { CellData } from 'common/buffer/CellData';\nimport { IBufferService, IOptionsService, IOscLinkService } from 'common/services/Services';\n\nexport class OscLinkProvider implements ILinkProvider {\n  constructor(\n    @IBufferService private readonly _bufferService: IBufferService,\n    @IOptionsService private readonly _optionsService: IOptionsService,\n    @IOscLinkService private readonly _oscLinkService: IOscLinkService\n  ) {\n  }\n\n  public provideLinks(y: number, callback: (links: ILink[] | undefined) => void): void {\n    const line = this._bufferService.buffer.lines.get(y - 1);\n    if (!line) {\n      callback(undefined);\n      return;\n    }\n\n    const result: ILink[] = [];\n    const linkHandler = this._optionsService.rawOptions.linkHandler;\n    const cell = new CellData();\n    const lineLength = line.getTrimmedLength();\n    let currentLinkId = -1;\n    let currentStart = -1;\n    let finishLink = false;\n    for (let x = 0; x < lineLength; x++) {\n      // Minor optimization, only check for content if there isn't a link in case the link ends with\n      // a null cell\n      if (currentStart === -1 && !line.hasContent(x)) {\n        continue;\n      }\n\n      line.loadCell(x, cell);\n      if (cell.hasExtendedAttrs() && cell.extended.urlId) {\n        if (currentStart === -1) {\n          currentStart = x;\n          currentLinkId = cell.extended.urlId;\n          continue;\n        } else {\n          finishLink = cell.extended.urlId !== currentLinkId;\n        }\n      } else {\n        if (currentStart !== -1) {\n          finishLink = true;\n        }\n      }\n\n      if (finishLink || (currentStart !== -1 && x === lineLength - 1)) {\n        const text = this._oscLinkService.getLinkData(currentLinkId)?.uri;\n        if (text) {\n          // These ranges are 1-based\n          const range: IBufferRange = {\n            start: {\n              x: currentStart + 1,\n              y\n            },\n            end: {\n              // Offset end x if it's a link that ends on the last cell in the line\n              x: x + (!finishLink && x === lineLength - 1 ? 1 : 0),\n              y\n            }\n          };\n\n          let ignoreLink = false;\n          if (!linkHandler?.allowNonHttpProtocols) {\n            try {\n              const parsed = new URL(text);\n              if (!['http:', 'https:'].includes(parsed.protocol)) {\n                ignoreLink = true;\n              }\n            } catch (e) {\n              // Ignore invalid URLs to prevent unexpected behaviors\n              ignoreLink = true;\n            }\n          }\n\n          if (!ignoreLink) {\n            // OSC links always use underline and pointer decorations\n            result.push({\n              text,\n              range,\n              activate: (e, text) => (linkHandler ? linkHandler.activate(e, text, range) : defaultActivate(e, text)),\n              hover: (e, text) => linkHandler?.hover?.(e, text, range),\n              leave: (e, text) => linkHandler?.leave?.(e, text, range)\n            });\n          }\n        }\n        finishLink = false;\n\n        // Clear link or start a new link if one starts immediately\n        if (cell.hasExtendedAttrs() && cell.extended.urlId) {\n          currentStart = x;\n          currentLinkId = cell.extended.urlId;\n        } else {\n          currentStart = -1;\n          currentLinkId = -1;\n        }\n      }\n    }\n\n    // TODO: Handle fetching and returning other link ranges to underline other links with the same\n    //       id\n    callback(result);\n  }\n}\n\nfunction defaultActivate(e: MouseEvent, uri: string): void {\n  const answer = confirm(`Do you want to navigate to ${uri}?\\n\\nWARNING: This link could potentially be dangerous`);\n  if (answer) {\n    const newWindow = window.open();\n    if (newWindow) {\n      try {\n        newWindow.opener = null;\n      } catch {\n        // no-op, Electron can throw\n      }\n      newWindow.location.href = uri;\n    } else {\n      console.warn('Opening link blocked as opener could not be cleared');\n    }\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderDebouncerWithCallback } from 'browser/Types';\nimport { ICoreBrowserService } from 'browser/services/Services';\n\n/**\n * Debounces calls to render terminal rows using animation frames.\n */\nexport class RenderDebouncer implements IRenderDebouncerWithCallback {\n  private _rowStart: number | undefined;\n  private _rowEnd: number | undefined;\n  private _rowCount: number | undefined;\n  private _animationFrame: number | undefined;\n  private _refreshCallbacks: FrameRequestCallback[] = [];\n\n  constructor(\n    private _renderCallback: (start: number, end: number) => void,\n    private readonly _coreBrowserService: ICoreBrowserService\n  ) {\n  }\n\n  public dispose(): void {\n    if (this._animationFrame) {\n      this._coreBrowserService.window.cancelAnimationFrame(this._animationFrame);\n      this._animationFrame = undefined;\n    }\n  }\n\n  public addRefreshCallback(callback: FrameRequestCallback): number {\n    this._refreshCallbacks.push(callback);\n    if (!this._animationFrame) {\n      this._animationFrame = this._coreBrowserService.window.requestAnimationFrame(() => this._innerRefresh());\n    }\n    return this._animationFrame;\n  }\n\n  public refresh(rowStart: number | undefined, rowEnd: number | undefined, rowCount: number): void {\n    this._rowCount = rowCount;\n    // Get the min/max row start/end for the arg values\n    rowStart = rowStart !== undefined ? rowStart : 0;\n    rowEnd = rowEnd !== undefined ? rowEnd : this._rowCount - 1;\n    // Set the properties to the updated values\n    this._rowStart = this._rowStart !== undefined ? Math.min(this._rowStart, rowStart) : rowStart;\n    this._rowEnd = this._rowEnd !== undefined ? Math.max(this._rowEnd, rowEnd) : rowEnd;\n\n    if (this._animationFrame) {\n      return;\n    }\n\n    this._animationFrame = this._coreBrowserService.window.requestAnimationFrame(() => this._innerRefresh());\n  }\n\n  private _innerRefresh(): void {\n    this._animationFrame = undefined;\n\n    // Make sure values are set\n    if (this._rowStart === undefined || this._rowEnd === undefined || this._rowCount === undefined) {\n      this._runRefreshCallbacks();\n      return;\n    }\n\n    // Clamp values\n    const start = Math.max(this._rowStart, 0);\n    const end = Math.min(this._rowEnd, this._rowCount - 1);\n\n    // Reset debouncer (this happens before render callback as the render could trigger it again)\n    this._rowStart = undefined;\n    this._rowEnd = undefined;\n\n    // Run render callback\n    this._renderCallback(start, end);\n    this._runRefreshCallbacks();\n  }\n\n  private _runRefreshCallbacks(): void {\n    for (const callback of this._refreshCallbacks) {\n      callback(0);\n    }\n    this._refreshCallbacks = [];\n  }\n}\n", "/**\n * Copyright (c) 2014 The xterm.js authors. All rights reserved.\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\n * @license MIT\n *\n * Originally forked from (with the author's permission):\n *   Fabrice Bellard's javascript vt100 for jslinux:\n *   http://bellard.org/jslinux/\n *   Copyright (c) 2011 Fabrice Bellard\n *   The original design remains. The terminal itself\n *   has been extended to include xterm CSI codes, among\n *   other features.\n *\n * Terminal Emulation References:\n *   http://vt100.net/\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.txt\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.html\n *   http://invisible-island.net/vttest/\n *   http://www.inwap.com/pdp10/ansicode.txt\n *   http://linux.die.net/man/4/console_codes\n *   http://linux.die.net/man/7/urxvt\n */\n\nimport { copyHandler, handlePasteEvent, moveTextAreaUnderMouseCursor, paste, rightClickHandler } from 'browser/Clipboard';\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport { Linkifier } from './Linkifier';\nimport * as Strings from 'browser/LocalizableStrings';\nimport { OscLinkProvider } from 'browser/OscLinkProvider';\nimport { CharacterJoinerHandler, CustomKeyEventHandler, CustomWheelEventHandler, IBrowser, IBufferRange, ICompositionHelper, ILinkifier2, ITerminal, IViewport } from 'browser/Types';\nimport { Viewport } from 'browser/Viewport';\nimport { BufferDecorationRenderer } from 'browser/decorations/BufferDecorationRenderer';\nimport { OverviewRulerRenderer } from 'browser/decorations/OverviewRulerRenderer';\nimport { CompositionHelper } from 'browser/input/CompositionHelper';\nimport { DomRenderer } from 'browser/renderer/dom/DomRenderer';\nimport { IRenderer } from 'browser/renderer/shared/Types';\nimport { CharSizeService } from 'browser/services/CharSizeService';\nimport { CharacterJoinerService } from 'browser/services/CharacterJoinerService';\nimport { CoreBrowserService } from 'browser/services/CoreBrowserService';\nimport { MouseService } from 'browser/services/MouseService';\nimport { RenderService } from 'browser/services/RenderService';\nimport { SelectionService } from 'browser/services/SelectionService';\nimport { ICharSizeService, ICharacterJoinerService, ICoreBrowserService, ILinkProviderService, IMouseService, IRenderService, ISelectionService, IThemeService } from 'browser/services/Services';\nimport { ThemeService } from 'browser/services/ThemeService';\nimport { channels, color } from 'common/Color';\nimport { CoreTerminal } from 'common/CoreTerminal';\nimport { EventEmitter, IEvent, forwardEvent } from 'common/EventEmitter';\nimport { MutableDisposable, toDisposable } from 'common/Lifecycle';\nimport * as Browser from 'common/Platform';\nimport { ColorRequestType, CoreMouseAction, CoreMouseButton, CoreMouseEventType, IColorEvent, ITerminalOptions, KeyboardResultType, ScrollSource, SpecialColorIndex } from 'common/Types';\nimport { DEFAULT_ATTR_DATA } from 'common/buffer/BufferLine';\nimport { IBuffer } from 'common/buffer/Types';\nimport { C0, C1_ESCAPED } from 'common/data/EscapeSequences';\nimport { evaluateKeyboardEvent } from 'common/input/Keyboard';\nimport { toRgbString } from 'common/input/XParseColor';\nimport { DecorationService } from 'common/services/DecorationService';\nimport { IDecorationService } from 'common/services/Services';\nimport { IDecoration, IDecorationOptions, IDisposable, ILinkProvider, IMarker } from '@xterm/xterm';\nimport { WindowsOptionsReportType } from '../common/InputHandler';\nimport { AccessibilityManager } from './AccessibilityManager';\nimport { LinkProviderService } from 'browser/services/LinkProviderService';\n\nexport class Terminal extends CoreTerminal implements ITerminal {\n  public textarea: HTMLTextAreaElement | undefined;\n  public element: HTMLElement | undefined;\n  public screenElement: HTMLElement | undefined;\n\n  private _document: Document | undefined;\n  private _viewportScrollArea: HTMLElement | undefined;\n  private _viewportElement: HTMLElement | undefined;\n  private _helperContainer: HTMLElement | undefined;\n  private _compositionView: HTMLElement | undefined;\n\n  public linkifier: ILinkifier2 | undefined;\n  private _overviewRulerRenderer: OverviewRulerRenderer | undefined;\n\n  public browser: IBrowser = Browser as any;\n\n  private _customKeyEventHandler: CustomKeyEventHandler | undefined;\n  private _customWheelEventHandler: CustomWheelEventHandler | undefined;\n\n  // Browser services\n  private _decorationService: DecorationService;\n  private _linkProviderService: ILinkProviderService;\n\n  // Optional browser services\n  private _charSizeService: ICharSizeService | undefined;\n  private _coreBrowserService: ICoreBrowserService | undefined;\n  private _mouseService: IMouseService | undefined;\n  private _renderService: IRenderService | undefined;\n  private _themeService: IThemeService | undefined;\n  private _characterJoinerService: ICharacterJoinerService | undefined;\n  private _selectionService: ISelectionService | undefined;\n\n  /**\n   * Records whether the keydown event has already been handled and triggered a data event, if so\n   * the keypress event should not trigger a data event but should still print to the textarea so\n   * screen readers will announce it.\n   */\n  private _keyDownHandled: boolean = false;\n\n  /**\n   * Records whether a keydown event has occured since the last keyup event, i.e. whether a key\n   * is currently \"pressed\".\n   */\n  private _keyDownSeen: boolean = false;\n\n  /**\n   * Records whether the keypress event has already been handled and triggered a data event, if so\n   * the input event should not trigger a data event but should still print to the textarea so\n   * screen readers will announce it.\n   */\n  private _keyPressHandled: boolean = false;\n\n  /**\n   * Records whether there has been a keydown event for a dead key without a corresponding keydown\n   * event for the composed/alternative character. If we cancel the keydown event for the dead key,\n   * no events will be emitted for the final character.\n   */\n  private _unprocessedDeadKey: boolean = false;\n\n  public viewport: IViewport | undefined;\n  private _compositionHelper: ICompositionHelper | undefined;\n  private _accessibilityManager: MutableDisposable<AccessibilityManager> = this.register(new MutableDisposable());\n\n  private readonly _onCursorMove = this.register(new EventEmitter<void>());\n  public readonly onCursorMove = this._onCursorMove.event;\n  private readonly _onKey = this.register(new EventEmitter<{ key: string, domEvent: KeyboardEvent }>());\n  public readonly onKey = this._onKey.event;\n  private readonly _onRender = this.register(new EventEmitter<{ start: number, end: number }>());\n  public readonly onRender = this._onRender.event;\n  private readonly _onSelectionChange = this.register(new EventEmitter<void>());\n  public readonly onSelectionChange = this._onSelectionChange.event;\n  private readonly _onTitleChange = this.register(new EventEmitter<string>());\n  public readonly onTitleChange = this._onTitleChange.event;\n  private readonly _onBell = this.register(new EventEmitter<void>());\n  public readonly onBell = this._onBell.event;\n\n  private _onFocus = this.register(new EventEmitter<void>());\n  public get onFocus(): IEvent<void> { return this._onFocus.event; }\n  private _onBlur = this.register(new EventEmitter<void>());\n  public get onBlur(): IEvent<void> { return this._onBlur.event; }\n  private _onA11yCharEmitter = this.register(new EventEmitter<string>());\n  public get onA11yChar(): IEvent<string> { return this._onA11yCharEmitter.event; }\n  private _onA11yTabEmitter = this.register(new EventEmitter<number>());\n  public get onA11yTab(): IEvent<number> { return this._onA11yTabEmitter.event; }\n  private _onWillOpen = this.register(new EventEmitter<HTMLElement>());\n  public get onWillOpen(): IEvent<HTMLElement> { return this._onWillOpen.event; }\n\n  constructor(\n    options: Partial<ITerminalOptions> = {}\n  ) {\n    super(options);\n\n    this._setup();\n\n    this._decorationService = this._instantiationService.createInstance(DecorationService);\n    this._instantiationService.setService(IDecorationService, this._decorationService);\n    this._linkProviderService = this._instantiationService.createInstance(LinkProviderService);\n    this._instantiationService.setService(ILinkProviderService, this._linkProviderService);\n    this._linkProviderService.registerLinkProvider(this._instantiationService.createInstance(OscLinkProvider));\n\n    // Setup InputHandler listeners\n    this.register(this._inputHandler.onRequestBell(() => this._onBell.fire()));\n    this.register(this._inputHandler.onRequestRefreshRows((start, end) => this.refresh(start, end)));\n    this.register(this._inputHandler.onRequestSendFocus(() => this._reportFocus()));\n    this.register(this._inputHandler.onRequestReset(() => this.reset()));\n    this.register(this._inputHandler.onRequestWindowsOptionsReport(type => this._reportWindowsOptions(type)));\n    this.register(this._inputHandler.onColor((event) => this._handleColorEvent(event)));\n    this.register(forwardEvent(this._inputHandler.onCursorMove, this._onCursorMove));\n    this.register(forwardEvent(this._inputHandler.onTitleChange, this._onTitleChange));\n    this.register(forwardEvent(this._inputHandler.onA11yChar, this._onA11yCharEmitter));\n    this.register(forwardEvent(this._inputHandler.onA11yTab, this._onA11yTabEmitter));\n\n    // Setup listeners\n    this.register(this._bufferService.onResize(e => this._afterResize(e.cols, e.rows)));\n\n    this.register(toDisposable(() => {\n      this._customKeyEventHandler = undefined;\n      this.element?.parentNode?.removeChild(this.element);\n    }));\n  }\n\n  /**\n   * Handle color event from inputhandler for OSC 4|104 | 10|110 | 11|111 | 12|112.\n   * An event from OSC 4|104 may contain multiple set or report requests, and multiple\n   * or none restore requests (resetting all),\n   * while an event from OSC 10|110 | 11|111 | 12|112 always contains a single request.\n   */\n  private _handleColorEvent(event: IColorEvent): void {\n    if (!this._themeService) return;\n    for (const req of event) {\n      let acc: 'foreground' | 'background' | 'cursor' | 'ansi';\n      let ident = '';\n      switch (req.index) {\n        case SpecialColorIndex.FOREGROUND: // OSC 10 | 110\n          acc = 'foreground';\n          ident = '10';\n          break;\n        case SpecialColorIndex.BACKGROUND: // OSC 11 | 111\n          acc = 'background';\n          ident = '11';\n          break;\n        case SpecialColorIndex.CURSOR: // OSC 12 | 112\n          acc = 'cursor';\n          ident = '12';\n          break;\n        default: // OSC 4 | 104\n          // we can skip the [0..255] range check here (already done in inputhandler)\n          acc = 'ansi';\n          ident = '4;' + req.index;\n      }\n      switch (req.type) {\n        case ColorRequestType.REPORT:\n          const colorRgb = color.toColorRGB(acc === 'ansi'\n            ? this._themeService.colors.ansi[req.index]\n            : this._themeService.colors[acc]);\n          this.coreService.triggerDataEvent(`${C0.ESC}]${ident};${toRgbString(colorRgb)}${C1_ESCAPED.ST}`);\n          break;\n        case ColorRequestType.SET:\n          if (acc === 'ansi') {\n            this._themeService.modifyColors(colors => colors.ansi[req.index] = channels.toColor(...req.color));\n          } else {\n            const narrowedAcc = acc;\n            this._themeService.modifyColors(colors => colors[narrowedAcc] = channels.toColor(...req.color));\n          }\n          break;\n        case ColorRequestType.RESTORE:\n          this._themeService.restoreColor(req.index);\n          break;\n      }\n    }\n  }\n\n  protected _setup(): void {\n    super._setup();\n\n    this._customKeyEventHandler = undefined;\n  }\n\n  /**\n   * Convenience property to active buffer.\n   */\n  public get buffer(): IBuffer {\n    return this.buffers.active;\n  }\n\n  /**\n   * Focus the terminal. Delegates focus handling to the terminal's DOM element.\n   */\n  public focus(): void {\n    if (this.textarea) {\n      this.textarea.focus({ preventScroll: true });\n    }\n  }\n\n  private _handleScreenReaderModeOptionChange(value: boolean): void {\n    if (value) {\n      if (!this._accessibilityManager.value && this._renderService) {\n        this._accessibilityManager.value = this._instantiationService.createInstance(AccessibilityManager, this);\n      }\n    } else {\n      this._accessibilityManager.clear();\n    }\n  }\n\n  /**\n   * Binds the desired focus behavior on a given terminal object.\n   */\n  private _handleTextAreaFocus(ev: FocusEvent): void {\n    if (this.coreService.decPrivateModes.sendFocus) {\n      this.coreService.triggerDataEvent(C0.ESC + '[I');\n    }\n    this.element!.classList.add('focus');\n    this._showCursor();\n    this._onFocus.fire();\n  }\n\n  /**\n   * Blur the terminal, calling the blur function on the terminal's underlying\n   * textarea.\n   */\n  public blur(): void {\n    return this.textarea?.blur();\n  }\n\n  /**\n   * Binds the desired blur behavior on a given terminal object.\n   */\n  private _handleTextAreaBlur(): void {\n    // Text can safely be removed on blur. Doing it earlier could interfere with\n    // screen readers reading it out.\n    this.textarea!.value = '';\n    this.refresh(this.buffer.y, this.buffer.y);\n    if (this.coreService.decPrivateModes.sendFocus) {\n      this.coreService.triggerDataEvent(C0.ESC + '[O');\n    }\n    this.element!.classList.remove('focus');\n    this._onBlur.fire();\n  }\n\n  private _syncTextArea(): void {\n    if (!this.textarea || !this.buffer.isCursorInViewport || this._compositionHelper!.isComposing || !this._renderService) {\n      return;\n    }\n    const cursorY = this.buffer.ybase + this.buffer.y;\n    const bufferLine = this.buffer.lines.get(cursorY);\n    if (!bufferLine) {\n      return;\n    }\n    const cursorX = Math.min(this.buffer.x, this.cols - 1);\n    const cellHeight = this._renderService.dimensions.css.cell.height;\n    const width = bufferLine.getWidth(cursorX);\n    const cellWidth = this._renderService.dimensions.css.cell.width * width;\n    const cursorTop = this.buffer.y * this._renderService.dimensions.css.cell.height;\n    const cursorLeft = cursorX * this._renderService.dimensions.css.cell.width;\n\n    // Sync the textarea to the exact position of the composition view so the IME knows where the\n    // text is.\n    this.textarea.style.left = cursorLeft + 'px';\n    this.textarea.style.top = cursorTop + 'px';\n    this.textarea.style.width = cellWidth + 'px';\n    this.textarea.style.height = cellHeight + 'px';\n    this.textarea.style.lineHeight = cellHeight + 'px';\n    this.textarea.style.zIndex = '-5';\n  }\n\n  /**\n   * Initialize default behavior\n   */\n  private _initGlobal(): void {\n    this._bindKeys();\n\n    // Bind clipboard functionality\n    this.register(addDisposableDomListener(this.element!, 'copy', (event: ClipboardEvent) => {\n      // If mouse events are active it means the selection manager is disabled and\n      // copy should be handled by the host program.\n      if (!this.hasSelection()) {\n        return;\n      }\n      copyHandler(event, this._selectionService!);\n    }));\n    const pasteHandlerWrapper = (event: ClipboardEvent): void => handlePasteEvent(event, this.textarea!, this.coreService, this.optionsService);\n    this.register(addDisposableDomListener(this.textarea!, 'paste', pasteHandlerWrapper));\n    this.register(addDisposableDomListener(this.element!, 'paste', pasteHandlerWrapper));\n\n    // Handle right click context menus\n    if (Browser.isFirefox) {\n      // Firefox doesn't appear to fire the contextmenu event on right click\n      this.register(addDisposableDomListener(this.element!, 'mousedown', (event: MouseEvent) => {\n        if (event.button === 2) {\n          rightClickHandler(event, this.textarea!, this.screenElement!, this._selectionService!, this.options.rightClickSelectsWord);\n        }\n      }));\n    } else {\n      this.register(addDisposableDomListener(this.element!, 'contextmenu', (event: MouseEvent) => {\n        rightClickHandler(event, this.textarea!, this.screenElement!, this._selectionService!, this.options.rightClickSelectsWord);\n      }));\n    }\n\n    // Move the textarea under the cursor when middle clicking on Linux to ensure\n    // middle click to paste selection works. This only appears to work in Chrome\n    // at the time is writing.\n    if (Browser.isLinux) {\n      // Use auxclick event over mousedown the latter doesn't seem to work. Note\n      // that the regular click event doesn't fire for the middle mouse button.\n      this.register(addDisposableDomListener(this.element!, 'auxclick', (event: MouseEvent) => {\n        if (event.button === 1) {\n          moveTextAreaUnderMouseCursor(event, this.textarea!, this.screenElement!);\n        }\n      }));\n    }\n  }\n\n  /**\n   * Apply key handling to the terminal\n   */\n  private _bindKeys(): void {\n    this.register(addDisposableDomListener(this.textarea!, 'keyup', (ev: KeyboardEvent) => this._keyUp(ev), true));\n    this.register(addDisposableDomListener(this.textarea!, 'keydown', (ev: KeyboardEvent) => this._keyDown(ev), true));\n    this.register(addDisposableDomListener(this.textarea!, 'keypress', (ev: KeyboardEvent) => this._keyPress(ev), true));\n    this.register(addDisposableDomListener(this.textarea!, 'compositionstart', () => this._compositionHelper!.compositionstart()));\n    this.register(addDisposableDomListener(this.textarea!, 'compositionupdate', (e: CompositionEvent) => this._compositionHelper!.compositionupdate(e)));\n    this.register(addDisposableDomListener(this.textarea!, 'compositionend', () => this._compositionHelper!.compositionend()));\n    this.register(addDisposableDomListener(this.textarea!, 'input', (ev: InputEvent) => this._inputEvent(ev), true));\n    this.register(this.onRender(() => this._compositionHelper!.updateCompositionElements()));\n  }\n\n  /**\n   * Opens the terminal within an element.\n   *\n   * @param parent The element to create the terminal within.\n   */\n  public open(parent: HTMLElement): void {\n    if (!parent) {\n      throw new Error('Terminal requires a parent element.');\n    }\n\n    if (!parent.isConnected) {\n      this._logService.debug('Terminal.open was called on an element that was not attached to the DOM');\n    }\n\n    // If the terminal is already opened\n    if (this.element?.ownerDocument.defaultView && this._coreBrowserService) {\n      // Adjust the window if needed\n      if (this.element.ownerDocument.defaultView !== this._coreBrowserService.window) {\n        this._coreBrowserService.window = this.element.ownerDocument.defaultView;\n      }\n      return;\n    }\n\n    this._document = parent.ownerDocument;\n    if (this.options.documentOverride && this.options.documentOverride instanceof Document) {\n      this._document = this.optionsService.rawOptions.documentOverride as Document;\n    }\n\n    // Create main element container\n    this.element = this._document.createElement('div');\n    this.element.dir = 'ltr';   // xterm.css assumes LTR\n    this.element.classList.add('terminal');\n    this.element.classList.add('xterm');\n    parent.appendChild(this.element);\n\n    // Performance: Use a document fragment to build the terminal\n    // viewport and helper elements detached from the DOM\n    const fragment = this._document.createDocumentFragment();\n    this._viewportElement = this._document.createElement('div');\n    this._viewportElement.classList.add('xterm-viewport');\n    fragment.appendChild(this._viewportElement);\n\n    this._viewportScrollArea = this._document.createElement('div');\n    this._viewportScrollArea.classList.add('xterm-scroll-area');\n    this._viewportElement.appendChild(this._viewportScrollArea);\n\n    this.screenElement = this._document.createElement('div');\n    this.screenElement.classList.add('xterm-screen');\n    this.register(addDisposableDomListener(this.screenElement, 'mousemove', (ev: MouseEvent) => this.updateCursorStyle(ev)));\n    // Create the container that will hold helpers like the textarea for\n    // capturing DOM Events. Then produce the helpers.\n    this._helperContainer = this._document.createElement('div');\n    this._helperContainer.classList.add('xterm-helpers');\n    this.screenElement.appendChild(this._helperContainer);\n    fragment.appendChild(this.screenElement);\n\n    this.textarea = this._document.createElement('textarea');\n    this.textarea.classList.add('xterm-helper-textarea');\n    this.textarea.setAttribute('aria-label', Strings.promptLabel);\n    if (!Browser.isChromeOS) {\n      // ChromeVox on ChromeOS does not like this. See\n      // https://issuetracker.google.com/issues/260170397\n      this.textarea.setAttribute('aria-multiline', 'false');\n    }\n    this.textarea.setAttribute('autocorrect', 'off');\n    this.textarea.setAttribute('autocapitalize', 'off');\n    this.textarea.setAttribute('spellcheck', 'false');\n    this.textarea.tabIndex = 0;\n\n    // Register the core browser service before the generic textarea handlers are registered so it\n    // handles them first. Otherwise the renderers may use the wrong focus state.\n    this._coreBrowserService = this.register(this._instantiationService.createInstance(CoreBrowserService,\n      this.textarea,\n      parent.ownerDocument.defaultView ?? window,\n      // Force unsafe null in node.js environment for tests\n      this._document ?? (typeof window !== 'undefined') ? window.document : null as any\n    ));\n    this._instantiationService.setService(ICoreBrowserService, this._coreBrowserService);\n\n    this.register(addDisposableDomListener(this.textarea, 'focus', (ev: FocusEvent) => this._handleTextAreaFocus(ev)));\n    this.register(addDisposableDomListener(this.textarea, 'blur', () => this._handleTextAreaBlur()));\n    this._helperContainer.appendChild(this.textarea);\n\n    this._charSizeService = this._instantiationService.createInstance(CharSizeService, this._document, this._helperContainer);\n    this._instantiationService.setService(ICharSizeService, this._charSizeService);\n\n    this._themeService = this._instantiationService.createInstance(ThemeService);\n    this._instantiationService.setService(IThemeService, this._themeService);\n\n    this._characterJoinerService = this._instantiationService.createInstance(CharacterJoinerService);\n    this._instantiationService.setService(ICharacterJoinerService, this._characterJoinerService);\n\n    this._renderService = this.register(this._instantiationService.createInstance(RenderService, this.rows, this.screenElement));\n    this._instantiationService.setService(IRenderService, this._renderService);\n    this.register(this._renderService.onRenderedViewportChange(e => this._onRender.fire(e)));\n    this.onResize(e => this._renderService!.resize(e.cols, e.rows));\n\n    this._compositionView = this._document.createElement('div');\n    this._compositionView.classList.add('composition-view');\n    this._compositionHelper = this._instantiationService.createInstance(CompositionHelper, this.textarea, this._compositionView);\n    this._helperContainer.appendChild(this._compositionView);\n\n    this._mouseService = this._instantiationService.createInstance(MouseService);\n    this._instantiationService.setService(IMouseService, this._mouseService);\n\n    this.linkifier = this.register(this._instantiationService.createInstance(Linkifier, this.screenElement));\n\n    // Performance: Add viewport and helper elements from the fragment\n    this.element.appendChild(fragment);\n\n    try {\n      this._onWillOpen.fire(this.element);\n    }\n    catch { /* fails to load addon for some reason */ }\n    if (!this._renderService.hasRenderer()) {\n      this._renderService.setRenderer(this._createRenderer());\n    }\n\n    this.viewport = this._instantiationService.createInstance(Viewport, this._viewportElement, this._viewportScrollArea);\n    this.viewport.onRequestScrollLines(e => this.scrollLines(e.amount, e.suppressScrollEvent, ScrollSource.VIEWPORT)),\n    this.register(this._inputHandler.onRequestSyncScrollBar(() => this.viewport!.syncScrollArea()));\n    this.register(this.viewport);\n\n    this.register(this.onCursorMove(() => {\n      this._renderService!.handleCursorMove();\n      this._syncTextArea();\n    }));\n    this.register(this.onResize(() => this._renderService!.handleResize(this.cols, this.rows)));\n    this.register(this.onBlur(() => this._renderService!.handleBlur()));\n    this.register(this.onFocus(() => this._renderService!.handleFocus()));\n    this.register(this._renderService.onDimensionsChange(() => this.viewport!.syncScrollArea()));\n\n    this._selectionService = this.register(this._instantiationService.createInstance(SelectionService,\n      this.element,\n      this.screenElement,\n      this.linkifier\n    ));\n    this._instantiationService.setService(ISelectionService, this._selectionService);\n    this.register(this._selectionService.onRequestScrollLines(e => this.scrollLines(e.amount, e.suppressScrollEvent)));\n    this.register(this._selectionService.onSelectionChange(() => this._onSelectionChange.fire()));\n    this.register(this._selectionService.onRequestRedraw(e => this._renderService!.handleSelectionChanged(e.start, e.end, e.columnSelectMode)));\n    this.register(this._selectionService.onLinuxMouseSelection(text => {\n      // If there's a new selection, put it into the textarea, focus and select it\n      // in order to register it as a selection on the OS. This event is fired\n      // only on Linux to enable middle click to paste selection.\n      this.textarea!.value = text;\n      this.textarea!.focus();\n      this.textarea!.select();\n    }));\n    this.register(this._onScroll.event(ev => {\n      this.viewport!.syncScrollArea();\n      this._selectionService!.refresh();\n    }));\n    this.register(addDisposableDomListener(this._viewportElement, 'scroll', () => this._selectionService!.refresh()));\n\n    this.register(this._instantiationService.createInstance(BufferDecorationRenderer, this.screenElement));\n    this.register(addDisposableDomListener(this.element, 'mousedown', (e: MouseEvent) => this._selectionService!.handleMouseDown(e)));\n\n    // apply mouse event classes set by escape codes before terminal was attached\n    if (this.coreMouseService.areMouseEventsActive) {\n      this._selectionService.disable();\n      this.element.classList.add('enable-mouse-events');\n    } else {\n      this._selectionService.enable();\n    }\n\n    if (this.options.screenReaderMode) {\n      // Note that this must be done *after* the renderer is created in order to\n      // ensure the correct order of the dprchange event\n      this._accessibilityManager.value = this._instantiationService.createInstance(AccessibilityManager, this);\n    }\n    this.register(this.optionsService.onSpecificOptionChange('screenReaderMode', e => this._handleScreenReaderModeOptionChange(e)));\n\n    if (this.options.overviewRulerWidth) {\n      this._overviewRulerRenderer = this.register(this._instantiationService.createInstance(OverviewRulerRenderer, this._viewportElement, this.screenElement));\n    }\n    this.optionsService.onSpecificOptionChange('overviewRulerWidth', value => {\n      if (!this._overviewRulerRenderer && value && this._viewportElement && this.screenElement) {\n        this._overviewRulerRenderer = this.register(this._instantiationService.createInstance(OverviewRulerRenderer, this._viewportElement, this.screenElement));\n      }\n    });\n    // Measure the character size\n    this._charSizeService.measure();\n\n    // Setup loop that draws to screen\n    this.refresh(0, this.rows - 1);\n\n    // Initialize global actions that need to be taken on the document.\n    this._initGlobal();\n\n    // Listen for mouse events and translate\n    // them into terminal mouse protocols.\n    this.bindMouse();\n  }\n\n  private _createRenderer(): IRenderer {\n    return this._instantiationService.createInstance(DomRenderer, this, this._document!, this.element!, this.screenElement!, this._viewportElement!, this._helperContainer!, this.linkifier!);\n  }\n\n  /**\n   * Bind certain mouse events to the terminal.\n   * By default only 3 button + wheel up/down is ativated. For higher buttons\n   * no mouse report will be created. Typically the standard actions will be active.\n   *\n   * There are several reasons not to enable support for higher buttons/wheel:\n   * - Button 4 and 5 are typically used for history back and forward navigation,\n   *   there is no straight forward way to supress/intercept those standard actions.\n   * - Support for higher buttons does not work in some platform/browser combinations.\n   * - Left/right wheel was not tested.\n   * - Emulators vary in mouse button support, typically only 3 buttons and\n   *   wheel up/down work reliable.\n   *\n   * TODO: Move mouse event code into its own file.\n   */\n  public bindMouse(): void {\n    const self = this;\n    const el = this.element!;\n\n    // send event to CoreMouseService\n    function sendEvent(ev: MouseEvent | WheelEvent): boolean {\n      // get mouse coordinates\n      const pos = self._mouseService!.getMouseReportCoords(ev, self.screenElement!);\n      if (!pos) {\n        return false;\n      }\n\n      let but: CoreMouseButton;\n      let action: CoreMouseAction | undefined;\n      switch ((ev as any).overrideType || ev.type) {\n        case 'mousemove':\n          action = CoreMouseAction.MOVE;\n          if (ev.buttons === undefined) {\n            // buttons is not supported on macOS, try to get a value from button instead\n            but = CoreMouseButton.NONE;\n            if (ev.button !== undefined) {\n              but = ev.button < 3 ? ev.button : CoreMouseButton.NONE;\n            }\n          } else {\n            // according to MDN buttons only reports up to button 5 (AUX2)\n            but = ev.buttons & 1 ? CoreMouseButton.LEFT :\n              ev.buttons & 4 ? CoreMouseButton.MIDDLE :\n                ev.buttons & 2 ? CoreMouseButton.RIGHT :\n                  CoreMouseButton.NONE; // fallback to NONE\n          }\n          break;\n        case 'mouseup':\n          action = CoreMouseAction.UP;\n          but = ev.button < 3 ? ev.button : CoreMouseButton.NONE;\n          break;\n        case 'mousedown':\n          action = CoreMouseAction.DOWN;\n          but = ev.button < 3 ? ev.button : CoreMouseButton.NONE;\n          break;\n        case 'wheel':\n          if (self._customWheelEventHandler && self._customWheelEventHandler(ev as WheelEvent) === false) {\n            return false;\n          }\n          const amount = self.viewport!.getLinesScrolled(ev as WheelEvent);\n\n          if (amount === 0) {\n            return false;\n          }\n\n          action = (ev as WheelEvent).deltaY < 0 ? CoreMouseAction.UP : CoreMouseAction.DOWN;\n          but = CoreMouseButton.WHEEL;\n          break;\n        default:\n          // dont handle other event types by accident\n          return false;\n      }\n\n      // exit if we cannot determine valid button/action values\n      // do nothing for higher buttons than wheel\n      if (action === undefined || but === undefined || but > CoreMouseButton.WHEEL) {\n        return false;\n      }\n\n      return self.coreMouseService.triggerMouseEvent({\n        col: pos.col,\n        row: pos.row,\n        x: pos.x,\n        y: pos.y,\n        button: but,\n        action,\n        ctrl: ev.ctrlKey,\n        alt: ev.altKey,\n        shift: ev.shiftKey\n      });\n    }\n\n    /**\n     * Event listener state handling.\n     * We listen to the onProtocolChange event of CoreMouseService and put\n     * requested listeners in `requestedEvents`. With this the listeners\n     * have all bits to do the event listener juggling.\n     * Note: 'mousedown' currently is \"always on\" and not managed\n     * by onProtocolChange.\n     */\n    const requestedEvents: { [key: string]: ((ev: Event) => void) | null } = {\n      mouseup: null,\n      wheel: null,\n      mousedrag: null,\n      mousemove: null\n    };\n    const eventListeners: { [key: string]: (ev: any) => void | boolean } = {\n      mouseup: (ev: MouseEvent) => {\n        sendEvent(ev);\n        if (!ev.buttons) {\n          // if no other button is held remove global handlers\n          this._document!.removeEventListener('mouseup', requestedEvents.mouseup!);\n          if (requestedEvents.mousedrag) {\n            this._document!.removeEventListener('mousemove', requestedEvents.mousedrag);\n          }\n        }\n        return this.cancel(ev);\n      },\n      wheel: (ev: WheelEvent) => {\n        sendEvent(ev);\n        return this.cancel(ev, true);\n      },\n      mousedrag: (ev: MouseEvent) => {\n        // deal only with move while a button is held\n        if (ev.buttons) {\n          sendEvent(ev);\n        }\n      },\n      mousemove: (ev: MouseEvent) => {\n        // deal only with move without any button\n        if (!ev.buttons) {\n          sendEvent(ev);\n        }\n      }\n    };\n    this.register(this.coreMouseService.onProtocolChange(events => {\n      // apply global changes on events\n      if (events) {\n        if (this.optionsService.rawOptions.logLevel === 'debug') {\n          this._logService.debug('Binding to mouse events:', this.coreMouseService.explainEvents(events));\n        }\n        this.element!.classList.add('enable-mouse-events');\n        this._selectionService!.disable();\n      } else {\n        this._logService.debug('Unbinding from mouse events.');\n        this.element!.classList.remove('enable-mouse-events');\n        this._selectionService!.enable();\n      }\n\n      // add/remove handlers from requestedEvents\n\n      if (!(events & CoreMouseEventType.MOVE)) {\n        el.removeEventListener('mousemove', requestedEvents.mousemove!);\n        requestedEvents.mousemove = null;\n      } else if (!requestedEvents.mousemove) {\n        el.addEventListener('mousemove', eventListeners.mousemove);\n        requestedEvents.mousemove = eventListeners.mousemove;\n      }\n\n      if (!(events & CoreMouseEventType.WHEEL)) {\n        el.removeEventListener('wheel', requestedEvents.wheel!);\n        requestedEvents.wheel = null;\n      } else if (!requestedEvents.wheel) {\n        el.addEventListener('wheel', eventListeners.wheel, { passive: false });\n        requestedEvents.wheel = eventListeners.wheel;\n      }\n\n      if (!(events & CoreMouseEventType.UP)) {\n        this._document!.removeEventListener('mouseup', requestedEvents.mouseup!);\n        requestedEvents.mouseup = null;\n      } else if (!requestedEvents.mouseup) {\n        requestedEvents.mouseup = eventListeners.mouseup;\n      }\n\n      if (!(events & CoreMouseEventType.DRAG)) {\n        this._document!.removeEventListener('mousemove', requestedEvents.mousedrag!);\n        requestedEvents.mousedrag = null;\n      } else if (!requestedEvents.mousedrag) {\n        requestedEvents.mousedrag = eventListeners.mousedrag;\n      }\n    }));\n    // force initial onProtocolChange so we dont miss early mouse requests\n    this.coreMouseService.activeProtocol = this.coreMouseService.activeProtocol;\n\n    /**\n     * \"Always on\" event listeners.\n     */\n    this.register(addDisposableDomListener(el, 'mousedown', (ev: MouseEvent) => {\n      ev.preventDefault();\n      this.focus();\n\n      // Don't send the mouse button to the pty if mouse events are disabled or\n      // if the selection manager is having selection forced (ie. a modifier is\n      // held).\n      if (!this.coreMouseService.areMouseEventsActive || this._selectionService!.shouldForceSelection(ev)) {\n        return;\n      }\n\n      sendEvent(ev);\n\n      // Register additional global handlers which should keep reporting outside\n      // of the terminal element.\n      // Note: Other emulators also do this for 'mousedown' while a button\n      // is held, we currently limit 'mousedown' to the terminal only.\n      if (requestedEvents.mouseup) {\n        this._document!.addEventListener('mouseup', requestedEvents.mouseup);\n      }\n      if (requestedEvents.mousedrag) {\n        this._document!.addEventListener('mousemove', requestedEvents.mousedrag);\n      }\n\n      return this.cancel(ev);\n    }));\n\n    this.register(addDisposableDomListener(el, 'wheel', (ev: WheelEvent) => {\n      // do nothing, if app side handles wheel itself\n      if (requestedEvents.wheel) return;\n\n      if (this._customWheelEventHandler && this._customWheelEventHandler(ev) === false) {\n        return false;\n      }\n\n      if (!this.buffer.hasScrollback) {\n        // Convert wheel events into up/down events when the buffer does not have scrollback, this\n        // enables scrolling in apps hosted in the alt buffer such as vim or tmux.\n        const amount = this.viewport!.getLinesScrolled(ev);\n\n        // Do nothing if there's no vertical scroll\n        if (amount === 0) {\n          return;\n        }\n\n        // Construct and send sequences\n        const sequence = C0.ESC + (this.coreService.decPrivateModes.applicationCursorKeys ? 'O' : '[') + (ev.deltaY < 0 ? 'A' : 'B');\n        let data = '';\n        for (let i = 0; i < Math.abs(amount); i++) {\n          data += sequence;\n        }\n        this.coreService.triggerDataEvent(data, true);\n        return this.cancel(ev, true);\n      }\n\n      // normal viewport scrolling\n      // conditionally stop event, if the viewport still had rows to scroll within\n      if (this.viewport!.handleWheel(ev)) {\n        return this.cancel(ev);\n      }\n    }, { passive: false }));\n\n    this.register(addDisposableDomListener(el, 'touchstart', (ev: TouchEvent) => {\n      if (this.coreMouseService.areMouseEventsActive) return;\n      this.viewport!.handleTouchStart(ev);\n      return this.cancel(ev);\n    }, { passive: true }));\n\n    this.register(addDisposableDomListener(el, 'touchmove', (ev: TouchEvent) => {\n      if (this.coreMouseService.areMouseEventsActive) return;\n      if (!this.viewport!.handleTouchMove(ev)) {\n        return this.cancel(ev);\n      }\n    }, { passive: false }));\n  }\n\n\n  /**\n   * Tells the renderer to refresh terminal content between two rows (inclusive) at the next\n   * opportunity.\n   * @param start The row to start from (between 0 and this.rows - 1).\n   * @param end The row to end at (between start and this.rows - 1).\n   */\n  public refresh(start: number, end: number): void {\n    this._renderService?.refreshRows(start, end);\n  }\n\n  /**\n   * Change the cursor style for different selection modes\n   */\n  public updateCursorStyle(ev: KeyboardEvent | MouseEvent): void {\n    if (this._selectionService?.shouldColumnSelect(ev)) {\n      this.element!.classList.add('column-select');\n    } else {\n      this.element!.classList.remove('column-select');\n    }\n  }\n\n  /**\n   * Display the cursor element\n   */\n  private _showCursor(): void {\n    if (!this.coreService.isCursorInitialized) {\n      this.coreService.isCursorInitialized = true;\n      this.refresh(this.buffer.y, this.buffer.y);\n    }\n  }\n\n  public scrollLines(disp: number, suppressScrollEvent?: boolean, source = ScrollSource.TERMINAL): void {\n    if (source === ScrollSource.VIEWPORT) {\n      super.scrollLines(disp, suppressScrollEvent, source);\n      this.refresh(0, this.rows - 1);\n    } else {\n      this.viewport?.scrollLines(disp);\n    }\n  }\n\n  public paste(data: string): void {\n    paste(data, this.textarea!, this.coreService, this.optionsService);\n  }\n\n  public attachCustomKeyEventHandler(customKeyEventHandler: CustomKeyEventHandler): void {\n    this._customKeyEventHandler = customKeyEventHandler;\n  }\n\n  public attachCustomWheelEventHandler(customWheelEventHandler: CustomWheelEventHandler): void {\n    this._customWheelEventHandler = customWheelEventHandler;\n  }\n\n  public registerLinkProvider(linkProvider: ILinkProvider): IDisposable {\n    return this._linkProviderService.registerLinkProvider(linkProvider);\n  }\n\n  public registerCharacterJoiner(handler: CharacterJoinerHandler): number {\n    if (!this._characterJoinerService) {\n      throw new Error('Terminal must be opened first');\n    }\n    const joinerId = this._characterJoinerService.register(handler);\n    this.refresh(0, this.rows - 1);\n    return joinerId;\n  }\n\n  public deregisterCharacterJoiner(joinerId: number): void {\n    if (!this._characterJoinerService) {\n      throw new Error('Terminal must be opened first');\n    }\n    if (this._characterJoinerService.deregister(joinerId)) {\n      this.refresh(0, this.rows - 1);\n    }\n  }\n\n  public get markers(): IMarker[] {\n    return this.buffer.markers;\n  }\n\n  public registerMarker(cursorYOffset: number): IMarker {\n    return this.buffer.addMarker(this.buffer.ybase + this.buffer.y + cursorYOffset);\n  }\n\n  public registerDecoration(decorationOptions: IDecorationOptions): IDecoration | undefined {\n    return this._decorationService.registerDecoration(decorationOptions);\n  }\n\n  /**\n   * Gets whether the terminal has an active selection.\n   */\n  public hasSelection(): boolean {\n    return this._selectionService ? this._selectionService.hasSelection : false;\n  }\n\n  /**\n   * Selects text within the terminal.\n   * @param column The column the selection starts at..\n   * @param row The row the selection starts at.\n   * @param length The length of the selection.\n   */\n  public select(column: number, row: number, length: number): void {\n    this._selectionService!.setSelection(column, row, length);\n  }\n\n  /**\n   * Gets the terminal's current selection, this is useful for implementing copy\n   * behavior outside of xterm.js.\n   */\n  public getSelection(): string {\n    return this._selectionService ? this._selectionService.selectionText : '';\n  }\n\n  public getSelectionPosition(): IBufferRange | undefined {\n    if (!this._selectionService || !this._selectionService.hasSelection) {\n      return undefined;\n    }\n\n    return {\n      start: {\n        x: this._selectionService.selectionStart![0],\n        y: this._selectionService.selectionStart![1]\n      },\n      end: {\n        x: this._selectionService.selectionEnd![0],\n        y: this._selectionService.selectionEnd![1]\n      }\n    };\n  }\n\n  /**\n   * Clears the current terminal selection.\n   */\n  public clearSelection(): void {\n    this._selectionService?.clearSelection();\n  }\n\n  /**\n   * Selects all text within the terminal.\n   */\n  public selectAll(): void {\n    this._selectionService?.selectAll();\n  }\n\n  public selectLines(start: number, end: number): void {\n    this._selectionService?.selectLines(start, end);\n  }\n\n  /**\n   * Handle a keydown [KeyboardEvent].\n   *\n   * [KeyboardEvent]: https://developer.mozilla.org/en-US/docs/DOM/KeyboardEvent\n   */\n  protected _keyDown(event: KeyboardEvent): boolean | undefined {\n    this._keyDownHandled = false;\n    this._keyDownSeen = true;\n\n    if (this._customKeyEventHandler && this._customKeyEventHandler(event) === false) {\n      return false;\n    }\n\n    // Ignore composing with Alt key on Mac when macOptionIsMeta is enabled\n    const shouldIgnoreComposition = this.browser.isMac && this.options.macOptionIsMeta && event.altKey;\n\n    if (!shouldIgnoreComposition && !this._compositionHelper!.keydown(event)) {\n      if (this.options.scrollOnUserInput && this.buffer.ybase !== this.buffer.ydisp) {\n        this.scrollToBottom();\n      }\n      return false;\n    }\n\n    if (!shouldIgnoreComposition && (event.key === 'Dead' || event.key === 'AltGraph')) {\n      this._unprocessedDeadKey = true;\n    }\n\n    const result = evaluateKeyboardEvent(event, this.coreService.decPrivateModes.applicationCursorKeys, this.browser.isMac, this.options.macOptionIsMeta);\n\n    this.updateCursorStyle(event);\n\n    if (result.type === KeyboardResultType.PAGE_DOWN || result.type === KeyboardResultType.PAGE_UP) {\n      const scrollCount = this.rows - 1;\n      this.scrollLines(result.type === KeyboardResultType.PAGE_UP ? -scrollCount : scrollCount);\n      return this.cancel(event, true);\n    }\n\n    if (result.type === KeyboardResultType.SELECT_ALL) {\n      this.selectAll();\n    }\n\n    if (this._isThirdLevelShift(this.browser, event)) {\n      return true;\n    }\n\n    if (result.cancel) {\n      // The event is canceled at the end already, is this necessary?\n      this.cancel(event, true);\n    }\n\n    if (!result.key) {\n      return true;\n    }\n\n    // HACK: Process A-Z in the keypress event to fix an issue with macOS IMEs where lower case\n    // letters cannot be input while caps lock is on.\n    if (event.key && !event.ctrlKey && !event.altKey && !event.metaKey && event.key.length === 1) {\n      if (event.key.charCodeAt(0) >= 65 && event.key.charCodeAt(0) <= 90) {\n        return true;\n      }\n    }\n\n    if (this._unprocessedDeadKey) {\n      this._unprocessedDeadKey = false;\n      return true;\n    }\n\n    // If ctrl+c or enter is being sent, clear out the textarea. This is done so that screen readers\n    // will announce deleted characters. This will not work 100% of the time but it should cover\n    // most scenarios.\n    if (result.key === C0.ETX || result.key === C0.CR) {\n      this.textarea!.value = '';\n    }\n\n    this._onKey.fire({ key: result.key, domEvent: event });\n    this._showCursor();\n    this.coreService.triggerDataEvent(result.key, true);\n\n    // Cancel events when not in screen reader mode so events don't get bubbled up and handled by\n    // other listeners. When screen reader mode is enabled, we don't cancel them (unless ctrl or alt\n    // is also depressed) so that the cursor textarea can be updated, which triggers the screen\n    // reader to read it.\n    if (!this.optionsService.rawOptions.screenReaderMode || event.altKey || event.ctrlKey) {\n      return this.cancel(event, true);\n    }\n\n    this._keyDownHandled = true;\n  }\n\n  private _isThirdLevelShift(browser: IBrowser, ev: KeyboardEvent): boolean {\n    const thirdLevelKey =\n      (browser.isMac && !this.options.macOptionIsMeta && ev.altKey && !ev.ctrlKey && !ev.metaKey) ||\n      (browser.isWindows && ev.altKey && ev.ctrlKey && !ev.metaKey) ||\n      (browser.isWindows && ev.getModifierState('AltGraph'));\n\n    if (ev.type === 'keypress') {\n      return thirdLevelKey;\n    }\n\n    // Don't invoke for arrows, pageDown, home, backspace, etc. (on non-keypress events)\n    return thirdLevelKey && (!ev.keyCode || ev.keyCode > 47);\n  }\n\n  protected _keyUp(ev: KeyboardEvent): void {\n    this._keyDownSeen = false;\n\n    if (this._customKeyEventHandler && this._customKeyEventHandler(ev) === false) {\n      return;\n    }\n\n    if (!wasModifierKeyOnlyEvent(ev)) {\n      this.focus();\n    }\n\n    this.updateCursorStyle(ev);\n    this._keyPressHandled = false;\n  }\n\n  /**\n   * Handle a keypress event.\n   * Key Resources:\n   *   - https://developer.mozilla.org/en-US/docs/DOM/KeyboardEvent\n   * @param ev The keypress event to be handled.\n   */\n  protected _keyPress(ev: KeyboardEvent): boolean {\n    let key;\n\n    this._keyPressHandled = false;\n\n    if (this._keyDownHandled) {\n      return false;\n    }\n\n    if (this._customKeyEventHandler && this._customKeyEventHandler(ev) === false) {\n      return false;\n    }\n\n    this.cancel(ev);\n\n    if (ev.charCode) {\n      key = ev.charCode;\n    } else if (ev.which === null || ev.which === undefined) {\n      key = ev.keyCode;\n    } else if (ev.which !== 0 && ev.charCode !== 0) {\n      key = ev.which;\n    } else {\n      return false;\n    }\n\n    if (!key || (\n      (ev.altKey || ev.ctrlKey || ev.metaKey) && !this._isThirdLevelShift(this.browser, ev)\n    )) {\n      return false;\n    }\n\n    key = String.fromCharCode(key);\n\n    this._onKey.fire({ key, domEvent: ev });\n    this._showCursor();\n    this.coreService.triggerDataEvent(key, true);\n\n    this._keyPressHandled = true;\n\n    // The key was handled so clear the dead key state, otherwise certain keystrokes like arrow\n    // keys could be ignored\n    this._unprocessedDeadKey = false;\n\n    return true;\n  }\n\n  /**\n   * Handle an input event.\n   * Key Resources:\n   *   - https://developer.mozilla.org/en-US/docs/Web/API/InputEvent\n   * @param ev The input event to be handled.\n   */\n  protected _inputEvent(ev: InputEvent): boolean {\n    // Only support emoji IMEs when screen reader mode is disabled as the event must bubble up to\n    // support reading out character input which can doubling up input characters\n    // Based on these event traces: https://github.com/xtermjs/xterm.js/issues/3679\n    if (ev.data && ev.inputType === 'insertText' && (!ev.composed || !this._keyDownSeen) && !this.optionsService.rawOptions.screenReaderMode) {\n      if (this._keyPressHandled) {\n        return false;\n      }\n\n      // The key was handled so clear the dead key state, otherwise certain keystrokes like arrow\n      // keys could be ignored\n      this._unprocessedDeadKey = false;\n\n      const text = ev.data;\n      this.coreService.triggerDataEvent(text, true);\n\n      this.cancel(ev);\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Resizes the terminal.\n   *\n   * @param x The number of columns to resize to.\n   * @param y The number of rows to resize to.\n   */\n  public resize(x: number, y: number): void {\n    if (x === this.cols && y === this.rows) {\n      // Check if we still need to measure the char size (fixes #785).\n      if (this._charSizeService && !this._charSizeService.hasValidSize) {\n        this._charSizeService.measure();\n      }\n      return;\n    }\n\n    super.resize(x, y);\n  }\n\n  private _afterResize(x: number, y: number): void {\n    this._charSizeService?.measure();\n\n    // Sync the scroll area to make sure scroll events don't fire and scroll the viewport to an\n    // invalid location\n    this.viewport?.syncScrollArea(true);\n  }\n\n  /**\n   * Clear the entire buffer, making the prompt line the new first line.\n   */\n  public clear(): void {\n    if (this.buffer.ybase === 0 && this.buffer.y === 0) {\n      // Don't clear if it's already clear\n      return;\n    }\n    this.buffer.clearAllMarkers();\n    this.buffer.lines.set(0, this.buffer.lines.get(this.buffer.ybase + this.buffer.y)!);\n    this.buffer.lines.length = 1;\n    this.buffer.ydisp = 0;\n    this.buffer.ybase = 0;\n    this.buffer.y = 0;\n    for (let i = 1; i < this.rows; i++) {\n      this.buffer.lines.push(this.buffer.getBlankLine(DEFAULT_ATTR_DATA));\n    }\n    // IMPORTANT: Fire scroll event before viewport is reset. This ensures embedders get the clear\n    // scroll event and that the viewport's state will be valid for immediate writes.\n    this._onScroll.fire({ position: this.buffer.ydisp, source: ScrollSource.TERMINAL });\n    this.viewport?.reset();\n    this.refresh(0, this.rows - 1);\n  }\n\n  /**\n   * Reset terminal.\n   * Note: Calling this directly from JS is synchronous but does not clear\n   * input buffers and does not reset the parser, thus the terminal will\n   * continue to apply pending input data.\n   * If you need in band reset (synchronous with input data) consider\n   * using DECSTR (soft reset, CSI ! p) or RIS instead (hard reset, ESC c).\n   */\n  public reset(): void {\n    /**\n     * Since _setup handles a full terminal creation, we have to carry forward\n     * a few things that should not reset.\n     */\n    this.options.rows = this.rows;\n    this.options.cols = this.cols;\n    const customKeyEventHandler = this._customKeyEventHandler;\n\n    this._setup();\n    super.reset();\n    this._selectionService?.reset();\n    this._decorationService.reset();\n    this.viewport?.reset();\n\n    // reattach\n    this._customKeyEventHandler = customKeyEventHandler;\n\n    // do a full screen refresh\n    this.refresh(0, this.rows - 1);\n  }\n\n  public clearTextureAtlas(): void {\n    this._renderService?.clearTextureAtlas();\n  }\n\n  private _reportFocus(): void {\n    if (this.element?.classList.contains('focus')) {\n      this.coreService.triggerDataEvent(C0.ESC + '[I');\n    } else {\n      this.coreService.triggerDataEvent(C0.ESC + '[O');\n    }\n  }\n\n  private _reportWindowsOptions(type: WindowsOptionsReportType): void {\n    if (!this._renderService) {\n      return;\n    }\n\n    switch (type) {\n      case WindowsOptionsReportType.GET_WIN_SIZE_PIXELS:\n        const canvasWidth = this._renderService.dimensions.css.canvas.width.toFixed(0);\n        const canvasHeight = this._renderService.dimensions.css.canvas.height.toFixed(0);\n        this.coreService.triggerDataEvent(`${C0.ESC}[4;${canvasHeight};${canvasWidth}t`);\n        break;\n      case WindowsOptionsReportType.GET_CELL_SIZE_PIXELS:\n        const cellWidth = this._renderService.dimensions.css.cell.width.toFixed(0);\n        const cellHeight = this._renderService.dimensions.css.cell.height.toFixed(0);\n        this.coreService.triggerDataEvent(`${C0.ESC}[6;${cellHeight};${cellWidth}t`);\n        break;\n    }\n  }\n\n  // TODO: Remove cancel function and cancelEvents option\n  public cancel(ev: Event, force?: boolean): boolean | undefined {\n    if (!this.options.cancelEvents && !force) {\n      return;\n    }\n    ev.preventDefault();\n    ev.stopPropagation();\n    return false;\n  }\n}\n\n/**\n * Helpers\n */\n\nfunction wasModifierKeyOnlyEvent(ev: KeyboardEvent): boolean {\n  return ev.keyCode === 16 || // Shift\n    ev.keyCode === 17 || // Ctrl\n    ev.keyCode === 18; // Alt\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nconst RENDER_DEBOUNCE_THRESHOLD_MS = 1000; // 1 Second\n\nimport { IRenderDebouncer } from 'browser/Types';\n\n/**\n * Debounces calls to update screen readers to update at most once configurable interval of time.\n */\nexport class TimeBasedDebouncer implements IRenderDebouncer {\n  private _rowStart: number | undefined;\n  private _rowEnd: number | undefined;\n  private _rowCount: number | undefined;\n\n  // The last moment that the Terminal was refreshed at\n  private _lastRefreshMs = 0;\n  // Whether a trailing refresh should be triggered due to a refresh request that was throttled\n  private _additionalRefreshRequested = false;\n\n  private _refreshTimeoutID: number | undefined;\n\n  constructor(\n    private _renderCallback: (start: number, end: number) => void,\n    private readonly _debounceThresholdMS = RENDER_DEBOUNCE_THRESHOLD_MS\n  ) {\n  }\n\n  public dispose(): void {\n    if (this._refreshTimeoutID) {\n      clearTimeout(this._refreshTimeoutID);\n    }\n  }\n\n  public refresh(rowStart: number | undefined, rowEnd: number | undefined, rowCount: number): void {\n    this._rowCount = rowCount;\n    // Get the min/max row start/end for the arg values\n    rowStart = rowStart !== undefined ? rowStart : 0;\n    rowEnd = rowEnd !== undefined ? rowEnd : this._rowCount - 1;\n    // Set the properties to the updated values\n    this._rowStart = this._rowStart !== undefined ? Math.min(this._rowStart, rowStart) : rowStart;\n    this._rowEnd = this._rowEnd !== undefined ? Math.max(this._rowEnd, rowEnd) : rowEnd;\n\n    // Only refresh if the time since last refresh is above a threshold, otherwise wait for\n    // enough time to pass before refreshing again.\n    const refreshRequestTime: number = Date.now();\n    if (refreshRequestTime - this._lastRefreshMs >= this._debounceThresholdMS) {\n      // Enough time has lapsed since the last refresh; refresh immediately\n      this._lastRefreshMs = refreshRequestTime;\n      this._innerRefresh();\n    } else if (!this._additionalRefreshRequested) {\n      // This is the first additional request throttled; set up trailing refresh\n      const elapsed = refreshRequestTime - this._lastRefreshMs;\n      const waitPeriodBeforeTrailingRefresh = this._debounceThresholdMS - elapsed;\n      this._additionalRefreshRequested = true;\n\n      this._refreshTimeoutID = window.setTimeout(() => {\n        this._lastRefreshMs = Date.now();\n        this._innerRefresh();\n        this._additionalRefreshRequested = false;\n        this._refreshTimeoutID = undefined; // No longer need to clear the timeout\n      }, waitPeriodBeforeTrailingRefresh);\n    }\n  }\n\n  private _innerRefresh(): void {\n    // Make sure values are set\n    if (this._rowStart === undefined || this._rowEnd === undefined || this._rowCount === undefined) {\n      return;\n    }\n\n    // Clamp values\n    const start = Math.max(this._rowStart, 0);\n    const end = Math.min(this._rowEnd, this._rowCount - 1);\n\n    // Reset debouncer (this happens before render callback as the render could trigger it again)\n    this._rowStart = undefined;\n    this._rowEnd = undefined;\n\n    // Run render callback\n    this._renderCallback(start, end);\n  }\n}\n\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport { IViewport, ReadonlyColorSet } from 'browser/Types';\nimport { IRenderDimensions } from 'browser/renderer/shared/Types';\nimport { ICharSizeService, ICoreBrowserService, IRenderService, IThemeService } from 'browser/services/Services';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\nimport { IBuffer } from 'common/buffer/Types';\nimport { IBufferService, IOptionsService } from 'common/services/Services';\n\nconst FALLBACK_SCROLL_BAR_WIDTH = 15;\n\ninterface ISmoothScrollState {\n  startTime: number;\n  origin: number;\n  target: number;\n}\n\n/**\n * Represents the viewport of a terminal, the visible area within the larger buffer of output.\n * Logic for the virtual scroll bar is included in this object.\n */\nexport class Viewport extends Disposable implements IViewport {\n  public scrollBarWidth: number = 0;\n  private _currentRowHeight: number = 0;\n  private _currentDeviceCellHeight: number = 0;\n  private _lastRecordedBufferLength: number = 0;\n  private _lastRecordedViewportHeight: number = 0;\n  private _lastRecordedBufferHeight: number = 0;\n  private _lastTouchY: number = 0;\n  private _lastScrollTop: number = 0;\n  private _activeBuffer: IBuffer;\n  private _renderDimensions: IRenderDimensions;\n\n  // Stores a partial line amount when scrolling, this is used to keep track of how much of a line\n  // is scrolled so we can \"scroll\" over partial lines and feel natural on touchpads. This is a\n  // quick fix and could have a more robust solution in place that reset the value when needed.\n  private _wheelPartialScroll: number = 0;\n\n  private _refreshAnimationFrame: number | null = null;\n  private _ignoreNextScrollEvent: boolean = false;\n  private _smoothScrollState: ISmoothScrollState = {\n    startTime: 0,\n    origin: -1,\n    target: -1\n  };\n\n  private readonly _onRequestScrollLines = this.register(new EventEmitter<{ amount: number, suppressScrollEvent: boolean }>());\n  public readonly onRequestScrollLines = this._onRequestScrollLines.event;\n\n  constructor(\n    private readonly _viewportElement: HTMLElement,\n    private readonly _scrollArea: HTMLElement,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @IOptionsService private readonly _optionsService: IOptionsService,\n    @ICharSizeService private readonly _charSizeService: ICharSizeService,\n    @IRenderService private readonly _renderService: IRenderService,\n    @ICoreBrowserService private readonly _coreBrowserService: ICoreBrowserService,\n    @IThemeService themeService: IThemeService\n  ) {\n    super();\n\n    // Measure the width of the scrollbar. If it is 0 we can assume it's an OSX overlay scrollbar.\n    // Unfortunately the overlay scrollbar would be hidden underneath the screen element in that\n    // case, therefore we account for a standard amount to make it visible\n    this.scrollBarWidth = (this._viewportElement.offsetWidth - this._scrollArea.offsetWidth) || FALLBACK_SCROLL_BAR_WIDTH;\n    this.register(addDisposableDomListener(this._viewportElement, 'scroll', this._handleScroll.bind(this)));\n\n    // Track properties used in performance critical code manually to avoid using slow getters\n    this._activeBuffer = this._bufferService.buffer;\n    this.register(this._bufferService.buffers.onBufferActivate(e => this._activeBuffer = e.activeBuffer));\n    this._renderDimensions = this._renderService.dimensions;\n    this.register(this._renderService.onDimensionsChange(e => this._renderDimensions = e));\n\n    this._handleThemeChange(themeService.colors);\n    this.register(themeService.onChangeColors(e => this._handleThemeChange(e)));\n    this.register(this._optionsService.onSpecificOptionChange('scrollback', () => this.syncScrollArea()));\n\n    // Perform this async to ensure the ICharSizeService is ready.\n    setTimeout(() => this.syncScrollArea());\n  }\n\n  private _handleThemeChange(colors: ReadonlyColorSet): void {\n    this._viewportElement.style.backgroundColor = colors.background.css;\n  }\n\n  public reset(): void {\n    this._currentRowHeight = 0;\n    this._currentDeviceCellHeight = 0;\n    this._lastRecordedBufferLength = 0;\n    this._lastRecordedViewportHeight = 0;\n    this._lastRecordedBufferHeight = 0;\n    this._lastTouchY = 0;\n    this._lastScrollTop = 0;\n    // Sync on next animation frame to ensure the new terminal state is used\n    this._coreBrowserService.window.requestAnimationFrame(() => this.syncScrollArea());\n  }\n\n  /**\n   * Refreshes row height, setting line-height, viewport height and scroll area height if\n   * necessary.\n   */\n  private _refresh(immediate: boolean): void {\n    if (immediate) {\n      this._innerRefresh();\n      if (this._refreshAnimationFrame !== null) {\n        this._coreBrowserService.window.cancelAnimationFrame(this._refreshAnimationFrame);\n      }\n      return;\n    }\n    if (this._refreshAnimationFrame === null) {\n      this._refreshAnimationFrame = this._coreBrowserService.window.requestAnimationFrame(() => this._innerRefresh());\n    }\n  }\n\n  private _innerRefresh(): void {\n    if (this._charSizeService.height > 0) {\n      this._currentRowHeight = this._renderDimensions.device.cell.height / this._coreBrowserService.dpr;\n      this._currentDeviceCellHeight = this._renderDimensions.device.cell.height;\n      this._lastRecordedViewportHeight = this._viewportElement.offsetHeight;\n      const newBufferHeight = Math.round(this._currentRowHeight * this._lastRecordedBufferLength) + (this._lastRecordedViewportHeight - this._renderDimensions.css.canvas.height);\n      if (this._lastRecordedBufferHeight !== newBufferHeight) {\n        this._lastRecordedBufferHeight = newBufferHeight;\n        this._scrollArea.style.height = this._lastRecordedBufferHeight + 'px';\n      }\n    }\n\n    // Sync scrollTop\n    const scrollTop = this._bufferService.buffer.ydisp * this._currentRowHeight;\n    if (this._viewportElement.scrollTop !== scrollTop) {\n      // Ignore the next scroll event which will be triggered by setting the scrollTop as we do not\n      // want this event to scroll the terminal\n      this._ignoreNextScrollEvent = true;\n      this._viewportElement.scrollTop = scrollTop;\n    }\n\n    this._refreshAnimationFrame = null;\n  }\n\n  /**\n   * Updates dimensions and synchronizes the scroll area if necessary.\n   */\n  public syncScrollArea(immediate: boolean = false): void {\n    // If buffer height changed\n    if (this._lastRecordedBufferLength !== this._bufferService.buffer.lines.length) {\n      this._lastRecordedBufferLength = this._bufferService.buffer.lines.length;\n      this._refresh(immediate);\n      return;\n    }\n\n    // If viewport height changed\n    if (this._lastRecordedViewportHeight !== this._renderService.dimensions.css.canvas.height) {\n      this._refresh(immediate);\n      return;\n    }\n\n    // If the buffer position doesn't match last scroll top\n    if (this._lastScrollTop !== this._activeBuffer.ydisp * this._currentRowHeight) {\n      this._refresh(immediate);\n      return;\n    }\n\n    // If row height changed\n    if (this._renderDimensions.device.cell.height !== this._currentDeviceCellHeight) {\n      this._refresh(immediate);\n      return;\n    }\n  }\n\n  /**\n   * Handles scroll events on the viewport, calculating the new viewport and requesting the\n   * terminal to scroll to it.\n   * @param ev The scroll event.\n   */\n  private _handleScroll(ev: Event): void {\n    // Record current scroll top position\n    this._lastScrollTop = this._viewportElement.scrollTop;\n\n    // Don't attempt to scroll if the element is not visible, otherwise scrollTop will be corrupt\n    // which causes the terminal to scroll the buffer to the top\n    if (!this._viewportElement.offsetParent) {\n      return;\n    }\n\n    // Ignore the event if it was flagged to ignore (when the source of the event is from Viewport)\n    if (this._ignoreNextScrollEvent) {\n      this._ignoreNextScrollEvent = false;\n      // Still trigger the scroll so lines get refreshed\n      this._onRequestScrollLines.fire({ amount: 0, suppressScrollEvent: true });\n      return;\n    }\n\n    const newRow = Math.round(this._lastScrollTop / this._currentRowHeight);\n    const diff = newRow - this._bufferService.buffer.ydisp;\n    this._onRequestScrollLines.fire({ amount: diff, suppressScrollEvent: true });\n  }\n\n  private _smoothScroll(): void {\n    // Check valid state\n    if (this._isDisposed || this._smoothScrollState.origin === -1 || this._smoothScrollState.target === -1) {\n      return;\n    }\n\n    // Calculate position complete\n    const percent = this._smoothScrollPercent();\n    this._viewportElement.scrollTop = this._smoothScrollState.origin + Math.round(percent * (this._smoothScrollState.target - this._smoothScrollState.origin));\n\n    // Continue or finish smooth scroll\n    if (percent < 1) {\n      this._coreBrowserService.window.requestAnimationFrame(() => this._smoothScroll());\n    } else {\n      this._clearSmoothScrollState();\n    }\n  }\n\n  private _smoothScrollPercent(): number {\n    if (!this._optionsService.rawOptions.smoothScrollDuration || !this._smoothScrollState.startTime) {\n      return 1;\n    }\n    return Math.max(Math.min((Date.now() - this._smoothScrollState.startTime) / this._optionsService.rawOptions.smoothScrollDuration, 1), 0);\n  }\n\n  private _clearSmoothScrollState(): void {\n    this._smoothScrollState.startTime = 0;\n    this._smoothScrollState.origin = -1;\n    this._smoothScrollState.target = -1;\n  }\n\n  /**\n   * Handles bubbling of scroll event in case the viewport has reached top or bottom\n   * @param ev The scroll event.\n   * @param amount The amount scrolled\n   */\n  private _bubbleScroll(ev: Event, amount: number): boolean {\n    const scrollPosFromTop = this._viewportElement.scrollTop + this._lastRecordedViewportHeight;\n    if ((amount < 0 && this._viewportElement.scrollTop !== 0) ||\n      (amount > 0 && scrollPosFromTop < this._lastRecordedBufferHeight)) {\n      if (ev.cancelable) {\n        ev.preventDefault();\n      }\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Handles mouse wheel events by adjusting the viewport's scrollTop and delegating the actual\n   * scrolling to `onScroll`, this event needs to be attached manually by the consumer of\n   * `Viewport`.\n   * @param ev The mouse wheel event.\n   */\n  public handleWheel(ev: WheelEvent): boolean {\n    const amount = this._getPixelsScrolled(ev);\n    if (amount === 0) {\n      return false;\n    }\n    if (!this._optionsService.rawOptions.smoothScrollDuration) {\n      this._viewportElement.scrollTop += amount;\n    } else {\n      this._smoothScrollState.startTime = Date.now();\n      if (this._smoothScrollPercent() < 1) {\n        this._smoothScrollState.origin = this._viewportElement.scrollTop;\n        if (this._smoothScrollState.target === -1) {\n          this._smoothScrollState.target = this._viewportElement.scrollTop + amount;\n        } else {\n          this._smoothScrollState.target += amount;\n        }\n        this._smoothScrollState.target = Math.max(Math.min(this._smoothScrollState.target, this._viewportElement.scrollHeight), 0);\n        this._smoothScroll();\n      } else {\n        this._clearSmoothScrollState();\n      }\n    }\n    return this._bubbleScroll(ev, amount);\n  }\n\n  public scrollLines(disp: number): void {\n    if (disp === 0) {\n      return;\n    }\n    if (!this._optionsService.rawOptions.smoothScrollDuration) {\n      this._onRequestScrollLines.fire({ amount: disp, suppressScrollEvent: false });\n    } else {\n      const amount = disp * this._currentRowHeight;\n      this._smoothScrollState.startTime = Date.now();\n      if (this._smoothScrollPercent() < 1) {\n        this._smoothScrollState.origin = this._viewportElement.scrollTop;\n        this._smoothScrollState.target = this._smoothScrollState.origin + amount;\n        this._smoothScrollState.target = Math.max(Math.min(this._smoothScrollState.target, this._viewportElement.scrollHeight), 0);\n        this._smoothScroll();\n      } else {\n        this._clearSmoothScrollState();\n      }\n    }\n  }\n\n  private _getPixelsScrolled(ev: WheelEvent): number {\n    // Do nothing if it's not a vertical scroll event\n    if (ev.deltaY === 0 || ev.shiftKey) {\n      return 0;\n    }\n\n    // Fallback to WheelEvent.DOM_DELTA_PIXEL\n    let amount = this._applyScrollModifier(ev.deltaY, ev);\n    if (ev.deltaMode === WheelEvent.DOM_DELTA_LINE) {\n      amount *= this._currentRowHeight;\n    } else if (ev.deltaMode === WheelEvent.DOM_DELTA_PAGE) {\n      amount *= this._currentRowHeight * this._bufferService.rows;\n    }\n    return amount;\n  }\n\n\n  public getBufferElements(startLine: number, endLine?: number): { bufferElements: HTMLElement[], cursorElement?: HTMLElement } {\n    let currentLine: string = '';\n    let cursorElement: HTMLElement | undefined;\n    const bufferElements: HTMLElement[] = [];\n    const end = endLine ?? this._bufferService.buffer.lines.length;\n    const lines = this._bufferService.buffer.lines;\n    for (let i = startLine; i < end; i++) {\n      const line = lines.get(i);\n      if (!line) {\n        continue;\n      }\n      const isWrapped = lines.get(i + 1)?.isWrapped;\n      currentLine += line.translateToString(!isWrapped);\n      if (!isWrapped || i === lines.length - 1) {\n        const div = document.createElement('div');\n        div.textContent = currentLine;\n        bufferElements.push(div);\n        if (currentLine.length > 0) {\n          cursorElement = div;\n        }\n        currentLine = '';\n      }\n    }\n    return { bufferElements, cursorElement };\n  }\n\n  /**\n   * Gets the number of pixels scrolled by the mouse event taking into account what type of delta\n   * is being used.\n   * @param ev The mouse wheel event.\n   */\n  public getLinesScrolled(ev: WheelEvent): number {\n    // Do nothing if it's not a vertical scroll event\n    if (ev.deltaY === 0 || ev.shiftKey) {\n      return 0;\n    }\n\n    // Fallback to WheelEvent.DOM_DELTA_LINE\n    let amount = this._applyScrollModifier(ev.deltaY, ev);\n    if (ev.deltaMode === WheelEvent.DOM_DELTA_PIXEL) {\n      amount /= this._currentRowHeight + 0.0; // Prevent integer division\n      this._wheelPartialScroll += amount;\n      amount = Math.floor(Math.abs(this._wheelPartialScroll)) * (this._wheelPartialScroll > 0 ? 1 : -1);\n      this._wheelPartialScroll %= 1;\n    } else if (ev.deltaMode === WheelEvent.DOM_DELTA_PAGE) {\n      amount *= this._bufferService.rows;\n    }\n    return amount;\n  }\n\n  private _applyScrollModifier(amount: number, ev: WheelEvent): number {\n    const modifier = this._optionsService.rawOptions.fastScrollModifier;\n    // Multiply the scroll speed when the modifier is down\n    if ((modifier === 'alt' && ev.altKey) ||\n      (modifier === 'ctrl' && ev.ctrlKey) ||\n      (modifier === 'shift' && ev.shiftKey)) {\n      return amount * this._optionsService.rawOptions.fastScrollSensitivity * this._optionsService.rawOptions.scrollSensitivity;\n    }\n\n    return amount * this._optionsService.rawOptions.scrollSensitivity;\n  }\n\n  /**\n   * Handles the touchstart event, recording the touch occurred.\n   * @param ev The touch event.\n   */\n  public handleTouchStart(ev: TouchEvent): void {\n    this._lastTouchY = ev.touches[0].pageY;\n  }\n\n  /**\n   * Handles the touchmove event, scrolling the viewport if the position shifted.\n   * @param ev The touch event.\n   */\n  public handleTouchMove(ev: TouchEvent): boolean {\n    const deltaY = this._lastTouchY - ev.touches[0].pageY;\n    this._lastTouchY = ev.touches[0].pageY;\n    if (deltaY === 0) {\n      return false;\n    }\n    this._viewportElement.scrollTop += deltaY;\n    return this._bubbleScroll(ev, deltaY);\n  }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ICoreBrowserService, IRenderService } from 'browser/services/Services';\nimport { Disposable, toDisposable } from 'common/Lifecycle';\nimport { IBufferService, IDecorationService, IInternalDecoration } from 'common/services/Services';\n\nexport class BufferDecorationRenderer extends Disposable {\n  private readonly _container: HTMLElement;\n  private readonly _decorationElements: Map<IInternalDecoration, HTMLElement> = new Map();\n\n  private _animationFrame: number | undefined;\n  private _altBufferIsActive: boolean = false;\n  private _dimensionsChanged: boolean = false;\n\n  constructor(\n    private readonly _screenElement: HTMLElement,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @ICoreBrowserService private readonly _coreBrowserService: ICoreBrowserService,\n    @IDecorationService private readonly _decorationService: IDecorationService,\n    @IRenderService private readonly _renderService: IRenderService\n  ) {\n    super();\n\n    this._container = document.createElement('div');\n    this._container.classList.add('xterm-decoration-container');\n    this._screenElement.appendChild(this._container);\n\n    this.register(this._renderService.onRenderedViewportChange(() => this._doRefreshDecorations()));\n    this.register(this._renderService.onDimensionsChange(() => {\n      this._dimensionsChanged = true;\n      this._queueRefresh();\n    }));\n    this.register(this._coreBrowserService.onDprChange(() => this._queueRefresh()));\n    this.register(this._bufferService.buffers.onBufferActivate(() => {\n      this._altBufferIsActive = this._bufferService.buffer === this._bufferService.buffers.alt;\n    }));\n    this.register(this._decorationService.onDecorationRegistered(() => this._queueRefresh()));\n    this.register(this._decorationService.onDecorationRemoved(decoration => this._removeDecoration(decoration)));\n    this.register(toDisposable(() => {\n      this._container.remove();\n      this._decorationElements.clear();\n    }));\n  }\n\n  private _queueRefresh(): void {\n    if (this._animationFrame !== undefined) {\n      return;\n    }\n    this._animationFrame = this._renderService.addRefreshCallback(() => {\n      this._doRefreshDecorations();\n      this._animationFrame = undefined;\n    });\n  }\n\n  private _doRefreshDecorations(): void {\n    for (const decoration of this._decorationService.decorations) {\n      this._renderDecoration(decoration);\n    }\n    this._dimensionsChanged = false;\n  }\n\n  private _renderDecoration(decoration: IInternalDecoration): void {\n    this._refreshStyle(decoration);\n    if (this._dimensionsChanged) {\n      this._refreshXPosition(decoration);\n    }\n  }\n\n  private _createElement(decoration: IInternalDecoration): HTMLElement {\n    const element = this._coreBrowserService.mainDocument.createElement('div');\n    element.classList.add('xterm-decoration');\n    element.classList.toggle('xterm-decoration-top-layer', decoration?.options?.layer === 'top');\n    element.style.width = `${Math.round((decoration.options.width || 1) * this._renderService.dimensions.css.cell.width)}px`;\n    element.style.height = `${(decoration.options.height || 1) * this._renderService.dimensions.css.cell.height}px`;\n    element.style.top = `${(decoration.marker.line - this._bufferService.buffers.active.ydisp) * this._renderService.dimensions.css.cell.height}px`;\n    element.style.lineHeight = `${this._renderService.dimensions.css.cell.height}px`;\n\n    const x = decoration.options.x ?? 0;\n    if (x && x > this._bufferService.cols) {\n      // exceeded the container width, so hide\n      element.style.display = 'none';\n    }\n    this._refreshXPosition(decoration, element);\n\n    return element;\n  }\n\n  private _refreshStyle(decoration: IInternalDecoration): void {\n    const line = decoration.marker.line - this._bufferService.buffers.active.ydisp;\n    if (line < 0 || line >= this._bufferService.rows) {\n      // outside of viewport\n      if (decoration.element) {\n        decoration.element.style.display = 'none';\n        decoration.onRenderEmitter.fire(decoration.element);\n      }\n    } else {\n      let element = this._decorationElements.get(decoration);\n      if (!element) {\n        element = this._createElement(decoration);\n        decoration.element = element;\n        this._decorationElements.set(decoration, element);\n        this._container.appendChild(element);\n        decoration.onDispose(() => {\n          this._decorationElements.delete(decoration);\n          element!.remove();\n        });\n      }\n      element.style.top = `${line * this._renderService.dimensions.css.cell.height}px`;\n      element.style.display = this._altBufferIsActive ? 'none' : 'block';\n      decoration.onRenderEmitter.fire(element);\n    }\n  }\n\n  private _refreshXPosition(decoration: IInternalDecoration, element: HTMLElement | undefined = decoration.element): void {\n    if (!element) {\n      return;\n    }\n    const x = decoration.options.x ?? 0;\n    if ((decoration.options.anchor || 'left') === 'right') {\n      element.style.right = x ? `${x * this._renderService.dimensions.css.cell.width}px` : '';\n    } else {\n      element.style.left = x ? `${x * this._renderService.dimensions.css.cell.width}px` : '';\n    }\n  }\n\n  private _removeDecoration(decoration: IInternalDecoration): void {\n    this._decorationElements.get(decoration)?.remove();\n    this._decorationElements.delete(decoration);\n    decoration.dispose();\n  }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IInternalDecoration } from 'common/services/Services';\n\nexport interface IColorZoneStore {\n  readonly zones: IColorZone[];\n  clear(): void;\n  addDecoration(decoration: IInternalDecoration): void;\n  /**\n   * Sets the amount of padding in lines that will be added between zones, if new lines intersect\n   * the padding they will be merged into the same zone.\n   */\n  setPadding(padding: { [position: string]: number }): void;\n}\n\nexport interface IColorZone {\n  /** Color in a format supported by canvas' fillStyle. */\n  color: string;\n  position: 'full' | 'left' | 'center' | 'right' | undefined;\n  startBufferLine: number;\n  endBufferLine: number;\n}\n\ninterface IMinimalDecorationForColorZone {\n  marker: Pick<IInternalDecoration['marker'], 'line'>;\n  options: Pick<IInternalDecoration['options'], 'overviewRulerOptions'>;\n}\n\nexport class ColorZoneStore implements IColorZoneStore {\n  private _zones: IColorZone[] = [];\n\n  // The zone pool is used to keep zone objects from being freed between clearing the color zone\n  // store and fetching the zones. This helps reduce GC pressure since the color zones are\n  // accumulated on potentially every scroll event.\n  private _zonePool: IColorZone[] = [];\n  private _zonePoolIndex = 0;\n\n  private _linePadding: { [position: string]: number } = {\n    full: 0,\n    left: 0,\n    center: 0,\n    right: 0\n  };\n\n  public get zones(): IColorZone[] {\n    // Trim the zone pool to free unused memory\n    this._zonePool.length = Math.min(this._zonePool.length, this._zones.length);\n    return this._zones;\n  }\n\n  public clear(): void {\n    this._zones.length = 0;\n    this._zonePoolIndex = 0;\n  }\n\n  public addDecoration(decoration: IMinimalDecorationForColorZone): void {\n    if (!decoration.options.overviewRulerOptions) {\n      return;\n    }\n    for (const z of this._zones) {\n      if (z.color === decoration.options.overviewRulerOptions.color &&\n          z.position === decoration.options.overviewRulerOptions.position) {\n        if (this._lineIntersectsZone(z, decoration.marker.line)) {\n          return;\n        }\n        if (this._lineAdjacentToZone(z, decoration.marker.line, decoration.options.overviewRulerOptions.position)) {\n          this._addLineToZone(z, decoration.marker.line);\n          return;\n        }\n      }\n    }\n    // Create using zone pool if possible\n    if (this._zonePoolIndex < this._zonePool.length) {\n      this._zonePool[this._zonePoolIndex].color = decoration.options.overviewRulerOptions.color;\n      this._zonePool[this._zonePoolIndex].position = decoration.options.overviewRulerOptions.position;\n      this._zonePool[this._zonePoolIndex].startBufferLine = decoration.marker.line;\n      this._zonePool[this._zonePoolIndex].endBufferLine = decoration.marker.line;\n      this._zones.push(this._zonePool[this._zonePoolIndex++]);\n      return;\n    }\n    // Create\n    this._zones.push({\n      color: decoration.options.overviewRulerOptions.color,\n      position: decoration.options.overviewRulerOptions.position,\n      startBufferLine: decoration.marker.line,\n      endBufferLine: decoration.marker.line\n    });\n    this._zonePool.push(this._zones[this._zones.length - 1]);\n    this._zonePoolIndex++;\n  }\n\n  public setPadding(padding: { [position: string]: number }): void {\n    this._linePadding = padding;\n  }\n\n  private _lineIntersectsZone(zone: IColorZone, line: number): boolean {\n    return (\n      line >= zone.startBufferLine &&\n      line <= zone.endBufferLine\n    );\n  }\n\n  private _lineAdjacentToZone(zone: IColorZone, line: number, position: IColorZone['position']): boolean {\n    return (\n      (line >= zone.startBufferLine - this._linePadding[position || 'full']) &&\n      (line <= zone.endBufferLine + this._linePadding[position || 'full'])\n    );\n  }\n\n  private _addLineToZone(zone: IColorZone, line: number): void {\n    zone.startBufferLine = Math.min(zone.startBufferLine, line);\n    zone.endBufferLine = Math.max(zone.endBufferLine, line);\n  }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ColorZoneStore, IColorZone, IColorZoneStore } from 'browser/decorations/ColorZoneStore';\nimport { ICoreBrowserService, IRenderService } from 'browser/services/Services';\nimport { Disposable, toDisposable } from 'common/Lifecycle';\nimport { IBufferService, IDecorationService, IOptionsService } from 'common/services/Services';\n\n// Helper objects to avoid excessive calculation and garbage collection during rendering. These are\n// static values for each render and can be accessed using the decoration position as the key.\nconst drawHeight = {\n  full: 0,\n  left: 0,\n  center: 0,\n  right: 0\n};\nconst drawWidth = {\n  full: 0,\n  left: 0,\n  center: 0,\n  right: 0\n};\nconst drawX = {\n  full: 0,\n  left: 0,\n  center: 0,\n  right: 0\n};\n\nexport class OverviewRulerRenderer extends Disposable {\n  private readonly _canvas: HTMLCanvasElement;\n  private readonly _ctx: CanvasRenderingContext2D;\n  private readonly _colorZoneStore: IColorZoneStore = new ColorZoneStore();\n  private get _width(): number {\n    return this._optionsService.options.overviewRulerWidth || 0;\n  }\n  private _animationFrame: number | undefined;\n\n  private _shouldUpdateDimensions: boolean | undefined = true;\n  private _shouldUpdateAnchor: boolean | undefined = true;\n  private _lastKnownBufferLength: number = 0;\n\n  private _containerHeight: number | undefined;\n\n  constructor(\n    private readonly _viewportElement: HTMLElement,\n    private readonly _screenElement: HTMLElement,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @IDecorationService private readonly _decorationService: IDecorationService,\n    @IRenderService private readonly _renderService: IRenderService,\n    @IOptionsService private readonly _optionsService: IOptionsService,\n    @ICoreBrowserService private readonly _coreBrowserService: ICoreBrowserService\n  ) {\n    super();\n    this._canvas = this._coreBrowserService.mainDocument.createElement('canvas');\n    this._canvas.classList.add('xterm-decoration-overview-ruler');\n    this._refreshCanvasDimensions();\n    this._viewportElement.parentElement?.insertBefore(this._canvas, this._viewportElement);\n    const ctx = this._canvas.getContext('2d');\n    if (!ctx) {\n      throw new Error('Ctx cannot be null');\n    } else {\n      this._ctx = ctx;\n    }\n    this._registerDecorationListeners();\n    this._registerBufferChangeListeners();\n    this._registerDimensionChangeListeners();\n    this.register(toDisposable(() => {\n      this._canvas?.remove();\n    }));\n  }\n\n  /**\n   * On decoration add or remove, redraw\n   */\n  private _registerDecorationListeners(): void {\n    this.register(this._decorationService.onDecorationRegistered(() => this._queueRefresh(undefined, true)));\n    this.register(this._decorationService.onDecorationRemoved(() => this._queueRefresh(undefined, true)));\n  }\n\n  /**\n   * On buffer change, redraw\n   * and hide the canvas if the alt buffer is active\n   */\n  private _registerBufferChangeListeners(): void {\n    this.register(this._renderService.onRenderedViewportChange(() => this._queueRefresh()));\n    this.register(this._bufferService.buffers.onBufferActivate(() => {\n      this._canvas!.style.display = this._bufferService.buffer === this._bufferService.buffers.alt ? 'none' : 'block';\n    }));\n    this.register(this._bufferService.onScroll(() => {\n      if (this._lastKnownBufferLength !== this._bufferService.buffers.normal.lines.length) {\n        this._refreshDrawHeightConstants();\n        this._refreshColorZonePadding();\n      }\n    }));\n  }\n  /**\n   * On dimension change, update canvas dimensions\n   * and then redraw\n   */\n  private _registerDimensionChangeListeners(): void {\n    // container height changed\n    this.register(this._renderService.onRender((): void => {\n      if (!this._containerHeight || this._containerHeight !== this._screenElement.clientHeight) {\n        this._queueRefresh(true);\n        this._containerHeight = this._screenElement.clientHeight;\n      }\n    }));\n    // overview ruler width changed\n    this.register(this._optionsService.onSpecificOptionChange('overviewRulerWidth', () => this._queueRefresh(true)));\n    // device pixel ratio changed\n    this.register(this._coreBrowserService.onDprChange(() => this._queueRefresh(true)));\n    // set the canvas dimensions\n    this._queueRefresh(true);\n  }\n\n  private _refreshDrawConstants(): void {\n    // width\n    const outerWidth = Math.floor(this._canvas.width / 3);\n    const innerWidth = Math.ceil(this._canvas.width / 3);\n    drawWidth.full = this._canvas.width;\n    drawWidth.left = outerWidth;\n    drawWidth.center = innerWidth;\n    drawWidth.right = outerWidth;\n    // height\n    this._refreshDrawHeightConstants();\n    // x\n    drawX.full = 0;\n    drawX.left = 0;\n    drawX.center = drawWidth.left;\n    drawX.right = drawWidth.left + drawWidth.center;\n  }\n\n  private _refreshDrawHeightConstants(): void {\n    drawHeight.full = Math.round(2 * this._coreBrowserService.dpr);\n    // Calculate actual pixels per line\n    const pixelsPerLine = this._canvas.height / this._bufferService.buffer.lines.length;\n    // Clamp actual pixels within a range\n    const nonFullHeight = Math.round(Math.max(Math.min(pixelsPerLine, 12), 6) * this._coreBrowserService.dpr);\n    drawHeight.left = nonFullHeight;\n    drawHeight.center = nonFullHeight;\n    drawHeight.right = nonFullHeight;\n  }\n\n  private _refreshColorZonePadding(): void {\n    this._colorZoneStore.setPadding({\n      full: Math.floor(this._bufferService.buffers.active.lines.length / (this._canvas.height - 1) * drawHeight.full),\n      left: Math.floor(this._bufferService.buffers.active.lines.length / (this._canvas.height - 1) * drawHeight.left),\n      center: Math.floor(this._bufferService.buffers.active.lines.length / (this._canvas.height - 1) * drawHeight.center),\n      right: Math.floor(this._bufferService.buffers.active.lines.length / (this._canvas.height - 1) * drawHeight.right)\n    });\n    this._lastKnownBufferLength = this._bufferService.buffers.normal.lines.length;\n  }\n\n  private _refreshCanvasDimensions(): void {\n    this._canvas.style.width = `${this._width}px`;\n    this._canvas.width = Math.round(this._width * this._coreBrowserService.dpr);\n    this._canvas.style.height = `${this._screenElement.clientHeight}px`;\n    this._canvas.height = Math.round(this._screenElement.clientHeight * this._coreBrowserService.dpr);\n    this._refreshDrawConstants();\n    this._refreshColorZonePadding();\n  }\n\n  private _refreshDecorations(): void {\n    if (this._shouldUpdateDimensions) {\n      this._refreshCanvasDimensions();\n    }\n    this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\n    this._colorZoneStore.clear();\n    for (const decoration of this._decorationService.decorations) {\n      this._colorZoneStore.addDecoration(decoration);\n    }\n    this._ctx.lineWidth = 1;\n    const zones = this._colorZoneStore.zones;\n    for (const zone of zones) {\n      if (zone.position !== 'full') {\n        this._renderColorZone(zone);\n      }\n    }\n    for (const zone of zones) {\n      if (zone.position === 'full') {\n        this._renderColorZone(zone);\n      }\n    }\n    this._shouldUpdateDimensions = false;\n    this._shouldUpdateAnchor = false;\n  }\n\n  private _renderColorZone(zone: IColorZone): void {\n    this._ctx.fillStyle = zone.color;\n    this._ctx.fillRect(\n      /* x */ drawX[zone.position || 'full'],\n      /* y */ Math.round(\n        (this._canvas.height - 1) * // -1 to ensure at least 2px are allowed for decoration on last line\n        (zone.startBufferLine / this._bufferService.buffers.active.lines.length) - drawHeight[zone.position || 'full'] / 2\n      ),\n      /* w */ drawWidth[zone.position || 'full'],\n      /* h */ Math.round(\n        (this._canvas.height - 1) * // -1 to ensure at least 2px are allowed for decoration on last line\n        ((zone.endBufferLine - zone.startBufferLine) / this._bufferService.buffers.active.lines.length) + drawHeight[zone.position || 'full']\n      )\n    );\n  }\n\n  private _queueRefresh(updateCanvasDimensions?: boolean, updateAnchor?: boolean): void {\n    this._shouldUpdateDimensions = updateCanvasDimensions || this._shouldUpdateDimensions;\n    this._shouldUpdateAnchor = updateAnchor || this._shouldUpdateAnchor;\n    if (this._animationFrame !== undefined) {\n      return;\n    }\n    this._animationFrame = this._coreBrowserService.window.requestAnimationFrame(() => {\n      this._refreshDecorations();\n      this._animationFrame = undefined;\n    });\n  }\n}\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderService } from 'browser/services/Services';\nimport { IBufferService, ICoreService, IOptionsService } from 'common/services/Services';\nimport { C0 } from 'common/data/EscapeSequences';\n\ninterface IPosition {\n  start: number;\n  end: number;\n}\n\n/**\n * Encapsulates the logic for handling compositionstart, compositionupdate and compositionend\n * events, displaying the in-progress composition to the UI and forwarding the final composition\n * to the handler.\n */\nexport class CompositionHelper {\n  /**\n   * Whether input composition is currently happening, eg. via a mobile keyboard, speech input or\n   * IME. This variable determines whether the compositionText should be displayed on the UI.\n   */\n  private _isComposing: boolean;\n  public get isComposing(): boolean { return this._isComposing; }\n\n  /**\n   * The position within the input textarea's value of the current composition.\n   */\n  private _compositionPosition: IPosition;\n\n  /**\n   * Whether a composition is in the process of being sent, setting this to false will cancel any\n   * in-progress composition.\n   */\n  private _isSendingComposition: boolean;\n\n  /**\n   * Data already sent due to keydown event.\n   */\n  private _dataAlreadySent: string;\n\n  constructor(\n    private readonly _textarea: HTMLTextAreaElement,\n    private readonly _compositionView: HTMLElement,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @IOptionsService private readonly _optionsService: IOptionsService,\n    @ICoreService private readonly _coreService: ICoreService,\n    @IRenderService private readonly _renderService: IRenderService\n  ) {\n    this._isComposing = false;\n    this._isSendingComposition = false;\n    this._compositionPosition = { start: 0, end: 0 };\n    this._dataAlreadySent = '';\n  }\n\n  /**\n   * Handles the compositionstart event, activating the composition view.\n   */\n  public compositionstart(): void {\n    this._isComposing = true;\n    this._compositionPosition.start = this._textarea.value.length;\n    this._compositionView.textContent = '';\n    this._dataAlreadySent = '';\n    this._compositionView.classList.add('active');\n  }\n\n  /**\n   * Handles the compositionupdate event, updating the composition view.\n   * @param ev The event.\n   */\n  public compositionupdate(ev: Pick<CompositionEvent, 'data'>): void {\n    this._compositionView.textContent = ev.data;\n    this.updateCompositionElements();\n    setTimeout(() => {\n      this._compositionPosition.end = this._textarea.value.length;\n    }, 0);\n  }\n\n  /**\n   * Handles the compositionend event, hiding the composition view and sending the composition to\n   * the handler.\n   */\n  public compositionend(): void {\n    this._finalizeComposition(true);\n  }\n\n  /**\n   * Handles the keydown event, routing any necessary events to the CompositionHelper functions.\n   * @param ev The keydown event.\n   * @returns Whether the Terminal should continue processing the keydown event.\n   */\n  public keydown(ev: KeyboardEvent): boolean {\n    if (this._isComposing || this._isSendingComposition) {\n      if (ev.keyCode === 229) {\n        // Continue composing if the keyCode is the \"composition character\"\n        return false;\n      }\n      if (ev.keyCode === 16 || ev.keyCode === 17 || ev.keyCode === 18) {\n        // Continue composing if the keyCode is a modifier key\n        return false;\n      }\n      // Finish composition immediately. This is mainly here for the case where enter is\n      // pressed and the handler needs to be triggered before the command is executed.\n      this._finalizeComposition(false);\n    }\n\n    if (ev.keyCode === 229) {\n      // If the \"composition character\" is used but gets to this point it means a non-composition\n      // character (eg. numbers and punctuation) was pressed when the IME was active.\n      this._handleAnyTextareaChanges();\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Finalizes the composition, resuming regular input actions. This is called when a composition\n   * is ending.\n   * @param waitForPropagation Whether to wait for events to propagate before sending\n   *   the input. This should be false if a non-composition keystroke is entered before the\n   *   compositionend event is triggered, such as enter, so that the composition is sent before\n   *   the command is executed.\n   */\n  private _finalizeComposition(waitForPropagation: boolean): void {\n    this._compositionView.classList.remove('active');\n    this._isComposing = false;\n\n    if (!waitForPropagation) {\n      // Cancel any delayed composition send requests and send the input immediately.\n      this._isSendingComposition = false;\n      const input = this._textarea.value.substring(this._compositionPosition.start, this._compositionPosition.end);\n      this._coreService.triggerDataEvent(input, true);\n    } else {\n      // Make a deep copy of the composition position here as a new compositionstart event may\n      // fire before the setTimeout executes.\n      const currentCompositionPosition = {\n        start: this._compositionPosition.start,\n        end: this._compositionPosition.end\n      };\n\n      // Since composition* events happen before the changes take place in the textarea on most\n      // browsers, use a setTimeout with 0ms time to allow the native compositionend event to\n      // complete. This ensures the correct character is retrieved.\n      // This solution was used because:\n      // - The compositionend event's data property is unreliable, at least on Chromium\n      // - The last compositionupdate event's data property does not always accurately describe\n      //   the character, a counter example being Korean where an ending consonsant can move to\n      //   the following character if the following input is a vowel.\n      this._isSendingComposition = true;\n      setTimeout(() => {\n        // Ensure that the input has not already been sent\n        if (this._isSendingComposition) {\n          this._isSendingComposition = false;\n          let input;\n          // Add length of data already sent due to keydown event,\n          // otherwise input characters can be duplicated. (Issue #3191)\n          currentCompositionPosition.start += this._dataAlreadySent.length;\n          if (this._isComposing) {\n            // Use the end position to get the string if a new composition has started.\n            input = this._textarea.value.substring(currentCompositionPosition.start, currentCompositionPosition.end);\n          } else {\n            // Don't use the end position here in order to pick up any characters after the\n            // composition has finished, for example when typing a non-composition character\n            // (eg. 2) after a composition character.\n            input = this._textarea.value.substring(currentCompositionPosition.start);\n          }\n          if (input.length > 0) {\n            this._coreService.triggerDataEvent(input, true);\n          }\n        }\n      }, 0);\n    }\n  }\n\n  /**\n   * Apply any changes made to the textarea after the current event chain is allowed to complete.\n   * This should be called when not currently composing but a keydown event with the \"composition\n   * character\" (229) is triggered, in order to allow non-composition text to be entered when an\n   * IME is active.\n   */\n  private _handleAnyTextareaChanges(): void {\n    const oldValue = this._textarea.value;\n    setTimeout(() => {\n      // Ignore if a composition has started since the timeout\n      if (!this._isComposing) {\n        const newValue = this._textarea.value;\n\n        const diff = newValue.replace(oldValue, '');\n\n        this._dataAlreadySent = diff;\n\n        if (newValue.length > oldValue.length) {\n          this._coreService.triggerDataEvent(diff, true);\n        } else if (newValue.length < oldValue.length) {\n          this._coreService.triggerDataEvent(`${C0.DEL}`, true);\n        } else if ((newValue.length === oldValue.length) && (newValue !== oldValue)) {\n          this._coreService.triggerDataEvent(newValue, true);\n        }\n\n      }\n    }, 0);\n  }\n\n  /**\n   * Positions the composition view on top of the cursor and the textarea just below it (so the\n   * IME helper dialog is positioned correctly).\n   * @param dontRecurse Whether to use setTimeout to recursively trigger another update, this is\n   *   necessary as the IME events across browsers are not consistently triggered.\n   */\n  public updateCompositionElements(dontRecurse?: boolean): void {\n    if (!this._isComposing) {\n      return;\n    }\n\n    if (this._bufferService.buffer.isCursorInViewport) {\n      const cursorX = Math.min(this._bufferService.buffer.x, this._bufferService.cols - 1);\n\n      const cellHeight = this._renderService.dimensions.css.cell.height;\n      const cursorTop = this._bufferService.buffer.y * this._renderService.dimensions.css.cell.height;\n      const cursorLeft = cursorX * this._renderService.dimensions.css.cell.width;\n\n      this._compositionView.style.left = cursorLeft + 'px';\n      this._compositionView.style.top = cursorTop + 'px';\n      this._compositionView.style.height = cellHeight + 'px';\n      this._compositionView.style.lineHeight = cellHeight + 'px';\n      this._compositionView.style.fontFamily = this._optionsService.rawOptions.fontFamily;\n      this._compositionView.style.fontSize = this._optionsService.rawOptions.fontSize + 'px';\n      // Sync the textarea to the exact position of the composition view so the IME knows where the\n      // text is.\n      const compositionViewBounds = this._compositionView.getBoundingClientRect();\n      this._textarea.style.left = cursorLeft + 'px';\n      this._textarea.style.top = cursorTop + 'px';\n      // Ensure the text area is at least 1x1, otherwise certain IMEs may break\n      this._textarea.style.width = Math.max(compositionViewBounds.width, 1) + 'px';\n      this._textarea.style.height = Math.max(compositionViewBounds.height, 1) + 'px';\n      this._textarea.style.lineHeight = compositionViewBounds.height + 'px';\n    }\n\n    if (!dontRecurse) {\n      setTimeout(() => this.updateCompositionElements(true), 0);\n    }\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport function getCoordsRelativeToElement(window: Pick<Window, 'getComputedStyle'>, event: {clientX: number, clientY: number}, element: HTMLElement): [number, number] {\n  const rect = element.getBoundingClientRect();\n  const elementStyle = window.getComputedStyle(element);\n  const leftPadding = parseInt(elementStyle.getPropertyValue('padding-left'));\n  const topPadding = parseInt(elementStyle.getPropertyValue('padding-top'));\n  return [\n    event.clientX - rect.left - leftPadding,\n    event.clientY - rect.top - topPadding\n  ];\n}\n\n/**\n * Gets coordinates within the terminal for a particular mouse event. The result\n * is returned as an array in the form [x, y] instead of an object as it's a\n * little faster and this function is used in some low level code.\n * @param window The window object the element belongs to.\n * @param event The mouse event.\n * @param element The terminal's container element.\n * @param colCount The number of columns in the terminal.\n * @param rowCount The number of rows n the terminal.\n * @param hasValidCharSize Whether there is a valid character size available.\n * @param cssCellWidth The cell width device pixel render dimensions.\n * @param cssCellHeight The cell height device pixel render dimensions.\n * @param isSelection Whether the request is for the selection or not. This will\n * apply an offset to the x value such that the left half of the cell will\n * select that cell and the right half will select the next cell.\n */\nexport function getCoords(window: Pick<Window, 'getComputedStyle'>, event: Pick<MouseEvent, 'clientX' | 'clientY'>, element: HTMLElement, colCount: number, rowCount: number, hasValidCharSize: boolean, cssCellWidth: number, cssCellHeight: number, isSelection?: boolean): [number, number] | undefined {\n  // Coordinates cannot be measured if there are no valid\n  if (!hasValidCharSize) {\n    return undefined;\n  }\n\n  const coords = getCoordsRelativeToElement(window, event, element);\n  if (!coords) {\n    return undefined;\n  }\n\n  coords[0] = Math.ceil((coords[0] + (isSelection ? cssCellWidth / 2 : 0)) / cssCellWidth);\n  coords[1] = Math.ceil(coords[1] / cssCellHeight);\n\n  // Ensure coordinates are within the terminal viewport. Note that selections\n  // need an addition point of precision to cover the end point (as characters\n  // cover half of one char and half of the next).\n  coords[0] = Math.min(Math.max(coords[0], 1), colCount + (isSelection ? 1 : 0));\n  coords[1] = Math.min(Math.max(coords[1], 1), rowCount);\n\n  return coords;\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { C0 } from 'common/data/EscapeSequences';\nimport { IBufferService } from 'common/services/Services';\n\nconst enum Direction {\n  UP = 'A',\n  DOWN = 'B',\n  RIGHT = 'C',\n  LEFT = 'D'\n}\n\n/**\n * Concatenates all the arrow sequences together.\n * Resets the starting row to an unwrapped row, moves to the requested row,\n * then moves to requested col.\n */\nexport function moveToCellSequence(targetX: number, targetY: number, bufferService: IBufferService, applicationCursor: boolean): string {\n  const startX = bufferService.buffer.x;\n  const startY = bufferService.buffer.y;\n\n  // The alt buffer should try to navigate between rows\n  if (!bufferService.buffer.hasScrollback) {\n    return resetStartingRow(startX, startY, targetX, targetY, bufferService, applicationCursor) +\n      moveToRequestedRow(startY, targetY, bufferService, applicationCursor) +\n      moveToRequestedCol(startX, startY, targetX, targetY, bufferService, applicationCursor);\n  }\n\n  // Only move horizontally for the normal buffer\n  let direction;\n  if (startY === targetY) {\n    direction = startX > targetX ? Direction.LEFT : Direction.RIGHT;\n    return repeat(Math.abs(startX - targetX), sequence(direction, applicationCursor));\n  }\n  direction = startY > targetY ? Direction.LEFT : Direction.RIGHT;\n  const rowDifference = Math.abs(startY - targetY);\n  const cellsToMove = colsFromRowEnd(startY > targetY ? targetX : startX, bufferService) +\n    (rowDifference - 1) * bufferService.cols + 1 /* wrap around 1 row */ +\n    colsFromRowBeginning(startY > targetY ? startX : targetX, bufferService);\n  return repeat(cellsToMove, sequence(direction, applicationCursor));\n}\n\n/**\n * Find the number of cols from a row beginning to a col.\n */\nfunction colsFromRowBeginning(currX: number, bufferService: IBufferService): number {\n  return currX - 1;\n}\n\n/**\n * Find the number of cols from a col to row end.\n */\nfunction colsFromRowEnd(currX: number, bufferService: IBufferService): number {\n  return bufferService.cols - currX;\n}\n\n/**\n * If the initial position of the cursor is on a row that is wrapped, move the\n * cursor up to the first row that is not wrapped to have accurate vertical\n * positioning.\n */\nfunction resetStartingRow(startX: number, startY: number, targetX: number, targetY: number, bufferService: IBufferService, applicationCursor: boolean): string {\n  if (moveToRequestedRow(startY, targetY, bufferService, applicationCursor).length === 0) {\n    return '';\n  }\n  return repeat(bufferLine(\n    startX, startY, startX,\n    startY - wrappedRowsForRow(startY, bufferService), false, bufferService\n  ).length, sequence(Direction.LEFT, applicationCursor));\n}\n\n/**\n * Using the reset starting and ending row, move to the requested row,\n * ignoring wrapped rows\n */\nfunction moveToRequestedRow(startY: number, targetY: number, bufferService: IBufferService, applicationCursor: boolean): string {\n  const startRow = startY - wrappedRowsForRow(startY, bufferService);\n  const endRow = targetY - wrappedRowsForRow(targetY, bufferService);\n\n  const rowsToMove = Math.abs(startRow - endRow) - wrappedRowsCount(startY, targetY, bufferService);\n\n  return repeat(rowsToMove, sequence(verticalDirection(startY, targetY), applicationCursor));\n}\n\n/**\n * Move to the requested col on the ending row\n */\nfunction moveToRequestedCol(startX: number, startY: number, targetX: number, targetY: number, bufferService: IBufferService, applicationCursor: boolean): string {\n  let startRow;\n  if (moveToRequestedRow(startY, targetY, bufferService, applicationCursor).length > 0) {\n    startRow = targetY - wrappedRowsForRow(targetY, bufferService);\n  } else {\n    startRow = startY;\n  }\n\n  const endRow = targetY;\n  const direction = horizontalDirection(startX, startY, targetX, targetY, bufferService, applicationCursor);\n\n  return repeat(bufferLine(\n    startX, startRow, targetX, endRow,\n    direction === Direction.RIGHT, bufferService\n  ).length, sequence(direction, applicationCursor));\n}\n\n/**\n * Utility functions\n */\n\n/**\n * Calculates the number of wrapped rows between the unwrapped starting and\n * ending rows. These rows need to ignored since the cursor skips over them.\n */\nfunction wrappedRowsCount(startY: number, targetY: number, bufferService: IBufferService): number {\n  let wrappedRows = 0;\n  const startRow = startY - wrappedRowsForRow(startY, bufferService);\n  const endRow = targetY - wrappedRowsForRow(targetY, bufferService);\n\n  for (let i = 0; i < Math.abs(startRow - endRow); i++) {\n    const direction = verticalDirection(startY, targetY) === Direction.UP ? -1 : 1;\n    const line = bufferService.buffer.lines.get(startRow + (direction * i));\n    if (line?.isWrapped) {\n      wrappedRows++;\n    }\n  }\n\n  return wrappedRows;\n}\n\n/**\n * Calculates the number of wrapped rows that make up a given row.\n * @param currentRow The row to determine how many wrapped rows make it up\n */\nfunction wrappedRowsForRow(currentRow: number, bufferService: IBufferService): number {\n  let rowCount = 0;\n  let line = bufferService.buffer.lines.get(currentRow);\n  let lineWraps = line?.isWrapped;\n\n  while (lineWraps && currentRow >= 0 && currentRow < bufferService.rows) {\n    rowCount++;\n    line = bufferService.buffer.lines.get(--currentRow);\n    lineWraps = line?.isWrapped;\n  }\n\n  return rowCount;\n}\n\n/**\n * Direction determiners\n */\n\n/**\n * Determines if the right or left arrow is needed\n */\nfunction horizontalDirection(startX: number, startY: number, targetX: number, targetY: number, bufferService: IBufferService, applicationCursor: boolean): Direction {\n  let startRow;\n  if (moveToRequestedRow(targetX, targetY, bufferService, applicationCursor).length > 0) {\n    startRow = targetY - wrappedRowsForRow(targetY, bufferService);\n  } else {\n    startRow = startY;\n  }\n\n  if ((startX < targetX &&\n    startRow <= targetY) || // down/right or same y/right\n    (startX >= targetX &&\n    startRow < targetY)) {  // down/left or same y/left\n    return Direction.RIGHT;\n  }\n  return Direction.LEFT;\n}\n\n/**\n * Determines if the up or down arrow is needed\n */\nfunction verticalDirection(startY: number, targetY: number): Direction {\n  return startY > targetY ? Direction.UP : Direction.DOWN;\n}\n\n/**\n * Constructs the string of chars in the buffer from a starting row and col\n * to an ending row and col\n * @param startCol The starting column position\n * @param startRow The starting row position\n * @param endCol The ending column position\n * @param endRow The ending row position\n * @param forward Direction to move\n */\nfunction bufferLine(\n  startCol: number,\n  startRow: number,\n  endCol: number,\n  endRow: number,\n  forward: boolean,\n  bufferService: IBufferService\n): string {\n  let currentCol = startCol;\n  let currentRow = startRow;\n  let bufferStr = '';\n\n  while (currentCol !== endCol || currentRow !== endRow) {\n    currentCol += forward ? 1 : -1;\n\n    if (forward && currentCol > bufferService.cols - 1) {\n      bufferStr += bufferService.buffer.translateBufferLineToString(\n        currentRow, false, startCol, currentCol\n      );\n      currentCol = 0;\n      startCol = 0;\n      currentRow++;\n    } else if (!forward && currentCol < 0) {\n      bufferStr += bufferService.buffer.translateBufferLineToString(\n        currentRow, false, 0, startCol + 1\n      );\n      currentCol = bufferService.cols - 1;\n      startCol = currentCol;\n      currentRow--;\n    }\n  }\n\n  return bufferStr + bufferService.buffer.translateBufferLineToString(\n    currentRow, false, startCol, currentCol\n  );\n}\n\n/**\n * Constructs the escape sequence for clicking an arrow\n * @param direction The direction to move\n */\nfunction sequence(direction: Direction, applicationCursor: boolean): string {\n  const mod =  applicationCursor ? 'O' : '[';\n  return C0.ESC + mod + direction;\n}\n\n/**\n * Returns a string repeated a given number of times\n * Polyfill from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat\n * @param count The number of times to repeat the string\n * @param str The string that is to be repeated\n */\nfunction repeat(count: number, str: string): string {\n  count = Math.floor(count);\n  let rpt = '';\n  for (let i = 0; i < count; i++) {\n    rpt += str;\n  }\n  return rpt;\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { DomRendererRowFactory, RowCss } from 'browser/renderer/dom/DomRendererRowFactory';\nimport { WidthCache } from 'browser/renderer/dom/WidthCache';\nimport { INVERTED_DEFAULT_COLOR } from 'browser/renderer/shared/Constants';\nimport { createRenderDimensions } from 'browser/renderer/shared/RendererUtils';\nimport { createSelectionRenderModel } from 'browser/renderer/shared/SelectionRenderModel';\nimport { IRenderDimensions, IRenderer, IRequestRedrawEvent, ISelectionRenderModel } from 'browser/renderer/shared/Types';\nimport { ICharSizeService, ICoreBrowserService, IThemeService } from 'browser/services/Services';\nimport { ILinkifier2, ILinkifierEvent, ITerminal, ReadonlyColorSet } from 'browser/Types';\nimport { color } from 'common/Color';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { Disposable, toDisposable } from 'common/Lifecycle';\nimport { IBufferService, IInstantiationService, IOptionsService } from 'common/services/Services';\n\n\nconst TERMINAL_CLASS_PREFIX = 'xterm-dom-renderer-owner-';\nconst ROW_CONTAINER_CLASS = 'xterm-rows';\nconst FG_CLASS_PREFIX = 'xterm-fg-';\nconst BG_CLASS_PREFIX = 'xterm-bg-';\nconst FOCUS_CLASS = 'xterm-focus';\nconst SELECTION_CLASS = 'xterm-selection';\n\nlet nextTerminalId = 1;\n\n/**\n * A fallback renderer for when canvas is slow. This is not meant to be\n * particularly fast or feature complete, more just stable and usable for when\n * canvas is not an option.\n */\nexport class DomRenderer extends Disposable implements IRenderer {\n  private _rowFactory: DomRendererRowFactory;\n  private _terminalClass: number = nextTerminalId++;\n\n  private _themeStyleElement!: HTMLStyleElement;\n  private _dimensionsStyleElement!: HTMLStyleElement;\n  private _rowContainer: HTMLElement;\n  private _rowElements: HTMLElement[] = [];\n  private _selectionContainer: HTMLElement;\n  private _widthCache: WidthCache;\n  private _selectionRenderModel: ISelectionRenderModel = createSelectionRenderModel();\n\n  public dimensions: IRenderDimensions;\n\n  public readonly onRequestRedraw = this.register(new EventEmitter<IRequestRedrawEvent>()).event;\n\n  constructor(\n    private readonly _terminal: ITerminal,\n    private readonly _document: Document,\n    private readonly _element: HTMLElement,\n    private readonly _screenElement: HTMLElement,\n    private readonly _viewportElement: HTMLElement,\n    private readonly _helperContainer: HTMLElement,\n    private readonly _linkifier2: ILinkifier2,\n    @IInstantiationService instantiationService: IInstantiationService,\n    @ICharSizeService private readonly _charSizeService: ICharSizeService,\n    @IOptionsService private readonly _optionsService: IOptionsService,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @ICoreBrowserService private readonly _coreBrowserService: ICoreBrowserService,\n    @IThemeService private readonly _themeService: IThemeService\n  ) {\n    super();\n    this._rowContainer = this._document.createElement('div');\n    this._rowContainer.classList.add(ROW_CONTAINER_CLASS);\n    this._rowContainer.style.lineHeight = 'normal';\n    this._rowContainer.setAttribute('aria-hidden', 'true');\n    this._refreshRowElements(this._bufferService.cols, this._bufferService.rows);\n    this._selectionContainer = this._document.createElement('div');\n    this._selectionContainer.classList.add(SELECTION_CLASS);\n    this._selectionContainer.setAttribute('aria-hidden', 'true');\n\n    this.dimensions = createRenderDimensions();\n    this._updateDimensions();\n    this.register(this._optionsService.onOptionChange(() => this._handleOptionsChanged()));\n\n    this.register(this._themeService.onChangeColors(e => this._injectCss(e)));\n    this._injectCss(this._themeService.colors);\n\n    this._rowFactory = instantiationService.createInstance(DomRendererRowFactory, document);\n\n    this._element.classList.add(TERMINAL_CLASS_PREFIX + this._terminalClass);\n    this._screenElement.appendChild(this._rowContainer);\n    this._screenElement.appendChild(this._selectionContainer);\n\n    this.register(this._linkifier2.onShowLinkUnderline(e => this._handleLinkHover(e)));\n    this.register(this._linkifier2.onHideLinkUnderline(e => this._handleLinkLeave(e)));\n\n    this.register(toDisposable(() => {\n      this._element.classList.remove(TERMINAL_CLASS_PREFIX + this._terminalClass);\n\n      // Outside influences such as React unmounts may manipulate the DOM before our disposal.\n      // https://github.com/xtermjs/xterm.js/issues/2960\n      this._rowContainer.remove();\n      this._selectionContainer.remove();\n      this._widthCache.dispose();\n      this._themeStyleElement.remove();\n      this._dimensionsStyleElement.remove();\n    }));\n\n    this._widthCache = new WidthCache(this._document, this._helperContainer);\n    this._widthCache.setFont(\n      this._optionsService.rawOptions.fontFamily,\n      this._optionsService.rawOptions.fontSize,\n      this._optionsService.rawOptions.fontWeight,\n      this._optionsService.rawOptions.fontWeightBold\n    );\n    this._setDefaultSpacing();\n  }\n\n  private _updateDimensions(): void {\n    const dpr = this._coreBrowserService.dpr;\n    this.dimensions.device.char.width = this._charSizeService.width * dpr;\n    this.dimensions.device.char.height = Math.ceil(this._charSizeService.height * dpr);\n    this.dimensions.device.cell.width = this.dimensions.device.char.width + Math.round(this._optionsService.rawOptions.letterSpacing);\n    this.dimensions.device.cell.height = Math.floor(this.dimensions.device.char.height * this._optionsService.rawOptions.lineHeight);\n    this.dimensions.device.char.left = 0;\n    this.dimensions.device.char.top = 0;\n    this.dimensions.device.canvas.width = this.dimensions.device.cell.width * this._bufferService.cols;\n    this.dimensions.device.canvas.height = this.dimensions.device.cell.height * this._bufferService.rows;\n    this.dimensions.css.canvas.width = Math.round(this.dimensions.device.canvas.width / dpr);\n    this.dimensions.css.canvas.height = Math.round(this.dimensions.device.canvas.height / dpr);\n    this.dimensions.css.cell.width = this.dimensions.css.canvas.width / this._bufferService.cols;\n    this.dimensions.css.cell.height = this.dimensions.css.canvas.height / this._bufferService.rows;\n\n    for (const element of this._rowElements) {\n      element.style.width = `${this.dimensions.css.canvas.width}px`;\n      element.style.height = `${this.dimensions.css.cell.height}px`;\n      element.style.lineHeight = `${this.dimensions.css.cell.height}px`;\n      // Make sure rows don't overflow onto following row\n      element.style.overflow = 'hidden';\n    }\n\n    if (!this._dimensionsStyleElement) {\n      this._dimensionsStyleElement = this._document.createElement('style');\n      this._screenElement.appendChild(this._dimensionsStyleElement);\n    }\n\n    const styles =\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS} span {` +\n      ` display: inline-block;` +   // TODO: find workaround for inline-block (creates ~20% render penalty)\n      ` height: 100%;` +\n      ` vertical-align: top;` +\n      `}`;\n\n    this._dimensionsStyleElement.textContent = styles;\n\n    this._selectionContainer.style.height = this._viewportElement.style.height;\n    this._screenElement.style.width = `${this.dimensions.css.canvas.width}px`;\n    this._screenElement.style.height = `${this.dimensions.css.canvas.height}px`;\n  }\n\n  private _injectCss(colors: ReadonlyColorSet): void {\n    if (!this._themeStyleElement) {\n      this._themeStyleElement = this._document.createElement('style');\n      this._screenElement.appendChild(this._themeStyleElement);\n    }\n\n    // Base CSS\n    let styles =\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS} {` +\n      ` color: ${colors.foreground.css};` +\n      ` font-family: ${this._optionsService.rawOptions.fontFamily};` +\n      ` font-size: ${this._optionsService.rawOptions.fontSize}px;` +\n      ` font-kerning: none;` +\n      ` white-space: pre` +\n      `}`;\n    styles +=\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS} .xterm-dim {` +\n      ` color: ${color.multiplyOpacity(colors.foreground, 0.5).css};` +\n      `}`;\n    // Text styles\n    styles +=\n      `${this._terminalSelector} span:not(.${RowCss.BOLD_CLASS}) {` +\n      ` font-weight: ${this._optionsService.rawOptions.fontWeight};` +\n      `}` +\n      `${this._terminalSelector} span.${RowCss.BOLD_CLASS} {` +\n      ` font-weight: ${this._optionsService.rawOptions.fontWeightBold};` +\n      `}` +\n      `${this._terminalSelector} span.${RowCss.ITALIC_CLASS} {` +\n      ` font-style: italic;` +\n      `}`;\n    // Blink animation\n    const blinkAnimationUnderlineId = `blink_underline_${this._terminalClass}`;\n    const blinkAnimationBarId = `blink_bar_${this._terminalClass}`;\n    const blinkAnimationBlockId = `blink_block_${this._terminalClass}`;\n    styles +=\n      `@keyframes ${blinkAnimationUnderlineId} {` +\n      ` 50% {` +\n      `  border-bottom-style: hidden;` +\n      ` }` +\n      `}`;\n    styles +=\n      `@keyframes ${blinkAnimationBarId} {` +\n      ` 50% {` +\n      `  box-shadow: none;` +\n      ` }` +\n      `}`;\n    styles +=\n      `@keyframes ${blinkAnimationBlockId} {` +\n      ` 0% {` +\n      `  background-color: ${colors.cursor.css};` +\n      `  color: ${colors.cursorAccent.css};` +\n      ` }` +\n      ` 50% {` +\n      `  background-color: inherit;` +\n      `  color: ${colors.cursor.css};` +\n      ` }` +\n      `}`;\n    // Cursor\n    styles +=\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS}.${FOCUS_CLASS} .${RowCss.CURSOR_CLASS}.${RowCss.CURSOR_BLINK_CLASS}.${RowCss.CURSOR_STYLE_UNDERLINE_CLASS} {` +\n      ` animation: ${blinkAnimationUnderlineId} 1s step-end infinite;` +\n      `}` +\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS}.${FOCUS_CLASS} .${RowCss.CURSOR_CLASS}.${RowCss.CURSOR_BLINK_CLASS}.${RowCss.CURSOR_STYLE_BAR_CLASS} {` +\n      ` animation: ${blinkAnimationBarId} 1s step-end infinite;` +\n      `}` +\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS}.${FOCUS_CLASS} .${RowCss.CURSOR_CLASS}.${RowCss.CURSOR_BLINK_CLASS}.${RowCss.CURSOR_STYLE_BLOCK_CLASS} {` +\n      ` animation: ${blinkAnimationBlockId} 1s step-end infinite;` +\n      `}` +\n      // !important helps fix an issue where the cursor will not render on top of the selection,\n      // however it's very hard to fix this issue and retain the blink animation without the use of\n      // !important. So this edge case fails when cursor blink is on.\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS} .${RowCss.CURSOR_CLASS}.${RowCss.CURSOR_STYLE_BLOCK_CLASS} {` +\n      ` background-color: ${colors.cursor.css};` +\n      ` color: ${colors.cursorAccent.css};` +\n      `}` +\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS} .${RowCss.CURSOR_CLASS}.${RowCss.CURSOR_STYLE_BLOCK_CLASS}:not(.${RowCss.CURSOR_BLINK_CLASS}) {` +\n      ` background-color: ${colors.cursor.css} !important;` +\n      ` color: ${colors.cursorAccent.css} !important;` +\n      `}` +\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS} .${RowCss.CURSOR_CLASS}.${RowCss.CURSOR_STYLE_OUTLINE_CLASS} {` +\n      ` outline: 1px solid ${colors.cursor.css};` +\n      ` outline-offset: -1px;` +\n      `}` +\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS} .${RowCss.CURSOR_CLASS}.${RowCss.CURSOR_STYLE_BAR_CLASS} {` +\n      ` box-shadow: ${this._optionsService.rawOptions.cursorWidth}px 0 0 ${colors.cursor.css} inset;` +\n      `}` +\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS} .${RowCss.CURSOR_CLASS}.${RowCss.CURSOR_STYLE_UNDERLINE_CLASS} {` +\n      ` border-bottom: 1px ${colors.cursor.css};` +\n      ` border-bottom-style: solid;` +\n      ` height: calc(100% - 1px);` +\n      `}`;\n    // Selection\n    styles +=\n      `${this._terminalSelector} .${SELECTION_CLASS} {` +\n      ` position: absolute;` +\n      ` top: 0;` +\n      ` left: 0;` +\n      ` z-index: 1;` +\n      ` pointer-events: none;` +\n      `}` +\n      `${this._terminalSelector}.focus .${SELECTION_CLASS} div {` +\n      ` position: absolute;` +\n      ` background-color: ${colors.selectionBackgroundOpaque.css};` +\n      `}` +\n      `${this._terminalSelector} .${SELECTION_CLASS} div {` +\n      ` position: absolute;` +\n      ` background-color: ${colors.selectionInactiveBackgroundOpaque.css};` +\n      `}`;\n    // Colors\n    for (const [i, c] of colors.ansi.entries()) {\n      styles +=\n        `${this._terminalSelector} .${FG_CLASS_PREFIX}${i} { color: ${c.css}; }` +\n        `${this._terminalSelector} .${FG_CLASS_PREFIX}${i}.${RowCss.DIM_CLASS} { color: ${color.multiplyOpacity(c, 0.5).css}; }` +\n        `${this._terminalSelector} .${BG_CLASS_PREFIX}${i} { background-color: ${c.css}; }`;\n    }\n    styles +=\n      `${this._terminalSelector} .${FG_CLASS_PREFIX}${INVERTED_DEFAULT_COLOR} { color: ${color.opaque(colors.background).css}; }` +\n      `${this._terminalSelector} .${FG_CLASS_PREFIX}${INVERTED_DEFAULT_COLOR}.${RowCss.DIM_CLASS} { color: ${color.multiplyOpacity(color.opaque(colors.background), 0.5).css}; }` +\n      `${this._terminalSelector} .${BG_CLASS_PREFIX}${INVERTED_DEFAULT_COLOR} { background-color: ${colors.foreground.css}; }`;\n\n    this._themeStyleElement.textContent = styles;\n  }\n\n  /**\n   * default letter spacing\n   * Due to rounding issues in dimensions dpr calc glyph might render\n   * slightly too wide or too narrow. The method corrects the stacking offsets\n   * by applying a default letter-spacing for all chars.\n   * The value gets passed to the row factory to avoid setting this value again\n   * (render speedup is roughly 10%).\n   */\n  private _setDefaultSpacing(): void {\n    // measure same char as in CharSizeService to get the base deviation\n    const spacing = this.dimensions.css.cell.width - this._widthCache.get('W', false, false);\n    this._rowContainer.style.letterSpacing = `${spacing}px`;\n    this._rowFactory.defaultSpacing = spacing;\n  }\n\n  public handleDevicePixelRatioChange(): void {\n    this._updateDimensions();\n    this._widthCache.clear();\n    this._setDefaultSpacing();\n  }\n\n  private _refreshRowElements(cols: number, rows: number): void {\n    // Add missing elements\n    for (let i = this._rowElements.length; i <= rows; i++) {\n      const row = this._document.createElement('div');\n      this._rowContainer.appendChild(row);\n      this._rowElements.push(row);\n    }\n    // Remove excess elements\n    while (this._rowElements.length > rows) {\n      this._rowContainer.removeChild(this._rowElements.pop()!);\n    }\n  }\n\n  public handleResize(cols: number, rows: number): void {\n    this._refreshRowElements(cols, rows);\n    this._updateDimensions();\n    this.handleSelectionChanged(this._selectionRenderModel.selectionStart, this._selectionRenderModel.selectionEnd, this._selectionRenderModel.columnSelectMode);\n  }\n\n  public handleCharSizeChanged(): void {\n    this._updateDimensions();\n    this._widthCache.clear();\n    this._setDefaultSpacing();\n  }\n\n  public handleBlur(): void {\n    this._rowContainer.classList.remove(FOCUS_CLASS);\n    this.renderRows(0, this._bufferService.rows - 1);\n  }\n\n  public handleFocus(): void {\n    this._rowContainer.classList.add(FOCUS_CLASS);\n    this.renderRows(this._bufferService.buffer.y, this._bufferService.buffer.y);\n  }\n\n  public handleSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean): void {\n    // Remove all selections\n    this._selectionContainer.replaceChildren();\n    this._rowFactory.handleSelectionChanged(start, end, columnSelectMode);\n    this.renderRows(0, this._bufferService.rows - 1);\n\n    // Selection does not exist\n    if (!start || !end) {\n      return;\n    }\n\n    this._selectionRenderModel.update(this._terminal, start, end, columnSelectMode);\n\n    // Translate from buffer position to viewport position\n    const viewportStartRow = this._selectionRenderModel.viewportStartRow;\n    const viewportEndRow = this._selectionRenderModel.viewportEndRow;\n    const viewportCappedStartRow = this._selectionRenderModel.viewportCappedStartRow;\n    const viewportCappedEndRow = this._selectionRenderModel.viewportCappedEndRow;\n\n    // No need to draw the selection\n    if (viewportCappedStartRow >= this._bufferService.rows || viewportCappedEndRow < 0) {\n      return;\n    }\n\n    // Create the selections\n    const documentFragment = this._document.createDocumentFragment();\n\n    if (columnSelectMode) {\n      const isXFlipped = start[0] > end[0];\n      documentFragment.appendChild(\n        this._createSelectionElement(viewportCappedStartRow, isXFlipped ? end[0] : start[0], isXFlipped ? start[0] : end[0], viewportCappedEndRow - viewportCappedStartRow + 1)\n      );\n    } else {\n      // Draw first row\n      const startCol = viewportStartRow === viewportCappedStartRow ? start[0] : 0;\n      const endCol = viewportCappedStartRow === viewportEndRow ? end[0] : this._bufferService.cols;\n      documentFragment.appendChild(this._createSelectionElement(viewportCappedStartRow, startCol, endCol));\n      // Draw middle rows\n      const middleRowsCount = viewportCappedEndRow - viewportCappedStartRow - 1;\n      documentFragment.appendChild(this._createSelectionElement(viewportCappedStartRow + 1, 0, this._bufferService.cols, middleRowsCount));\n      // Draw final row\n      if (viewportCappedStartRow !== viewportCappedEndRow) {\n        // Only draw viewportEndRow if it's not the same as viewporttartRow\n        const endCol = viewportEndRow === viewportCappedEndRow ? end[0] : this._bufferService.cols;\n        documentFragment.appendChild(this._createSelectionElement(viewportCappedEndRow, 0, endCol));\n      }\n    }\n    this._selectionContainer.appendChild(documentFragment);\n  }\n\n  /**\n   * Creates a selection element at the specified position.\n   * @param row The row of the selection.\n   * @param colStart The start column.\n   * @param colEnd The end columns.\n   */\n  private _createSelectionElement(row: number, colStart: number, colEnd: number, rowCount: number = 1): HTMLElement {\n    const element = this._document.createElement('div');\n    const left = colStart * this.dimensions.css.cell.width;\n    let width = this.dimensions.css.cell.width * (colEnd - colStart);\n    if (left + width > this.dimensions.css.canvas.width) {\n      width = this.dimensions.css.canvas.width - left;\n    }\n\n    element.style.height = `${rowCount * this.dimensions.css.cell.height}px`;\n    element.style.top = `${row * this.dimensions.css.cell.height}px`;\n    element.style.left = `${left}px`;\n    element.style.width = `${width}px`;\n    return element;\n  }\n\n  public handleCursorMove(): void {\n    // No-op, the cursor is drawn when rows are drawn\n  }\n\n  private _handleOptionsChanged(): void {\n    // Force a refresh\n    this._updateDimensions();\n    // Refresh CSS\n    this._injectCss(this._themeService.colors);\n    // update spacing cache\n    this._widthCache.setFont(\n      this._optionsService.rawOptions.fontFamily,\n      this._optionsService.rawOptions.fontSize,\n      this._optionsService.rawOptions.fontWeight,\n      this._optionsService.rawOptions.fontWeightBold\n    );\n    this._setDefaultSpacing();\n  }\n\n  public clear(): void {\n    for (const e of this._rowElements) {\n      /**\n       * NOTE: This used to be `e.innerText = '';` but that doesn't work when using `jsdom` and\n       * `@testing-library/react`\n       *\n       * references:\n       * - https://github.com/testing-library/react-testing-library/issues/1146\n       * - https://github.com/jsdom/jsdom/issues/1245\n       */\n      e.replaceChildren();\n    }\n  }\n\n  public renderRows(start: number, end: number): void {\n    const buffer = this._bufferService.buffer;\n    const cursorAbsoluteY = buffer.ybase + buffer.y;\n    const cursorX = Math.min(buffer.x, this._bufferService.cols - 1);\n    const cursorBlink = this._optionsService.rawOptions.cursorBlink;\n    const cursorStyle = this._optionsService.rawOptions.cursorStyle;\n    const cursorInactiveStyle = this._optionsService.rawOptions.cursorInactiveStyle;\n\n    for (let y = start; y <= end; y++) {\n      const row = y + buffer.ydisp;\n      const rowElement = this._rowElements[y];\n      const lineData = buffer.lines.get(row);\n      if (!rowElement || !lineData) {\n        break;\n      }\n      rowElement.replaceChildren(\n        ...this._rowFactory.createRow(\n          lineData,\n          row,\n          row === cursorAbsoluteY,\n          cursorStyle,\n          cursorInactiveStyle,\n          cursorX,\n          cursorBlink,\n          this.dimensions.css.cell.width,\n          this._widthCache,\n          -1,\n          -1\n        )\n      );\n    }\n  }\n\n  private get _terminalSelector(): string {\n    return `.${TERMINAL_CLASS_PREFIX}${this._terminalClass}`;\n  }\n\n  private _handleLinkHover(e: ILinkifierEvent): void {\n    this._setCellUnderline(e.x1, e.x2, e.y1, e.y2, e.cols, true);\n  }\n\n  private _handleLinkLeave(e: ILinkifierEvent): void {\n    this._setCellUnderline(e.x1, e.x2, e.y1, e.y2, e.cols, false);\n  }\n\n  private _setCellUnderline(x: number, x2: number, y: number, y2: number, cols: number, enabled: boolean): void {\n    /**\n     * NOTE: The linkifier may send out of viewport y-values if:\n     * - negative y-value: the link started at a higher line\n     * - y-value >= maxY: the link ends at a line below viewport\n     *\n     * For negative y-values we can simply adjust x = 0,\n     * as higher up link start means, that everything from\n     * (0,0) is a link under top-down-left-right char progression\n     *\n     * Additionally there might be a small chance of out-of-sync x|y-values\n     * from a race condition of render updates vs. link event handler execution:\n     * - (sync) resize: chances terminal buffer in sync, schedules render update async\n     * - (async) link handler race condition: new buffer metrics, but still on old render state\n     * - (async) render update: brings term metrics and render state back in sync\n     */\n    // clip coords into viewport\n    if (y < 0) x = 0;\n    if (y2 < 0) x2 = 0;\n    const maxY = this._bufferService.rows - 1;\n    y = Math.max(Math.min(y, maxY), 0);\n    y2 = Math.max(Math.min(y2, maxY), 0);\n\n    cols = Math.min(cols, this._bufferService.cols);\n    const buffer = this._bufferService.buffer;\n    const cursorAbsoluteY = buffer.ybase + buffer.y;\n    const cursorX = Math.min(buffer.x, cols - 1);\n    const cursorBlink = this._optionsService.rawOptions.cursorBlink;\n    const cursorStyle = this._optionsService.rawOptions.cursorStyle;\n    const cursorInactiveStyle = this._optionsService.rawOptions.cursorInactiveStyle;\n\n    // refresh rows within link range\n    for (let i = y; i <= y2; ++i) {\n      const row = i + buffer.ydisp;\n      const rowElement = this._rowElements[i];\n      const bufferline = buffer.lines.get(row);\n      if (!rowElement || !bufferline) {\n        break;\n      }\n      rowElement.replaceChildren(\n        ...this._rowFactory.createRow(\n          bufferline,\n          row,\n          row === cursorAbsoluteY,\n          cursorStyle,\n          cursorInactiveStyle,\n          cursorX,\n          cursorBlink,\n          this.dimensions.css.cell.width,\n          this._widthCache,\n          enabled ? (i === y ? x : 0) : -1,\n          enabled ? ((i === y2 ? x2 : cols) - 1) : -1\n        )\n      );\n    }\n  }\n}\n", "/**\n * Copyright (c) 2018, 2023 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferLine, ICellData, IColor } from 'common/Types';\nimport { INVERTED_DEFAULT_COLOR } from 'browser/renderer/shared/Constants';\nimport { WHITESPACE_CELL_CHAR, Attributes } from 'common/buffer/Constants';\nimport { CellData } from 'common/buffer/CellData';\nimport { ICoreService, IDecorationService, IOptionsService } from 'common/services/Services';\nimport { channels, color } from 'common/Color';\nimport { ICharacterJoinerService, ICoreBrowserService, IThemeService } from 'browser/services/Services';\nimport { JoinedCellData } from 'browser/services/CharacterJoinerService';\nimport { treatGlyphAsBackgroundColor } from 'browser/renderer/shared/RendererUtils';\nimport { AttributeData } from 'common/buffer/AttributeData';\nimport { WidthCache } from 'browser/renderer/dom/WidthCache';\nimport { IColorContrastCache } from 'browser/Types';\n\n\nexport const enum RowCss {\n  BOLD_CLASS = 'xterm-bold',\n  DIM_CLASS = 'xterm-dim',\n  ITALIC_CLASS = 'xterm-italic',\n  UNDERLINE_CLASS = 'xterm-underline',\n  OVERLINE_CLASS = 'xterm-overline',\n  STRIKETHROUGH_CLASS = 'xterm-strikethrough',\n  CURSOR_CLASS = 'xterm-cursor',\n  CURSOR_BLINK_CLASS = 'xterm-cursor-blink',\n  CURSOR_STYLE_BLOCK_CLASS = 'xterm-cursor-block',\n  CURSOR_STYLE_OUTLINE_CLASS = 'xterm-cursor-outline',\n  CURSOR_STYLE_BAR_CLASS = 'xterm-cursor-bar',\n  CURSOR_STYLE_UNDERLINE_CLASS = 'xterm-cursor-underline'\n}\n\n\nexport class DomRendererRowFactory {\n  private _workCell: CellData = new CellData();\n\n  private _selectionStart: [number, number] | undefined;\n  private _selectionEnd: [number, number] | undefined;\n  private _columnSelectMode: boolean = false;\n\n  public defaultSpacing = 0;\n\n  constructor(\n    private readonly _document: Document,\n    @ICharacterJoinerService private readonly _characterJoinerService: ICharacterJoinerService,\n    @IOptionsService private readonly _optionsService: IOptionsService,\n    @ICoreBrowserService private readonly _coreBrowserService: ICoreBrowserService,\n    @ICoreService private readonly _coreService: ICoreService,\n    @IDecorationService private readonly _decorationService: IDecorationService,\n    @IThemeService private readonly _themeService: IThemeService\n  ) {}\n\n  public handleSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean): void {\n    this._selectionStart = start;\n    this._selectionEnd = end;\n    this._columnSelectMode = columnSelectMode;\n  }\n\n  public createRow(\n    lineData: IBufferLine,\n    row: number,\n    isCursorRow: boolean,\n    cursorStyle: string | undefined,\n    cursorInactiveStyle: string | undefined,\n    cursorX: number,\n    cursorBlink: boolean,\n    cellWidth: number,\n    widthCache: WidthCache,\n    linkStart: number,\n    linkEnd: number\n  ): HTMLSpanElement[] {\n\n    const elements: HTMLSpanElement[] = [];\n    const joinedRanges = this._characterJoinerService.getJoinedCharacters(row);\n    const colors = this._themeService.colors;\n\n    let lineLength = lineData.getNoBgTrimmedLength();\n    if (isCursorRow && lineLength < cursorX + 1) {\n      lineLength = cursorX + 1;\n    }\n\n    let charElement: HTMLSpanElement | undefined;\n    let cellAmount = 0;\n    let text = '';\n    let oldBg = 0;\n    let oldFg = 0;\n    let oldExt = 0;\n    let oldLinkHover: number | boolean = false;\n    let oldSpacing = 0;\n    let oldIsInSelection: boolean = false;\n    let spacing = 0;\n    const classes: string[] = [];\n\n    const hasHover = linkStart !== -1 && linkEnd !== -1;\n\n    for (let x = 0; x < lineLength; x++) {\n      lineData.loadCell(x, this._workCell);\n      let width = this._workCell.getWidth();\n\n      // The character to the left is a wide character, drawing is owned by the char at x-1\n      if (width === 0) {\n        continue;\n      }\n\n      // If true, indicates that the current character(s) to draw were joined.\n      let isJoined = false;\n      let lastCharX = x;\n\n      // Process any joined character ranges as needed. Because of how the\n      // ranges are produced, we know that they are valid for the characters\n      // and attributes of our input.\n      let cell = this._workCell;\n      if (joinedRanges.length > 0 && x === joinedRanges[0][0]) {\n        isJoined = true;\n        const range = joinedRanges.shift()!;\n\n        // We already know the exact start and end column of the joined range,\n        // so we get the string and width representing it directly\n        cell = new JoinedCellData(\n          this._workCell,\n          lineData.translateToString(true, range[0], range[1]),\n          range[1] - range[0]\n        );\n\n        // Skip over the cells occupied by this range in the loop\n        lastCharX = range[1] - 1;\n\n        // Recalculate width\n        width = cell.getWidth();\n      }\n\n      const isInSelection = this._isCellInSelection(x, row);\n      const isCursorCell = isCursorRow && x === cursorX;\n      const isLinkHover = hasHover && x >= linkStart && x <= linkEnd;\n\n      let isDecorated = false;\n      this._decorationService.forEachDecorationAtCell(x, row, undefined, d => {\n        isDecorated = true;\n      });\n\n      // get chars to render for this cell\n      let chars = cell.getChars() || WHITESPACE_CELL_CHAR;\n      if (chars === ' ' && (cell.isUnderline() || cell.isOverline())) {\n        chars = '\\xa0';\n      }\n\n      // lookup char render width and calc spacing\n      spacing = width * cellWidth - widthCache.get(chars, cell.isBold(), cell.isItalic());\n\n      if (!charElement) {\n        charElement = this._document.createElement('span');\n      } else {\n        /**\n         * chars can only be merged on existing span if:\n         * - existing span only contains mergeable chars (cellAmount != 0)\n         * - bg did not change (or both are in selection)\n         * - fg did not change (or both are in selection and selection fg is set)\n         * - ext did not change\n         * - underline from hover state did not change\n         * - cell content renders to same letter-spacing\n         * - cell is not cursor\n         */\n        if (\n          cellAmount\n          && (\n            (isInSelection && oldIsInSelection)\n            || (!isInSelection && !oldIsInSelection && cell.bg === oldBg)\n          )\n          && (\n            (isInSelection && oldIsInSelection && colors.selectionForeground)\n            || cell.fg === oldFg\n          )\n          && cell.extended.ext === oldExt\n          && isLinkHover === oldLinkHover\n          && spacing === oldSpacing\n          && !isCursorCell\n          && !isJoined\n          && !isDecorated\n        ) {\n          // no span alterations, thus only account chars skipping all code below\n          if (cell.isInvisible()) {\n            text += WHITESPACE_CELL_CHAR;\n          } else {\n            text += chars;\n          }\n          cellAmount++;\n          continue;\n        } else {\n          /**\n           * cannot merge:\n           * - apply left-over text to old span\n           * - create new span, reset state holders cellAmount & text\n           */\n          if (cellAmount) {\n            charElement.textContent = text;\n          }\n          charElement = this._document.createElement('span');\n          cellAmount = 0;\n          text = '';\n        }\n      }\n      // preserve conditions for next merger eval round\n      oldBg = cell.bg;\n      oldFg = cell.fg;\n      oldExt = cell.extended.ext;\n      oldLinkHover = isLinkHover;\n      oldSpacing = spacing;\n      oldIsInSelection = isInSelection;\n\n      if (isJoined) {\n        // The DOM renderer colors the background of the cursor but for ligatures all cells are\n        // joined. The workaround here is to show a cursor around the whole ligature so it shows up,\n        // the cursor looks the same when on any character of the ligature though\n        if (cursorX >= x && cursorX <= lastCharX) {\n          cursorX = x;\n        }\n      }\n\n      if (!this._coreService.isCursorHidden && isCursorCell && this._coreService.isCursorInitialized) {\n        classes.push(RowCss.CURSOR_CLASS);\n        if (this._coreBrowserService.isFocused) {\n          if (cursorBlink) {\n            classes.push(RowCss.CURSOR_BLINK_CLASS);\n          }\n          classes.push(\n            cursorStyle === 'bar'\n              ? RowCss.CURSOR_STYLE_BAR_CLASS\n              : cursorStyle === 'underline'\n                ? RowCss.CURSOR_STYLE_UNDERLINE_CLASS\n                : RowCss.CURSOR_STYLE_BLOCK_CLASS\n          );\n        } else {\n          if (cursorInactiveStyle) {\n            switch (cursorInactiveStyle) {\n              case 'outline':\n                classes.push(RowCss.CURSOR_STYLE_OUTLINE_CLASS);\n                break;\n              case 'block':\n                classes.push(RowCss.CURSOR_STYLE_BLOCK_CLASS);\n                break;\n              case 'bar':\n                classes.push(RowCss.CURSOR_STYLE_BAR_CLASS);\n                break;\n              case 'underline':\n                classes.push(RowCss.CURSOR_STYLE_UNDERLINE_CLASS);\n                break;\n              default:\n                break;\n            }\n          }\n        }\n      }\n\n      if (cell.isBold()) {\n        classes.push(RowCss.BOLD_CLASS);\n      }\n\n      if (cell.isItalic()) {\n        classes.push(RowCss.ITALIC_CLASS);\n      }\n\n      if (cell.isDim()) {\n        classes.push(RowCss.DIM_CLASS);\n      }\n\n      if (cell.isInvisible()) {\n        text = WHITESPACE_CELL_CHAR;\n      } else {\n        text = cell.getChars() || WHITESPACE_CELL_CHAR;\n      }\n\n      if (cell.isUnderline()) {\n        classes.push(`${RowCss.UNDERLINE_CLASS}-${cell.extended.underlineStyle}`);\n        if (text === ' ') {\n          text = '\\xa0'; // = &nbsp;\n        }\n        if (!cell.isUnderlineColorDefault()) {\n          if (cell.isUnderlineColorRGB()) {\n            charElement.style.textDecorationColor = `rgb(${AttributeData.toColorRGB(cell.getUnderlineColor()).join(',')})`;\n          } else {\n            let fg = cell.getUnderlineColor();\n            if (this._optionsService.rawOptions.drawBoldTextInBrightColors && cell.isBold() && fg < 8) {\n              fg += 8;\n            }\n            charElement.style.textDecorationColor = colors.ansi[fg].css;\n          }\n        }\n      }\n\n      if (cell.isOverline()) {\n        classes.push(RowCss.OVERLINE_CLASS);\n        if (text === ' ') {\n          text = '\\xa0'; // = &nbsp;\n        }\n      }\n\n      if (cell.isStrikethrough()) {\n        classes.push(RowCss.STRIKETHROUGH_CLASS);\n      }\n\n      // apply link hover underline late, effectively overrides any previous text-decoration\n      // settings\n      if (isLinkHover) {\n        charElement.style.textDecoration = 'underline';\n      }\n\n      let fg = cell.getFgColor();\n      let fgColorMode = cell.getFgColorMode();\n      let bg = cell.getBgColor();\n      let bgColorMode = cell.getBgColorMode();\n      const isInverse = !!cell.isInverse();\n      if (isInverse) {\n        const temp = fg;\n        fg = bg;\n        bg = temp;\n        const temp2 = fgColorMode;\n        fgColorMode = bgColorMode;\n        bgColorMode = temp2;\n      }\n\n      // Apply any decoration foreground/background overrides, this must happen after inverse has\n      // been applied\n      let bgOverride: IColor | undefined;\n      let fgOverride: IColor | undefined;\n      let isTop = false;\n      this._decorationService.forEachDecorationAtCell(x, row, undefined, d => {\n        if (d.options.layer !== 'top' && isTop) {\n          return;\n        }\n        if (d.backgroundColorRGB) {\n          bgColorMode = Attributes.CM_RGB;\n          bg = d.backgroundColorRGB.rgba >> 8 & 0xFFFFFF;\n          bgOverride = d.backgroundColorRGB;\n        }\n        if (d.foregroundColorRGB) {\n          fgColorMode = Attributes.CM_RGB;\n          fg = d.foregroundColorRGB.rgba >> 8 & 0xFFFFFF;\n          fgOverride = d.foregroundColorRGB;\n        }\n        isTop = d.options.layer === 'top';\n      });\n\n      // Apply selection\n      if (!isTop && isInSelection) {\n        // If in the selection, force the element to be above the selection to improve contrast and\n        // support opaque selections. The applies background is not actually needed here as\n        // selection is drawn in a seperate container, the main purpose of this to ensuring minimum\n        // contrast ratio\n        bgOverride = this._coreBrowserService.isFocused ? colors.selectionBackgroundOpaque : colors.selectionInactiveBackgroundOpaque;\n        bg = bgOverride.rgba >> 8 & 0xFFFFFF;\n        bgColorMode = Attributes.CM_RGB;\n        // Since an opaque selection is being rendered, the selection pretends to be a decoration to\n        // ensure text is drawn above the selection.\n        isTop = true;\n        // Apply selection foreground if applicable\n        if (colors.selectionForeground) {\n          fgColorMode = Attributes.CM_RGB;\n          fg = colors.selectionForeground.rgba >> 8 & 0xFFFFFF;\n          fgOverride = colors.selectionForeground;\n        }\n      }\n\n      // If it's a top decoration, render above the selection\n      if (isTop) {\n        classes.push('xterm-decoration-top');\n      }\n\n      // Background\n      let resolvedBg: IColor;\n      switch (bgColorMode) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:\n          resolvedBg = colors.ansi[bg];\n          classes.push(`xterm-bg-${bg}`);\n          break;\n        case Attributes.CM_RGB:\n          resolvedBg = channels.toColor(bg >> 16, bg >> 8 & 0xFF, bg & 0xFF);\n          this._addStyle(charElement, `background-color:#${padStart((bg >>> 0).toString(16), '0', 6)}`);\n          break;\n        case Attributes.CM_DEFAULT:\n        default:\n          if (isInverse) {\n            resolvedBg = colors.foreground;\n            classes.push(`xterm-bg-${INVERTED_DEFAULT_COLOR}`);\n          } else {\n            resolvedBg = colors.background;\n          }\n      }\n\n      // If there is no background override by now it's the original color, so apply dim if needed\n      if (!bgOverride) {\n        if (cell.isDim()) {\n          bgOverride = color.multiplyOpacity(resolvedBg, 0.5);\n        }\n      }\n\n      // Foreground\n      switch (fgColorMode) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:\n          if (cell.isBold() && fg < 8 && this._optionsService.rawOptions.drawBoldTextInBrightColors) {\n            fg += 8;\n          }\n          if (!this._applyMinimumContrast(charElement, resolvedBg, colors.ansi[fg], cell, bgOverride, undefined)) {\n            classes.push(`xterm-fg-${fg}`);\n          }\n          break;\n        case Attributes.CM_RGB:\n          const color = channels.toColor(\n            (fg >> 16) & 0xFF,\n            (fg >>  8) & 0xFF,\n            (fg      ) & 0xFF\n          );\n          if (!this._applyMinimumContrast(charElement, resolvedBg, color, cell, bgOverride, fgOverride)) {\n            this._addStyle(charElement, `color:#${padStart(fg.toString(16), '0', 6)}`);\n          }\n          break;\n        case Attributes.CM_DEFAULT:\n        default:\n          if (!this._applyMinimumContrast(charElement, resolvedBg, colors.foreground, cell, bgOverride, fgOverride)) {\n            if (isInverse) {\n              classes.push(`xterm-fg-${INVERTED_DEFAULT_COLOR}`);\n            }\n          }\n      }\n\n      // apply CSS classes\n      // slightly faster than using classList by omitting\n      // checks for doubled entries (code above should not have doublets)\n      if (classes.length) {\n        charElement.className = classes.join(' ');\n        classes.length = 0;\n      }\n\n      // exclude conditions for cell merging - never merge these\n      if (!isCursorCell && !isJoined && !isDecorated) {\n        cellAmount++;\n      } else {\n        charElement.textContent = text;\n      }\n      // apply letter-spacing rule\n      if (spacing !== this.defaultSpacing) {\n        charElement.style.letterSpacing = `${spacing}px`;\n      }\n\n      elements.push(charElement);\n      x = lastCharX;\n    }\n\n    // postfix text of last merged span\n    if (charElement && cellAmount) {\n      charElement.textContent = text;\n    }\n\n    return elements;\n  }\n\n  private _applyMinimumContrast(element: HTMLElement, bg: IColor, fg: IColor, cell: ICellData, bgOverride: IColor | undefined, fgOverride: IColor | undefined): boolean {\n    if (this._optionsService.rawOptions.minimumContrastRatio === 1 || treatGlyphAsBackgroundColor(cell.getCode())) {\n      return false;\n    }\n\n    // Try get from cache first, only use the cache when there are no decoration overrides\n    const cache = this._getContrastCache(cell);\n    let adjustedColor: IColor | undefined | null = undefined;\n    if (!bgOverride && !fgOverride) {\n      adjustedColor = cache.getColor(bg.rgba, fg.rgba);\n    }\n\n    // Calculate and store in cache\n    if (adjustedColor === undefined) {\n      // Dim cells only require half the contrast, otherwise they wouldn't be distinguishable from\n      // non-dim cells\n      const ratio = this._optionsService.rawOptions.minimumContrastRatio / (cell.isDim() ? 2 : 1);\n      adjustedColor = color.ensureContrastRatio(bgOverride || bg, fgOverride || fg, ratio);\n      cache.setColor((bgOverride || bg).rgba, (fgOverride || fg).rgba, adjustedColor ?? null);\n    }\n\n    if (adjustedColor) {\n      this._addStyle(element, `color:${adjustedColor.css}`);\n      return true;\n    }\n\n    return false;\n  }\n\n  private _getContrastCache(cell: ICellData): IColorContrastCache {\n    if (cell.isDim()) {\n      return this._themeService.colors.halfContrastCache;\n    }\n    return this._themeService.colors.contrastCache;\n  }\n\n  private _addStyle(element: HTMLElement, style: string): void {\n    element.setAttribute('style', `${element.getAttribute('style') || ''}${style};`);\n  }\n\n  private _isCellInSelection(x: number, y: number): boolean {\n    const start = this._selectionStart;\n    const end = this._selectionEnd;\n    if (!start || !end) {\n      return false;\n    }\n    if (this._columnSelectMode) {\n      if (start[0] <= end[0]) {\n        return x >= start[0] && y >= start[1] &&\n          x < end[0] && y <= end[1];\n      }\n      return x < start[0] && y >= start[1] &&\n        x >= end[0] && y <= end[1];\n    }\n    return (y > start[1] && y < end[1]) ||\n        (start[1] === end[1] && y === start[1] && x >= start[0] && x < end[0]) ||\n        (start[1] < end[1] && y === end[1] && x < end[0]) ||\n        (start[1] < end[1] && y === start[1] && x >= start[0]);\n  }\n}\n\nfunction padStart(text: string, padChar: string, length: number): string {\n  while (text.length < length) {\n    text = padChar + text;\n  }\n  return text;\n}\n", "/**\n * Copyright (c) 2023 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\nimport { FontWeight } from 'common/services/Services';\n\n\nexport const enum WidthCacheSettings {\n  /** sentinel for unset values in flat cache */\n  FLAT_UNSET = -9999,\n  /** size of flat cache, size-1 equals highest codepoint handled by flat */\n  FLAT_SIZE = 256,\n  /** char repeat for measuring */\n  REPEAT = 32\n}\n\n\nconst enum FontVariant {\n  REGULAR = 0,\n  BOLD = 1,\n  ITALIC = 2,\n  BOLD_ITALIC = 3\n}\n\n\nexport class WidthCache implements IDisposable {\n  // flat cache for regular variant up to CacheSettings.FLAT_SIZE\n  // NOTE: ~4x faster access than holey (serving >>80% of terminal content)\n  //       It has a small memory footprint (only 1MB for full BMP caching),\n  //       still the sweet spot is not reached before touching 32k different codepoints,\n  //       thus we store the remaining <<20% of terminal data in a holey structure.\n  protected _flat = new Float32Array(WidthCacheSettings.FLAT_SIZE);\n\n  // holey cache for bold, italic and bold&italic for any string\n  // FIXME: can grow really big over time (~8.5 MB for full BMP caching),\n  //        so a shared API across terminals is needed\n  protected _holey: Map<string, number> | undefined;\n\n  private _font = '';\n  private _fontSize = 0;\n  private _weight: FontWeight = 'normal';\n  private _weightBold: FontWeight = 'bold';\n  private _container: HTMLDivElement;\n  private _measureElements: HTMLSpanElement[] = [];\n\n  constructor(_document: Document, _helperContainer: HTMLElement) {\n    this._container = _document.createElement('div');\n    this._container.classList.add('xterm-width-cache-measure-container');\n    this._container.setAttribute('aria-hidden', 'true');\n    // SP should stack in spans\n    this._container.style.whiteSpace = 'pre';\n    // avoid undercuts in non-monospace fonts from kerning\n    this._container.style.fontKerning = 'none';\n\n    const regular = _document.createElement('span');\n    regular.classList.add('xterm-char-measure-element');\n\n    const bold = _document.createElement('span');\n    bold.classList.add('xterm-char-measure-element');\n    bold.style.fontWeight = 'bold';\n\n    const italic = _document.createElement('span');\n    italic.classList.add('xterm-char-measure-element');\n    italic.style.fontStyle = 'italic';\n\n    const boldItalic = _document.createElement('span');\n    boldItalic.classList.add('xterm-char-measure-element');\n    boldItalic.style.fontWeight = 'bold';\n    boldItalic.style.fontStyle = 'italic';\n\n    // NOTE: must be in order of FontVariant\n    this._measureElements = [regular, bold, italic, boldItalic];\n    this._container.appendChild(regular);\n    this._container.appendChild(bold);\n    this._container.appendChild(italic);\n    this._container.appendChild(boldItalic);\n\n    _helperContainer.appendChild(this._container);\n\n    this.clear();\n  }\n\n  public dispose(): void {\n    this._container.remove();           // remove elements from DOM\n    this._measureElements.length = 0;   // release element refs\n    this._holey = undefined;            // free cache memory via GC\n  }\n\n  /**\n   * Clear the width cache.\n   */\n  public clear(): void {\n    this._flat.fill(WidthCacheSettings.FLAT_UNSET);\n    // .clear() has some overhead, re-assign instead (>3 times faster)\n    this._holey = new Map<string, number>();\n  }\n\n  /**\n   * Set the font for measuring.\n   * Must be called for any changes on font settings.\n   * Also clears the cache.\n   */\n  public setFont(font: string, fontSize: number, weight: FontWeight, weightBold: FontWeight): void {\n    // skip if nothing changed\n    if (font === this._font\n      && fontSize === this._fontSize\n      && weight === this._weight\n      && weightBold === this._weightBold\n    ) {\n      return;\n    }\n\n    this._font = font;\n    this._fontSize = fontSize;\n    this._weight = weight;\n    this._weightBold = weightBold;\n\n    this._container.style.fontFamily = this._font;\n    this._container.style.fontSize = `${this._fontSize}px`;\n    this._measureElements[FontVariant.REGULAR].style.fontWeight = `${weight}`;\n    this._measureElements[FontVariant.BOLD].style.fontWeight = `${weightBold}`;\n    this._measureElements[FontVariant.ITALIC].style.fontWeight = `${weight}`;\n    this._measureElements[FontVariant.BOLD_ITALIC].style.fontWeight = `${weightBold}`;\n\n    this.clear();\n  }\n\n  /**\n   * Get the render width for cell content `c` with current font settings.\n   * `variant` denotes the font variant to be used.\n   */\n  public get(c: string, bold: boolean | number, italic: boolean | number): number {\n    let cp = 0;\n    if (!bold && !italic && c.length === 1 && (cp = c.charCodeAt(0)) < WidthCacheSettings.FLAT_SIZE) {\n      if (this._flat[cp] !== WidthCacheSettings.FLAT_UNSET) {\n        return this._flat[cp];\n      }\n      const width = this._measure(c, 0);\n      if (width > 0) {\n        this._flat[cp] = width;\n      }\n      return width;\n    }\n    let key = c;\n    if (bold) key += 'B';\n    if (italic) key += 'I';\n    let width = this._holey!.get(key);\n    if (width === undefined) {\n      let variant = 0;\n      if (bold) variant |= FontVariant.BOLD;\n      if (italic) variant |= FontVariant.ITALIC;\n      width = this._measure(c, variant);\n      if (width > 0) {\n        this._holey!.set(key, width);\n      }\n    }\n    return width;\n  }\n\n  protected _measure(c: string, variant: FontVariant): number {\n    const el = this._measureElements[variant];\n    el.textContent = c.repeat(WidthCacheSettings.REPEAT);\n    return el.offsetWidth / WidthCacheSettings.REPEAT;\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { isFirefox, isLegacyEdge } from 'common/Platform';\n\nexport const INVERTED_DEFAULT_COLOR = 257;\n\nexport const DIM_OPACITY = 0.5;\n// The text baseline is set conditionally by browser. Using 'ideographic' for Firefox or Legacy Edge\n// would result in truncated text (Issue 3353). Using 'bottom' for Chrome would result in slightly\n// unaligned Powerline fonts (PR 3356#issuecomment-850928179).\nexport const TEXT_BASELINE: CanvasTextBaseline = isFirefox || isLegacyEdge ? 'bottom' : 'ideographic';\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDimensions, IRenderDimensions } from 'browser/renderer/shared/Types';\n\nexport function throwIfFalsy<T>(value: T | undefined | null): T {\n  if (!value) {\n    throw new Error('value must not be falsy');\n  }\n  return value;\n}\n\nexport function isPowerlineGlyph(codepoint: number): boolean {\n  // Only return true for Powerline symbols which require\n  // different padding and should be excluded from minimum contrast\n  // ratio standards\n  return 0xE0A4 <= codepoint && codepoint <= 0xE0D6;\n}\n\nexport function isRestrictedPowerlineGlyph(codepoint: number): boolean {\n  return 0xE0B0 <= codepoint && codepoint <= 0xE0B7;\n}\n\nfunction isNerdFontGlyph(codepoint: number): boolean {\n  return 0xE000 <= codepoint && codepoint <= 0xF8FF;\n}\n\nfunction isBoxOrBlockGlyph(codepoint: number): boolean {\n  return 0x2500 <= codepoint && codepoint <= 0x259F;\n}\n\nexport function isEmoji(codepoint: number): boolean {\n  return (\n    codepoint >= 0x1F600 && codepoint <= 0x1F64F || // Emoticons\n    codepoint >= 0x1F300 && codepoint <= 0x1F5FF || // Misc Symbols and Pictographs\n    codepoint >= 0x1F680 && codepoint <= 0x1F6FF || // Transport and Map\n    codepoint >= 0x2600  && codepoint <= 0x26FF  || // Misc symbols\n    codepoint >= 0x2700  && codepoint <= 0x27BF  || // Dingbats\n    codepoint >= 0xFE00  && codepoint <= 0xFE0F  || // Variation Selectors\n    codepoint >= 0x1F900 && codepoint <= 0x1F9FF || // Supplemental Symbols and Pictographs\n    codepoint >= 0x1F1E6 && codepoint <= 0x1F1FF\n  );\n}\n\nexport function allowRescaling(codepoint: number | undefined, width: number, glyphSizeX: number, deviceCellWidth: number): boolean {\n  return (\n    // Is single cell width\n    width === 1 &&\n    // Glyph exceeds cell bounds, add 50% to avoid hurting readability by rescaling glyphs that\n    // barely overlap\n    glyphSizeX > Math.ceil(deviceCellWidth * 1.5) &&\n    // Never rescale ascii\n    codepoint !== undefined && codepoint > 0xFF &&\n    // Never rescale emoji\n    !isEmoji(codepoint) &&\n    // Never rescale powerline or nerd fonts\n    !isPowerlineGlyph(codepoint) && !isNerdFontGlyph(codepoint)\n  );\n}\n\nexport function treatGlyphAsBackgroundColor(codepoint: number): boolean {\n  return isPowerlineGlyph(codepoint) || isBoxOrBlockGlyph(codepoint);\n}\n\nexport function createRenderDimensions(): IRenderDimensions {\n  return {\n    css: {\n      canvas: createDimension(),\n      cell: createDimension()\n    },\n    device: {\n      canvas: createDimension(),\n      cell: createDimension(),\n      char: {\n        width: 0,\n        height: 0,\n        left: 0,\n        top: 0\n      }\n    }\n  };\n}\n\nfunction createDimension(): IDimensions {\n  return {\n    width: 0,\n    height: 0\n  };\n}\n\nexport function computeNextVariantOffset(cellWidth: number, lineWidth: number, currentOffset: number = 0): number {\n  return (cellWidth - (Math.round(lineWidth) * 2 - currentOffset)) % (Math.round(lineWidth) * 2);\n}\n", "/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ITerminal } from 'browser/Types';\nimport { ISelectionRenderModel } from 'browser/renderer/shared/Types';\nimport { Terminal } from '@xterm/xterm';\n\nclass SelectionRenderModel implements ISelectionRenderModel {\n  public hasSelection!: boolean;\n  public columnSelectMode!: boolean;\n  public viewportStartRow!: number;\n  public viewportEndRow!: number;\n  public viewportCappedStartRow!: number;\n  public viewportCappedEndRow!: number;\n  public startCol!: number;\n  public endCol!: number;\n  public selectionStart: [number, number] | undefined;\n  public selectionEnd: [number, number] | undefined;\n\n  constructor() {\n    this.clear();\n  }\n\n  public clear(): void {\n    this.hasSelection = false;\n    this.columnSelectMode = false;\n    this.viewportStartRow = 0;\n    this.viewportEndRow = 0;\n    this.viewportCappedStartRow = 0;\n    this.viewportCappedEndRow = 0;\n    this.startCol = 0;\n    this.endCol = 0;\n    this.selectionStart = undefined;\n    this.selectionEnd = undefined;\n  }\n\n  public update(terminal: ITerminal, start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean = false): void {\n    this.selectionStart = start;\n    this.selectionEnd = end;\n    // Selection does not exist\n    if (!start || !end || (start[0] === end[0] && start[1] === end[1])) {\n      this.clear();\n      return;\n    }\n\n    // Translate from buffer position to viewport position\n    const viewportY = terminal.buffers.active.ydisp;\n    const viewportStartRow = start[1] - viewportY;\n    const viewportEndRow = end[1] - viewportY;\n    const viewportCappedStartRow = Math.max(viewportStartRow, 0);\n    const viewportCappedEndRow = Math.min(viewportEndRow, terminal.rows - 1);\n\n    // No need to draw the selection\n    if (viewportCappedStartRow >= terminal.rows || viewportCappedEndRow < 0) {\n      this.clear();\n      return;\n    }\n\n    this.hasSelection = true;\n    this.columnSelectMode = columnSelectMode;\n    this.viewportStartRow = viewportStartRow;\n    this.viewportEndRow = viewportEndRow;\n    this.viewportCappedStartRow = viewportCappedStartRow;\n    this.viewportCappedEndRow = viewportCappedEndRow;\n    this.startCol = start[0];\n    this.endCol = end[0];\n  }\n\n  public isCellSelected(terminal: Terminal, x: number, y: number): boolean {\n    if (!this.hasSelection) {\n      return false;\n    }\n    y -= terminal.buffer.active.viewportY;\n    if (this.columnSelectMode) {\n      if (this.startCol <= this.endCol) {\n        return x >= this.startCol && y >= this.viewportCappedStartRow &&\n          x < this.endCol && y <= this.viewportCappedEndRow;\n      }\n      return x < this.startCol && y >= this.viewportCappedStartRow &&\n        x >= this.endCol && y <= this.viewportCappedEndRow;\n    }\n    return (y > this.viewportStartRow && y < this.viewportEndRow) ||\n      (this.viewportStartRow === this.viewportEndRow && y === this.viewportStartRow && x >= this.startCol && x < this.endCol) ||\n      (this.viewportStartRow < this.viewportEndRow && y === this.viewportEndRow && x < this.endCol) ||\n      (this.viewportStartRow < this.viewportEndRow && y === this.viewportStartRow && x >= this.startCol);\n  }\n}\n\nexport function createSelectionRenderModel(): ISelectionRenderModel {\n  return new SelectionRenderModel();\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferService } from 'common/services/Services';\n\n/**\n * Represents a selection within the buffer. This model only cares about column\n * and row coordinates, not wide characters.\n */\nexport class SelectionModel {\n  /**\n   * Whether select all is currently active.\n   */\n  public isSelectAllActive: boolean = false;\n\n  /**\n   * The minimal length of the selection from the start position. When double\n   * clicking on a word, the word will be selected which makes the selection\n   * start at the start of the word and makes this variable the length.\n   */\n  public selectionStartLength: number = 0;\n\n  /**\n   * The [x, y] position the selection starts at.\n   */\n  public selectionStart: [number, number] | undefined;\n\n  /**\n   * The [x, y] position the selection ends at.\n   */\n  public selectionEnd: [number, number] | undefined;\n\n  constructor(\n    private _bufferService: IBufferService\n  ) {\n  }\n\n  /**\n   * Clears the current selection.\n   */\n  public clearSelection(): void {\n    this.selectionStart = undefined;\n    this.selectionEnd = undefined;\n    this.isSelectAllActive = false;\n    this.selectionStartLength = 0;\n  }\n\n  /**\n   * The final selection start, taking into consideration select all.\n   */\n  public get finalSelectionStart(): [number, number] | undefined {\n    if (this.isSelectAllActive) {\n      return [0, 0];\n    }\n\n    if (!this.selectionEnd || !this.selectionStart) {\n      return this.selectionStart;\n    }\n\n    return this.areSelectionValuesReversed() ? this.selectionEnd : this.selectionStart;\n  }\n\n  /**\n   * The final selection end, taking into consideration select all, double click\n   * word selection and triple click line selection.\n   */\n  public get finalSelectionEnd(): [number, number] | undefined {\n    if (this.isSelectAllActive) {\n      return [this._bufferService.cols, this._bufferService.buffer.ybase + this._bufferService.rows - 1];\n    }\n\n    if (!this.selectionStart) {\n      return undefined;\n    }\n\n    // Use the selection start + length if the end doesn't exist or they're reversed\n    if (!this.selectionEnd || this.areSelectionValuesReversed()) {\n      const startPlusLength = this.selectionStart[0] + this.selectionStartLength;\n      if (startPlusLength > this._bufferService.cols) {\n        // Ensure the trailing EOL isn't included when the selection ends on the right edge\n        if (startPlusLength % this._bufferService.cols === 0) {\n          return [this._bufferService.cols, this.selectionStart[1] + Math.floor(startPlusLength / this._bufferService.cols) - 1];\n        }\n        return [startPlusLength % this._bufferService.cols, this.selectionStart[1] + Math.floor(startPlusLength / this._bufferService.cols)];\n      }\n      return [startPlusLength, this.selectionStart[1]];\n    }\n\n    // Ensure the the word/line is selected after a double/triple click\n    if (this.selectionStartLength) {\n      // Select the larger of the two when start and end are on the same line\n      if (this.selectionEnd[1] === this.selectionStart[1]) {\n        // Keep the whole wrapped word/line selected if the content wraps multiple lines\n        const startPlusLength = this.selectionStart[0] + this.selectionStartLength;\n        if (startPlusLength > this._bufferService.cols) {\n          return [startPlusLength % this._bufferService.cols, this.selectionStart[1] + Math.floor(startPlusLength / this._bufferService.cols)];\n        }\n        return [Math.max(startPlusLength, this.selectionEnd[0]), this.selectionEnd[1]];\n      }\n    }\n    return this.selectionEnd;\n  }\n\n  /**\n   * Returns whether the selection start and end are reversed.\n   */\n  public areSelectionValuesReversed(): boolean {\n    const start = this.selectionStart;\n    const end = this.selectionEnd;\n    if (!start || !end) {\n      return false;\n    }\n    return start[1] > end[1] || (start[1] === end[1] && start[0] > end[0]);\n  }\n\n  /**\n   * Handle the buffer being trimmed, adjust the selection position.\n   * @param amount The amount the buffer is being trimmed.\n   * @returns Whether a refresh is necessary.\n   */\n  public handleTrim(amount: number): boolean {\n    // Adjust the selection position based on the trimmed amount.\n    if (this.selectionStart) {\n      this.selectionStart[1] -= amount;\n    }\n    if (this.selectionEnd) {\n      this.selectionEnd[1] -= amount;\n    }\n\n    // The selection has moved off the buffer, clear it.\n    if (this.selectionEnd && this.selectionEnd[1] < 0) {\n      this.clearSelection();\n      return true;\n    }\n\n    // If the selection start is trimmed, ensure the start column is 0.\n    if (this.selectionStart && this.selectionStart[1] < 0) {\n      this.selectionStart[1] = 0;\n    }\n    return false;\n  }\n}\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IOptionsService } from 'common/services/Services';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { ICharSizeService } from 'browser/services/Services';\nimport { Disposable } from 'common/Lifecycle';\n\nexport class CharSizeService extends Disposable implements ICharSizeService {\n  public serviceBrand: undefined;\n\n  public width: number = 0;\n  public height: number = 0;\n  private _measureStrategy: IMeasureStrategy;\n\n  public get hasValidSize(): boolean { return this.width > 0 && this.height > 0; }\n\n  private readonly _onCharSizeChange = this.register(new EventEmitter<void>());\n  public readonly onCharSizeChange = this._onCharSizeChange.event;\n\n  constructor(\n    document: Document,\n    parentElement: HTMLElement,\n    @IOptionsService private readonly _optionsService: IOptionsService\n  ) {\n    super();\n    try {\n      this._measureStrategy = this.register(new TextMetricsMeasureStrategy(this._optionsService));\n    } catch {\n      this._measureStrategy = this.register(new DomMeasureStrategy(document, parentElement, this._optionsService));\n    }\n    this.register(this._optionsService.onMultipleOptionChange(['fontFamily', 'fontSize'], () => this.measure()));\n  }\n\n  public measure(): void {\n    const result = this._measureStrategy.measure();\n    if (result.width !== this.width || result.height !== this.height) {\n      this.width = result.width;\n      this.height = result.height;\n      this._onCharSizeChange.fire();\n    }\n  }\n}\n\ninterface IMeasureStrategy {\n  measure(): Readonly<IMeasureResult>;\n}\n\ninterface IMeasureResult {\n  width: number;\n  height: number;\n}\n\nconst enum DomMeasureStrategyConstants {\n  REPEAT = 32\n}\n\nabstract class BaseMeasureStategy extends Disposable implements IMeasureStrategy {\n  protected _result: IMeasureResult = { width: 0, height: 0 };\n\n  protected _validateAndSet(width: number | undefined, height: number | undefined): void {\n    // If values are 0 then the element is likely currently display:none, in which case we should\n    // retain the previous value.\n    if (width !== undefined && width > 0 && height !== undefined && height > 0) {\n      this._result.width = width;\n      this._result.height = height;\n    }\n  }\n\n  public abstract measure(): Readonly<IMeasureResult>;\n}\n\nclass DomMeasureStrategy extends BaseMeasureStategy {\n  private _measureElement: HTMLElement;\n\n  constructor(\n    private _document: Document,\n    private _parentElement: HTMLElement,\n    private _optionsService: IOptionsService\n  ) {\n    super();\n    this._measureElement = this._document.createElement('span');\n    this._measureElement.classList.add('xterm-char-measure-element');\n    this._measureElement.textContent = 'W'.repeat(DomMeasureStrategyConstants.REPEAT);\n    this._measureElement.setAttribute('aria-hidden', 'true');\n    this._measureElement.style.whiteSpace = 'pre';\n    this._measureElement.style.fontKerning = 'none';\n    this._parentElement.appendChild(this._measureElement);\n  }\n\n  public measure(): Readonly<IMeasureResult> {\n    this._measureElement.style.fontFamily = this._optionsService.rawOptions.fontFamily;\n    this._measureElement.style.fontSize = `${this._optionsService.rawOptions.fontSize}px`;\n\n    // Note that this triggers a synchronous layout\n    this._validateAndSet(Number(this._measureElement.offsetWidth) / DomMeasureStrategyConstants.REPEAT, Number(this._measureElement.offsetHeight));\n\n    return this._result;\n  }\n}\n\nclass TextMetricsMeasureStrategy extends BaseMeasureStategy {\n  private _canvas: OffscreenCanvas;\n  private _ctx: OffscreenCanvasRenderingContext2D;\n\n  constructor(\n    private _optionsService: IOptionsService\n  ) {\n    super();\n    // This will throw if any required API is not supported\n    this._canvas = new OffscreenCanvas(100, 100);\n    this._ctx = this._canvas.getContext('2d')!;\n    const a = this._ctx.measureText('W');\n    if (!('width' in a && 'fontBoundingBoxAscent' in a && 'fontBoundingBoxDescent' in a)) {\n      throw new Error('Required font metrics not supported');\n    }\n  }\n\n  public measure(): Readonly<IMeasureResult> {\n    this._ctx.font = `${this._optionsService.rawOptions.fontSize}px ${this._optionsService.rawOptions.fontFamily}`;\n    const metrics = this._ctx.measureText('W');\n    this._validateAndSet(metrics.width, metrics.fontBoundingBoxAscent + metrics.fontBoundingBoxDescent);\n    return this._result;\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferLine, ICellData, CharData } from 'common/Types';\nimport { ICharacterJoiner } from 'browser/Types';\nimport { AttributeData } from 'common/buffer/AttributeData';\nimport { WHITESPACE_CELL_CHAR, Content } from 'common/buffer/Constants';\nimport { CellData } from 'common/buffer/CellData';\nimport { IBufferService } from 'common/services/Services';\nimport { ICharacterJoinerService } from 'browser/services/Services';\n\nexport class JoinedCellData extends AttributeData implements ICellData {\n  private _width: number;\n  // .content carries no meaning for joined CellData, simply nullify it\n  // thus we have to overload all other .content accessors\n  public content: number = 0;\n  public fg: number;\n  public bg: number;\n  public combinedData: string = '';\n\n  constructor(firstCell: ICellData, chars: string, width: number) {\n    super();\n    this.fg = firstCell.fg;\n    this.bg = firstCell.bg;\n    this.combinedData = chars;\n    this._width = width;\n  }\n\n  public isCombined(): number {\n    // always mark joined cell data as combined\n    return Content.IS_COMBINED_MASK;\n  }\n\n  public getWidth(): number {\n    return this._width;\n  }\n\n  public getChars(): string {\n    return this.combinedData;\n  }\n\n  public getCode(): number {\n    // code always gets the highest possible fake codepoint (read as -1)\n    // this is needed as code is used by caches as identifier\n    return 0x1FFFFF;\n  }\n\n  public setFromCharData(value: CharData): void {\n    throw new Error('not implemented');\n  }\n\n  public getAsCharData(): CharData {\n    return [this.fg, this.getChars(), this.getWidth(), this.getCode()];\n  }\n}\n\nexport class CharacterJoinerService implements ICharacterJoinerService {\n  public serviceBrand: undefined;\n\n  private _characterJoiners: ICharacterJoiner[] = [];\n  private _nextCharacterJoinerId: number = 0;\n  private _workCell: CellData = new CellData();\n\n  constructor(\n    @IBufferService private _bufferService: IBufferService\n  ) { }\n\n  public register(handler: (text: string) => [number, number][]): number {\n    const joiner: ICharacterJoiner = {\n      id: this._nextCharacterJoinerId++,\n      handler\n    };\n\n    this._characterJoiners.push(joiner);\n    return joiner.id;\n  }\n\n  public deregister(joinerId: number): boolean {\n    for (let i = 0; i < this._characterJoiners.length; i++) {\n      if (this._characterJoiners[i].id === joinerId) {\n        this._characterJoiners.splice(i, 1);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public getJoinedCharacters(row: number): [number, number][] {\n    if (this._characterJoiners.length === 0) {\n      return [];\n    }\n\n    const line = this._bufferService.buffer.lines.get(row);\n    if (!line || line.length === 0) {\n      return [];\n    }\n\n    const ranges: [number, number][] = [];\n    const lineStr = line.translateToString(true);\n\n    // Because some cells can be represented by multiple javascript characters,\n    // we track the cell and the string indexes separately. This allows us to\n    // translate the string ranges we get from the joiners back into cell ranges\n    // for use when rendering\n    let rangeStartColumn = 0;\n    let currentStringIndex = 0;\n    let rangeStartStringIndex = 0;\n    let rangeAttrFG = line.getFg(0);\n    let rangeAttrBG = line.getBg(0);\n\n    for (let x = 0; x < line.getTrimmedLength(); x++) {\n      line.loadCell(x, this._workCell);\n\n      if (this._workCell.getWidth() === 0) {\n        // If this character is of width 0, skip it.\n        continue;\n      }\n\n      // End of range\n      if (this._workCell.fg !== rangeAttrFG || this._workCell.bg !== rangeAttrBG) {\n        // If we ended up with a sequence of more than one character,\n        // look for ranges to join.\n        if (x - rangeStartColumn > 1) {\n          const joinedRanges = this._getJoinedRanges(\n            lineStr,\n            rangeStartStringIndex,\n            currentStringIndex,\n            line,\n            rangeStartColumn\n          );\n          for (let i = 0; i < joinedRanges.length; i++) {\n            ranges.push(joinedRanges[i]);\n          }\n        }\n\n        // Reset our markers for a new range.\n        rangeStartColumn = x;\n        rangeStartStringIndex = currentStringIndex;\n        rangeAttrFG = this._workCell.fg;\n        rangeAttrBG = this._workCell.bg;\n      }\n\n      currentStringIndex += this._workCell.getChars().length || WHITESPACE_CELL_CHAR.length;\n    }\n\n    // Process any trailing ranges.\n    if (this._bufferService.cols - rangeStartColumn > 1) {\n      const joinedRanges = this._getJoinedRanges(\n        lineStr,\n        rangeStartStringIndex,\n        currentStringIndex,\n        line,\n        rangeStartColumn\n      );\n      for (let i = 0; i < joinedRanges.length; i++) {\n        ranges.push(joinedRanges[i]);\n      }\n    }\n\n    return ranges;\n  }\n\n  /**\n   * Given a segment of a line of text, find all ranges of text that should be\n   * joined in a single rendering unit. Ranges are internally converted to\n   * column ranges, rather than string ranges.\n   * @param line String representation of the full line of text\n   * @param startIndex Start position of the range to search in the string (inclusive)\n   * @param endIndex End position of the range to search in the string (exclusive)\n   */\n  private _getJoinedRanges(line: string, startIndex: number, endIndex: number, lineData: IBufferLine, startCol: number): [number, number][] {\n    const text = line.substring(startIndex, endIndex);\n    // At this point we already know that there is at least one joiner so\n    // we can just pull its value and assign it directly rather than\n    // merging it into an empty array, which incurs unnecessary writes.\n    let allJoinedRanges: [number, number][] = [];\n    try {\n      allJoinedRanges = this._characterJoiners[0].handler(text);\n    } catch (error) {\n      console.error(error);\n    }\n    for (let i = 1; i < this._characterJoiners.length; i++) {\n      // We merge any overlapping ranges across the different joiners\n      try {\n        const joinerRanges = this._characterJoiners[i].handler(text);\n        for (let j = 0; j < joinerRanges.length; j++) {\n          CharacterJoinerService._mergeRanges(allJoinedRanges, joinerRanges[j]);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    }\n    this._stringRangesToCellRanges(allJoinedRanges, lineData, startCol);\n    return allJoinedRanges;\n  }\n\n  /**\n   * Modifies the provided ranges in-place to adjust for variations between\n   * string length and cell width so that the range represents a cell range,\n   * rather than the string range the joiner provides.\n   * @param ranges String ranges containing start (inclusive) and end (exclusive) index\n   * @param line Cell data for the relevant line in the terminal\n   * @param startCol Offset within the line to start from\n   */\n  private _stringRangesToCellRanges(ranges: [number, number][], line: IBufferLine, startCol: number): void {\n    let currentRangeIndex = 0;\n    let currentRangeStarted = false;\n    let currentStringIndex = 0;\n    let currentRange = ranges[currentRangeIndex];\n\n    // If we got through all of the ranges, stop searching\n    if (!currentRange) {\n      return;\n    }\n\n    for (let x = startCol; x < this._bufferService.cols; x++) {\n      const width = line.getWidth(x);\n      const length = line.getString(x).length || WHITESPACE_CELL_CHAR.length;\n\n      // We skip zero-width characters when creating the string to join the text\n      // so we do the same here\n      if (width === 0) {\n        continue;\n      }\n\n      // Adjust the start of the range\n      if (!currentRangeStarted && currentRange[0] <= currentStringIndex) {\n        currentRange[0] = x;\n        currentRangeStarted = true;\n      }\n\n      // Adjust the end of the range\n      if (currentRange[1] <= currentStringIndex) {\n        currentRange[1] = x;\n\n        // We're finished with this range, so we move to the next one\n        currentRange = ranges[++currentRangeIndex];\n\n        // If there are no more ranges left, stop searching\n        if (!currentRange) {\n          break;\n        }\n\n        // Ranges can be on adjacent characters. Because the end index of the\n        // ranges are exclusive, this means that the index for the start of a\n        // range can be the same as the end index of the previous range. To\n        // account for the start of the next range, we check here just in case.\n        if (currentRange[0] <= currentStringIndex) {\n          currentRange[0] = x;\n          currentRangeStarted = true;\n        } else {\n          currentRangeStarted = false;\n        }\n      }\n\n      // Adjust the string index based on the character length to line up with\n      // the column adjustment\n      currentStringIndex += length;\n    }\n\n    // If there is still a range left at the end, it must extend all the way to\n    // the end of the line.\n    if (currentRange) {\n      currentRange[1] = this._bufferService.cols;\n    }\n  }\n\n  /**\n   * Merges the range defined by the provided start and end into the list of\n   * existing ranges. The merge is done in place on the existing range for\n   * performance and is also returned.\n   * @param ranges Existing range list\n   * @param newRange Tuple of two numbers representing the new range to merge in.\n   * @returns The ranges input with the new range merged in place\n   */\n  private static _mergeRanges(ranges: [number, number][], newRange: [number, number]): [number, number][] {\n    let inRange = false;\n    for (let i = 0; i < ranges.length; i++) {\n      const range = ranges[i];\n      if (!inRange) {\n        if (newRange[1] <= range[0]) {\n          // Case 1: New range is before the search range\n          ranges.splice(i, 0, newRange);\n          return ranges;\n        }\n\n        if (newRange[1] <= range[1]) {\n          // Case 2: New range is either wholly contained within the\n          // search range or overlaps with the front of it\n          range[0] = Math.min(newRange[0], range[0]);\n          return ranges;\n        }\n\n        if (newRange[0] < range[1]) {\n          // Case 3: New range either wholly contains the search range\n          // or overlaps with the end of it\n          range[0] = Math.min(newRange[0], range[0]);\n          inRange = true;\n        }\n\n        // Case 4: New range starts after the search range\n        continue;\n      } else {\n        if (newRange[1] <= range[0]) {\n          // Case 5: New range extends from previous range but doesn't\n          // reach the current one\n          ranges[i - 1][1] = newRange[1];\n          return ranges;\n        }\n\n        if (newRange[1] <= range[1]) {\n          // Case 6: New range extends from prvious range into the\n          // current range\n          ranges[i - 1][1] = Math.max(newRange[1], range[1]);\n          ranges.splice(i, 1);\n          return ranges;\n        }\n\n        // Case 7: New range extends from previous range past the\n        // end of the current range\n        ranges.splice(i, 1);\n        i--;\n      }\n    }\n\n    if (inRange) {\n      // Case 8: New range extends past the last existing range\n      ranges[ranges.length - 1][1] = newRange[1];\n    } else {\n      // Case 9: New range starts after the last existing range\n      ranges.push(newRange);\n    }\n\n    return ranges;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Disposable, MutableDisposable, toDisposable } from 'common/Lifecycle';\nimport { ICoreBrowserService } from './Services';\nimport { EventEmitter, forwardEvent } from 'common/EventEmitter';\nimport { addDisposableDomListener } from 'browser/Lifecycle';\n\nexport class CoreBrowserService extends Disposable implements ICoreBrowserService {\n  public serviceBrand: undefined;\n\n  private _isFocused = false;\n  private _cachedIsFocused: boolean | undefined = undefined;\n  private _screenDprMonitor = new ScreenDprMonitor(this._window);\n\n  private readonly _onDprChange = this.register(new EventEmitter<number>());\n  public readonly onDprChange = this._onDprChange.event;\n  private readonly _onWindowChange = this.register(new EventEmitter<Window & typeof globalThis>());\n  public readonly onWindowChange = this._onWindowChange.event;\n\n  constructor(\n    private _textarea: HTMLTextAreaElement,\n    private _window: Window & typeof globalThis,\n    public readonly mainDocument: Document\n  ) {\n    super();\n\n    // Monitor device pixel ratio\n    this.register(this.onWindowChange(w => this._screenDprMonitor.setWindow(w)));\n    this.register(forwardEvent(this._screenDprMonitor.onDprChange, this._onDprChange));\n\n    this._textarea.addEventListener('focus', () => this._isFocused = true);\n    this._textarea.addEventListener('blur', () => this._isFocused = false);\n  }\n\n  public get window(): Window & typeof globalThis {\n    return this._window;\n  }\n\n  public set window(value: Window & typeof globalThis) {\n    if (this._window !== value) {\n      this._window = value;\n      this._onWindowChange.fire(this._window);\n    }\n  }\n\n  public get dpr(): number {\n    return this.window.devicePixelRatio;\n  }\n\n  public get isFocused(): boolean {\n    if (this._cachedIsFocused === undefined) {\n      this._cachedIsFocused = this._isFocused && this._textarea.ownerDocument.hasFocus();\n      queueMicrotask(() => this._cachedIsFocused = undefined);\n    }\n    return this._cachedIsFocused;\n  }\n}\n\n\n/**\n * The screen device pixel ratio monitor allows listening for when the\n * window.devicePixelRatio value changes. This is done not with polling but with\n * the use of window.matchMedia to watch media queries. When the event fires,\n * the listener will be reattached using a different media query to ensure that\n * any further changes will register.\n *\n * The listener should fire on both window zoom changes and switching to a\n * monitor with a different DPI.\n */\nclass ScreenDprMonitor extends Disposable {\n  private _currentDevicePixelRatio: number;\n  private _outerListener: ((this: MediaQueryList, ev: MediaQueryListEvent) => any) | undefined;\n  private _resolutionMediaMatchList: MediaQueryList | undefined;\n  private _windowResizeListener = this.register(new MutableDisposable());\n\n  private readonly _onDprChange = this.register(new EventEmitter<number>());\n  public readonly onDprChange = this._onDprChange.event;\n\n  constructor(private _parentWindow: Window) {\n    super();\n\n    // Initialize listener and dpr value\n    this._outerListener = () => this._setDprAndFireIfDiffers();\n    this._currentDevicePixelRatio = this._parentWindow.devicePixelRatio;\n    this._updateDpr();\n\n    // Monitor active window resize\n    this._setWindowResizeListener();\n\n    // Setup additional disposables\n    this.register(toDisposable(() => this.clearListener()));\n  }\n\n\n  public setWindow(parentWindow: Window): void {\n    this._parentWindow = parentWindow;\n    this._setWindowResizeListener();\n    this._setDprAndFireIfDiffers();\n  }\n\n  private _setWindowResizeListener(): void {\n    this._windowResizeListener.value = addDisposableDomListener(this._parentWindow, 'resize', () => this._setDprAndFireIfDiffers());\n  }\n\n  private _setDprAndFireIfDiffers(): void {\n    if (this._parentWindow.devicePixelRatio !== this._currentDevicePixelRatio) {\n      this._onDprChange.fire(this._parentWindow.devicePixelRatio);\n    }\n    this._updateDpr();\n  }\n\n  private _updateDpr(): void {\n    if (!this._outerListener) {\n      return;\n    }\n\n    // Clear listeners for old DPR\n    this._resolutionMediaMatchList?.removeListener(this._outerListener);\n\n    // Add listeners for new DPR\n    this._currentDevicePixelRatio = this._parentWindow.devicePixelRatio;\n    this._resolutionMediaMatchList = this._parentWindow.matchMedia(`screen and (resolution: ${this._parentWindow.devicePixelRatio}dppx)`);\n    this._resolutionMediaMatchList.addListener(this._outerListener);\n  }\n\n  public clearListener(): void {\n    if (!this._resolutionMediaMatchList || !this._outerListener) {\n      return;\n    }\n    this._resolutionMediaMatchList.removeListener(this._outerListener);\n    this._resolutionMediaMatchList = undefined;\n    this._outerListener = undefined;\n  }\n}\n", "import { ILinkProvider, ILinkProviderService } from 'browser/services/Services';\nimport { Disposable, toDisposable } from 'common/Lifecycle';\nimport { IDisposable } from 'common/Types';\n\nexport class LinkProviderService extends Disposable implements ILinkProviderService {\n  declare public serviceBrand: undefined;\n\n  public readonly linkProviders: ILinkProvider[] = [];\n\n  constructor() {\n    super();\n    this.register(toDisposable(() => this.linkProviders.length = 0));\n  }\n\n  public registerLinkProvider(linkProvider: ILinkProvider): IDisposable {\n    this.linkProviders.push(linkProvider);\n    return {\n      dispose: () => {\n        // Remove the link provider from the list\n        const providerIndex = this.linkProviders.indexOf(linkProvider);\n\n        if (providerIndex !== -1) {\n          this.linkProviders.splice(providerIndex, 1);\n        }\n      }\n    };\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharSizeService, IRenderService, IMouseService } from './Services';\nimport { getCoords, getCoordsRelativeToElement } from 'browser/input/Mouse';\n\nexport class MouseService implements IMouseService {\n  public serviceBrand: undefined;\n\n  constructor(\n    @IRenderService private readonly _renderService: IRenderService,\n    @ICharSizeService private readonly _charSizeService: ICharSizeService\n  ) {\n  }\n\n  public getCoords(event: {clientX: number, clientY: number}, element: HTMLElement, colCount: number, rowCount: number, isSelection?: boolean): [number, number] | undefined {\n    return getCoords(\n      window,\n      event,\n      element,\n      colCount,\n      rowCount,\n      this._charSizeService.hasValidSize,\n      this._renderService.dimensions.css.cell.width,\n      this._renderService.dimensions.css.cell.height,\n      isSelection\n    );\n  }\n\n  public getMouseReportCoords(event: MouseEvent, element: HTMLElement): { col: number, row: number, x: number, y: number } | undefined {\n    const coords = getCoordsRelativeToElement(window, event, element);\n    if (!this._charSizeService.hasValidSize) {\n      return undefined;\n    }\n    coords[0] = Math.min(Math.max(coords[0], 0), this._renderService.dimensions.css.canvas.width - 1);\n    coords[1] = Math.min(Math.max(coords[1], 0), this._renderService.dimensions.css.canvas.height - 1);\n    return {\n      col: Math.floor(coords[0] / this._renderService.dimensions.css.cell.width),\n      row: Math.floor(coords[1] / this._renderService.dimensions.css.cell.height),\n      x: Math.floor(coords[0]),\n      y: Math.floor(coords[1])\n    };\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { RenderDebouncer } from 'browser/RenderDebouncer';\nimport { IRenderDebouncerWithCallback } from 'browser/Types';\nimport { IRenderDimensions, IRenderer } from 'browser/renderer/shared/Types';\nimport { ICharSizeService, ICoreBrowserService, IRenderService, IThemeService } from 'browser/services/Services';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { Disposable, MutableDisposable, toDisposable } from 'common/Lifecycle';\nimport { DebouncedIdleTask } from 'common/TaskQueue';\nimport { IBufferService, IDecorationService, IOptionsService } from 'common/services/Services';\n\ninterface ISelectionState {\n  start: [number, number] | undefined;\n  end: [number, number] | undefined;\n  columnSelectMode: boolean;\n}\n\nexport class RenderService extends Disposable implements IRenderService {\n  public serviceBrand: undefined;\n\n  private _renderer: MutableDisposable<IRenderer> = this.register(new MutableDisposable());\n  private _renderDebouncer: IRenderDebouncerWithCallback;\n  private _pausedResizeTask = new DebouncedIdleTask();\n  private _observerDisposable = this.register(new MutableDisposable());\n\n  private _isPaused: boolean = false;\n  private _needsFullRefresh: boolean = false;\n  private _isNextRenderRedrawOnly: boolean = true;\n  private _needsSelectionRefresh: boolean = false;\n  private _canvasWidth: number = 0;\n  private _canvasHeight: number = 0;\n  private _selectionState: ISelectionState = {\n    start: undefined,\n    end: undefined,\n    columnSelectMode: false\n  };\n\n  private readonly _onDimensionsChange = this.register(new EventEmitter<IRenderDimensions>());\n  public readonly onDimensionsChange = this._onDimensionsChange.event;\n  private readonly _onRenderedViewportChange = this.register(new EventEmitter<{ start: number, end: number }>());\n  public readonly onRenderedViewportChange = this._onRenderedViewportChange.event;\n  private readonly _onRender = this.register(new EventEmitter<{ start: number, end: number }>());\n  public readonly onRender = this._onRender.event;\n  private readonly _onRefreshRequest = this.register(new EventEmitter<{ start: number, end: number }>());\n  public readonly onRefreshRequest = this._onRefreshRequest.event;\n\n  public get dimensions(): IRenderDimensions { return this._renderer.value!.dimensions; }\n\n  constructor(\n    private _rowCount: number,\n    screenElement: HTMLElement,\n    @IOptionsService optionsService: IOptionsService,\n    @ICharSizeService private readonly _charSizeService: ICharSizeService,\n    @IDecorationService decorationService: IDecorationService,\n    @IBufferService bufferService: IBufferService,\n    @ICoreBrowserService coreBrowserService: ICoreBrowserService,\n    @IThemeService themeService: IThemeService\n  ) {\n    super();\n\n    this._renderDebouncer = new RenderDebouncer((start, end) => this._renderRows(start, end), coreBrowserService);\n    this.register(this._renderDebouncer);\n\n    this.register(coreBrowserService.onDprChange(() => this.handleDevicePixelRatioChange()));\n\n    this.register(bufferService.onResize(() => this._fullRefresh()));\n    this.register(bufferService.buffers.onBufferActivate(() => this._renderer.value?.clear()));\n    this.register(optionsService.onOptionChange(() => this._handleOptionsChanged()));\n    this.register(this._charSizeService.onCharSizeChange(() => this.handleCharSizeChanged()));\n\n    // Do a full refresh whenever any decoration is added or removed. This may not actually result\n    // in changes but since decorations should be used sparingly or added/removed all in the same\n    // frame this should have minimal performance impact.\n    this.register(decorationService.onDecorationRegistered(() => this._fullRefresh()));\n    this.register(decorationService.onDecorationRemoved(() => this._fullRefresh()));\n\n    // Clear the renderer when the a change that could affect glyphs occurs\n    this.register(optionsService.onMultipleOptionChange([\n      'customGlyphs',\n      'drawBoldTextInBrightColors',\n      'letterSpacing',\n      'lineHeight',\n      'fontFamily',\n      'fontSize',\n      'fontWeight',\n      'fontWeightBold',\n      'minimumContrastRatio',\n      'rescaleOverlappingGlyphs'\n    ], () => {\n      this.clear();\n      this.handleResize(bufferService.cols, bufferService.rows);\n      this._fullRefresh();\n    }));\n\n    // Refresh the cursor line when the cursor changes\n    this.register(optionsService.onMultipleOptionChange([\n      'cursorBlink',\n      'cursorStyle'\n    ], () => this.refreshRows(bufferService.buffer.y, bufferService.buffer.y, true)));\n\n    this.register(themeService.onChangeColors(() => this._fullRefresh()));\n\n    this._registerIntersectionObserver(coreBrowserService.window, screenElement);\n    this.register(coreBrowserService.onWindowChange((w) => this._registerIntersectionObserver(w, screenElement)));\n  }\n\n  private _registerIntersectionObserver(w: Window & typeof globalThis, screenElement: HTMLElement): void {\n    // Detect whether IntersectionObserver is detected and enable renderer pause\n    // and resume based on terminal visibility if so\n    if ('IntersectionObserver' in w) {\n      const observer = new w.IntersectionObserver(e => this._handleIntersectionChange(e[e.length - 1]), { threshold: 0 });\n      observer.observe(screenElement);\n      this._observerDisposable.value = toDisposable(() => observer.disconnect());\n    }\n  }\n\n  private _handleIntersectionChange(entry: IntersectionObserverEntry): void {\n    this._isPaused = entry.isIntersecting === undefined ? (entry.intersectionRatio === 0) : !entry.isIntersecting;\n\n    // Terminal was hidden on open\n    if (!this._isPaused && !this._charSizeService.hasValidSize) {\n      this._charSizeService.measure();\n    }\n\n    if (!this._isPaused && this._needsFullRefresh) {\n      this._pausedResizeTask.flush();\n      this.refreshRows(0, this._rowCount - 1);\n      this._needsFullRefresh = false;\n    }\n  }\n\n  public refreshRows(start: number, end: number, isRedrawOnly: boolean = false): void {\n    if (this._isPaused) {\n      this._needsFullRefresh = true;\n      return;\n    }\n    if (!isRedrawOnly) {\n      this._isNextRenderRedrawOnly = false;\n    }\n    this._renderDebouncer.refresh(start, end, this._rowCount);\n  }\n\n  private _renderRows(start: number, end: number): void {\n    if (!this._renderer.value) {\n      return;\n    }\n\n    // Since this is debounced, a resize event could have happened between the time a refresh was\n    // requested and when this triggers. Clamp the values of start and end to ensure they're valid\n    // given the current viewport state.\n    start = Math.min(start, this._rowCount - 1);\n    end = Math.min(end, this._rowCount - 1);\n\n    // Render\n    this._renderer.value.renderRows(start, end);\n\n    // Update selection if needed\n    if (this._needsSelectionRefresh) {\n      this._renderer.value.handleSelectionChanged(this._selectionState.start, this._selectionState.end, this._selectionState.columnSelectMode);\n      this._needsSelectionRefresh = false;\n    }\n\n    // Fire render event only if it was not a redraw\n    if (!this._isNextRenderRedrawOnly) {\n      this._onRenderedViewportChange.fire({ start, end });\n    }\n    this._onRender.fire({ start, end });\n    this._isNextRenderRedrawOnly = true;\n  }\n\n  public resize(cols: number, rows: number): void {\n    this._rowCount = rows;\n    this._fireOnCanvasResize();\n  }\n\n  private _handleOptionsChanged(): void {\n    if (!this._renderer.value) {\n      return;\n    }\n    this.refreshRows(0, this._rowCount - 1);\n    this._fireOnCanvasResize();\n  }\n\n  private _fireOnCanvasResize(): void {\n    if (!this._renderer.value) {\n      return;\n    }\n    // Don't fire the event if the dimensions haven't changed\n    if (this._renderer.value.dimensions.css.canvas.width === this._canvasWidth && this._renderer.value.dimensions.css.canvas.height === this._canvasHeight) {\n      return;\n    }\n    this._onDimensionsChange.fire(this._renderer.value.dimensions);\n  }\n\n  public hasRenderer(): boolean {\n    return !!this._renderer.value;\n  }\n\n  public setRenderer(renderer: IRenderer): void {\n    this._renderer.value = renderer;\n    // If the value was not set, the terminal is being disposed so ignore it\n    if (this._renderer.value) {\n      this._renderer.value.onRequestRedraw(e => this.refreshRows(e.start, e.end, true));\n\n      // Force a refresh\n      this._needsSelectionRefresh = true;\n      this._fullRefresh();\n    }\n  }\n\n  public addRefreshCallback(callback: FrameRequestCallback): number {\n    return this._renderDebouncer.addRefreshCallback(callback);\n  }\n\n  private _fullRefresh(): void {\n    if (this._isPaused) {\n      this._needsFullRefresh = true;\n    } else {\n      this.refreshRows(0, this._rowCount - 1);\n    }\n  }\n\n  public clearTextureAtlas(): void {\n    if (!this._renderer.value) {\n      return;\n    }\n    this._renderer.value.clearTextureAtlas?.();\n    this._fullRefresh();\n  }\n\n  public handleDevicePixelRatioChange(): void {\n    // Force char size measurement as DomMeasureStrategy(getBoundingClientRect) is not stable\n    // when devicePixelRatio changes\n    this._charSizeService.measure();\n\n    if (!this._renderer.value) {\n      return;\n    }\n    this._renderer.value.handleDevicePixelRatioChange();\n    this.refreshRows(0, this._rowCount - 1);\n  }\n\n  public handleResize(cols: number, rows: number): void {\n    if (!this._renderer.value) {\n      return;\n    }\n    if (this._isPaused) {\n      this._pausedResizeTask.set(() => this._renderer.value?.handleResize(cols, rows));\n    } else {\n      this._renderer.value.handleResize(cols, rows);\n    }\n    this._fullRefresh();\n  }\n\n  // TODO: Is this useful when we have onResize?\n  public handleCharSizeChanged(): void {\n    this._renderer.value?.handleCharSizeChanged();\n  }\n\n  public handleBlur(): void {\n    this._renderer.value?.handleBlur();\n  }\n\n  public handleFocus(): void {\n    this._renderer.value?.handleFocus();\n  }\n\n  public handleSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean): void {\n    this._selectionState.start = start;\n    this._selectionState.end = end;\n    this._selectionState.columnSelectMode = columnSelectMode;\n    this._renderer.value?.handleSelectionChanged(start, end, columnSelectMode);\n  }\n\n  public handleCursorMove(): void {\n    this._renderer.value?.handleCursorMove();\n  }\n\n  public clear(): void {\n    this._renderer.value?.clear();\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferRange, ILinkifier2 } from 'browser/Types';\nimport { getCoordsRelativeToElement } from 'browser/input/Mouse';\nimport { moveToCellSequence } from 'browser/input/MoveToCell';\nimport { SelectionModel } from 'browser/selection/SelectionModel';\nimport { ISelectionRedrawRequestEvent, ISelectionRequestScrollLinesEvent } from 'browser/selection/Types';\nimport { ICoreBrowserService, IMouseService, IRenderService, ISelectionService } from 'browser/services/Services';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { Disposable, toDisposable } from 'common/Lifecycle';\nimport * as Browser from 'common/Platform';\nimport { IBufferLine, IDisposable } from 'common/Types';\nimport { getRangeLength } from 'common/buffer/BufferRange';\nimport { CellData } from 'common/buffer/CellData';\nimport { IBuffer } from 'common/buffer/Types';\nimport { IBufferService, ICoreService, IOptionsService } from 'common/services/Services';\n\n/**\n * The number of pixels the mouse needs to be above or below the viewport in\n * order to scroll at the maximum speed.\n */\nconst DRAG_SCROLL_MAX_THRESHOLD = 50;\n\n/**\n * The maximum scrolling speed\n */\nconst DRAG_SCROLL_MAX_SPEED = 15;\n\n/**\n * The number of milliseconds between drag scroll updates.\n */\nconst DRAG_SCROLL_INTERVAL = 50;\n\n/**\n * The maximum amount of time that can have elapsed for an alt click to move the\n * cursor.\n */\nconst ALT_CLICK_MOVE_CURSOR_TIME = 500;\n\nconst NON_BREAKING_SPACE_CHAR = String.fromCharCode(160);\nconst ALL_NON_BREAKING_SPACE_REGEX = new RegExp(NON_BREAKING_SPACE_CHAR, 'g');\n\n/**\n * Represents a position of a word on a line.\n */\ninterface IWordPosition {\n  start: number;\n  length: number;\n}\n\n/**\n * A selection mode, this drives how the selection behaves on mouse move.\n */\nexport const enum SelectionMode {\n  NORMAL,\n  WORD,\n  LINE,\n  COLUMN\n}\n\n/**\n * A class that manages the selection of the terminal. With help from\n * SelectionModel, SelectionService handles with all logic associated with\n * dealing with the selection, including handling mouse interaction, wide\n * characters and fetching the actual text within the selection. Rendering is\n * not handled by the SelectionService but the onRedrawRequest event is fired\n * when the selection is ready to be redrawn (on an animation frame).\n */\nexport class SelectionService extends Disposable implements ISelectionService {\n  public serviceBrand: undefined;\n\n  protected _model: SelectionModel;\n\n  /**\n   * The amount to scroll every drag scroll update (depends on how far the mouse\n   * drag is above or below the terminal).\n   */\n  private _dragScrollAmount: number = 0;\n\n  /**\n   * The current selection mode.\n   */\n  protected _activeSelectionMode: SelectionMode;\n\n  /**\n   * A setInterval timer that is active while the mouse is down whose callback\n   * scrolls the viewport when necessary.\n   */\n  private _dragScrollIntervalTimer: number | undefined;\n\n  /**\n   * The animation frame ID used for refreshing the selection.\n   */\n  private _refreshAnimationFrame: number | undefined;\n\n  /**\n   * Whether selection is enabled.\n   */\n  private _enabled = true;\n\n  private _mouseMoveListener: EventListener;\n  private _mouseUpListener: EventListener;\n  private _trimListener: IDisposable;\n  private _workCell: CellData = new CellData();\n\n  private _mouseDownTimeStamp: number = 0;\n  private _oldHasSelection: boolean = false;\n  private _oldSelectionStart: [number, number] | undefined = undefined;\n  private _oldSelectionEnd: [number, number] | undefined = undefined;\n\n  private readonly _onLinuxMouseSelection = this.register(new EventEmitter<string>());\n  public readonly onLinuxMouseSelection = this._onLinuxMouseSelection.event;\n  private readonly _onRedrawRequest = this.register(new EventEmitter<ISelectionRedrawRequestEvent>());\n  public readonly onRequestRedraw = this._onRedrawRequest.event;\n  private readonly _onSelectionChange = this.register(new EventEmitter<void>());\n  public readonly onSelectionChange = this._onSelectionChange.event;\n  private readonly _onRequestScrollLines = this.register(new EventEmitter<ISelectionRequestScrollLinesEvent>());\n  public readonly onRequestScrollLines = this._onRequestScrollLines.event;\n\n  constructor(\n    private readonly _element: HTMLElement,\n    private readonly _screenElement: HTMLElement,\n    private readonly _linkifier: ILinkifier2,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @ICoreService private readonly _coreService: ICoreService,\n    @IMouseService private readonly _mouseService: IMouseService,\n    @IOptionsService private readonly _optionsService: IOptionsService,\n    @IRenderService private readonly _renderService: IRenderService,\n    @ICoreBrowserService private readonly _coreBrowserService: ICoreBrowserService\n  ) {\n    super();\n\n    // Init listeners\n    this._mouseMoveListener = event => this._handleMouseMove(event as MouseEvent);\n    this._mouseUpListener = event => this._handleMouseUp(event as MouseEvent);\n    this._coreService.onUserInput(() => {\n      if (this.hasSelection) {\n        this.clearSelection();\n      }\n    });\n    this._trimListener = this._bufferService.buffer.lines.onTrim(amount => this._handleTrim(amount));\n    this.register(this._bufferService.buffers.onBufferActivate(e => this._handleBufferActivate(e)));\n\n    this.enable();\n\n    this._model = new SelectionModel(this._bufferService);\n    this._activeSelectionMode = SelectionMode.NORMAL;\n\n    this.register(toDisposable(() => {\n      this._removeMouseDownListeners();\n    }));\n  }\n\n  public reset(): void {\n    this.clearSelection();\n  }\n\n  /**\n   * Disables the selection manager. This is useful for when terminal mouse\n   * are enabled.\n   */\n  public disable(): void {\n    this.clearSelection();\n    this._enabled = false;\n  }\n\n  /**\n   * Enable the selection manager.\n   */\n  public enable(): void {\n    this._enabled = true;\n  }\n\n  public get selectionStart(): [number, number] | undefined { return this._model.finalSelectionStart; }\n  public get selectionEnd(): [number, number] | undefined { return this._model.finalSelectionEnd; }\n\n  /**\n   * Gets whether there is an active text selection.\n   */\n  public get hasSelection(): boolean {\n    const start = this._model.finalSelectionStart;\n    const end = this._model.finalSelectionEnd;\n    if (!start || !end) {\n      return false;\n    }\n    return start[0] !== end[0] || start[1] !== end[1];\n  }\n\n  /**\n   * Gets the text currently selected.\n   */\n  public get selectionText(): string {\n    const start = this._model.finalSelectionStart;\n    const end = this._model.finalSelectionEnd;\n    if (!start || !end) {\n      return '';\n    }\n\n    const buffer = this._bufferService.buffer;\n    const result: string[] = [];\n\n    if (this._activeSelectionMode === SelectionMode.COLUMN) {\n      // Ignore zero width selections\n      if (start[0] === end[0]) {\n        return '';\n      }\n\n      // For column selection it's not enough to rely on final selection's swapping of reversed\n      // values, it also needs the x coordinates to swap independently of the y coordinate is needed\n      const startCol = start[0] < end[0] ? start[0] : end[0];\n      const endCol = start[0] < end[0] ? end[0] : start[0];\n      for (let i = start[1]; i <= end[1]; i++) {\n        const lineText = buffer.translateBufferLineToString(i, true, startCol, endCol);\n        result.push(lineText);\n      }\n    } else {\n      // Get first row\n      const startRowEndCol = start[1] === end[1] ? end[0] : undefined;\n      result.push(buffer.translateBufferLineToString(start[1], true, start[0], startRowEndCol));\n\n      // Get middle rows\n      for (let i = start[1] + 1; i <= end[1] - 1; i++) {\n        const bufferLine = buffer.lines.get(i);\n        const lineText = buffer.translateBufferLineToString(i, true);\n        if (bufferLine?.isWrapped) {\n          result[result.length - 1] += lineText;\n        } else {\n          result.push(lineText);\n        }\n      }\n\n      // Get final row\n      if (start[1] !== end[1]) {\n        const bufferLine = buffer.lines.get(end[1]);\n        const lineText = buffer.translateBufferLineToString(end[1], true, 0, end[0]);\n        if (bufferLine && bufferLine!.isWrapped) {\n          result[result.length - 1] += lineText;\n        } else {\n          result.push(lineText);\n        }\n      }\n    }\n\n    // Format string by replacing non-breaking space chars with regular spaces\n    // and joining the array into a multi-line string.\n    const formattedResult = result.map(line => {\n      return line.replace(ALL_NON_BREAKING_SPACE_REGEX, ' ');\n    }).join(Browser.isWindows ? '\\r\\n' : '\\n');\n\n    return formattedResult;\n  }\n\n  /**\n   * Clears the current terminal selection.\n   */\n  public clearSelection(): void {\n    this._model.clearSelection();\n    this._removeMouseDownListeners();\n    this.refresh();\n    this._onSelectionChange.fire();\n  }\n\n  /**\n   * Queues a refresh, redrawing the selection on the next opportunity.\n   * @param isLinuxMouseSelection Whether the selection should be registered as a new\n   * selection on Linux.\n   */\n  public refresh(isLinuxMouseSelection?: boolean): void {\n    // Queue the refresh for the renderer\n    if (!this._refreshAnimationFrame) {\n      this._refreshAnimationFrame = this._coreBrowserService.window.requestAnimationFrame(() => this._refresh());\n    }\n\n    // If the platform is Linux and the refresh call comes from a mouse event,\n    // we need to update the selection for middle click to paste selection.\n    if (Browser.isLinux && isLinuxMouseSelection) {\n      const selectionText = this.selectionText;\n      if (selectionText.length) {\n        this._onLinuxMouseSelection.fire(this.selectionText);\n      }\n    }\n  }\n\n  /**\n   * Fires the refresh event, causing consumers to pick it up and redraw the\n   * selection state.\n   */\n  private _refresh(): void {\n    this._refreshAnimationFrame = undefined;\n    this._onRedrawRequest.fire({\n      start: this._model.finalSelectionStart,\n      end: this._model.finalSelectionEnd,\n      columnSelectMode: this._activeSelectionMode === SelectionMode.COLUMN\n    });\n  }\n\n  /**\n   * Checks if the current click was inside the current selection\n   * @param event The mouse event\n   */\n  private _isClickInSelection(event: MouseEvent): boolean {\n    const coords = this._getMouseBufferCoords(event);\n    const start = this._model.finalSelectionStart;\n    const end = this._model.finalSelectionEnd;\n\n    if (!start || !end || !coords) {\n      return false;\n    }\n\n    return this._areCoordsInSelection(coords, start, end);\n  }\n\n  public isCellInSelection(x: number, y: number): boolean {\n    const start = this._model.finalSelectionStart;\n    const end = this._model.finalSelectionEnd;\n    if (!start || !end) {\n      return false;\n    }\n    return this._areCoordsInSelection([x, y], start, end);\n  }\n\n  protected _areCoordsInSelection(coords: [number, number], start: [number, number], end: [number, number]): boolean {\n    return (coords[1] > start[1] && coords[1] < end[1]) ||\n        (start[1] === end[1] && coords[1] === start[1] && coords[0] >= start[0] && coords[0] < end[0]) ||\n        (start[1] < end[1] && coords[1] === end[1] && coords[0] < end[0]) ||\n        (start[1] < end[1] && coords[1] === start[1] && coords[0] >= start[0]);\n  }\n\n  /**\n   * Selects word at the current mouse event coordinates.\n   * @param event The mouse event.\n   */\n  private _selectWordAtCursor(event: MouseEvent, allowWhitespaceOnlySelection: boolean): boolean {\n    // Check if there is a link under the cursor first and select that if so\n    const range = this._linkifier.currentLink?.link?.range;\n    if (range) {\n      this._model.selectionStart = [range.start.x - 1, range.start.y - 1];\n      this._model.selectionStartLength = getRangeLength(range, this._bufferService.cols);\n      this._model.selectionEnd = undefined;\n      return true;\n    }\n\n    const coords = this._getMouseBufferCoords(event);\n    if (coords) {\n      this._selectWordAt(coords, allowWhitespaceOnlySelection);\n      this._model.selectionEnd = undefined;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Selects all text within the terminal.\n   */\n  public selectAll(): void {\n    this._model.isSelectAllActive = true;\n    this.refresh();\n    this._onSelectionChange.fire();\n  }\n\n  public selectLines(start: number, end: number): void {\n    this._model.clearSelection();\n    start = Math.max(start, 0);\n    end = Math.min(end, this._bufferService.buffer.lines.length - 1);\n    this._model.selectionStart = [0, start];\n    this._model.selectionEnd = [this._bufferService.cols, end];\n    this.refresh();\n    this._onSelectionChange.fire();\n  }\n\n  /**\n   * Handle the buffer being trimmed, adjust the selection position.\n   * @param amount The amount the buffer is being trimmed.\n   */\n  private _handleTrim(amount: number): void {\n    const needsRefresh = this._model.handleTrim(amount);\n    if (needsRefresh) {\n      this.refresh();\n    }\n  }\n\n  /**\n   * Gets the 0-based [x, y] buffer coordinates of the current mouse event.\n   * @param event The mouse event.\n   */\n  private _getMouseBufferCoords(event: MouseEvent): [number, number] | undefined {\n    const coords = this._mouseService.getCoords(event, this._screenElement, this._bufferService.cols, this._bufferService.rows, true);\n    if (!coords) {\n      return undefined;\n    }\n\n    // Convert to 0-based\n    coords[0]--;\n    coords[1]--;\n\n    // Convert viewport coords to buffer coords\n    coords[1] += this._bufferService.buffer.ydisp;\n    return coords;\n  }\n\n  /**\n   * Gets the amount the viewport should be scrolled based on how far out of the\n   * terminal the mouse is.\n   * @param event The mouse event.\n   */\n  private _getMouseEventScrollAmount(event: MouseEvent): number {\n    let offset = getCoordsRelativeToElement(this._coreBrowserService.window, event, this._screenElement)[1];\n    const terminalHeight = this._renderService.dimensions.css.canvas.height;\n    if (offset >= 0 && offset <= terminalHeight) {\n      return 0;\n    }\n    if (offset > terminalHeight) {\n      offset -= terminalHeight;\n    }\n\n    offset = Math.min(Math.max(offset, -DRAG_SCROLL_MAX_THRESHOLD), DRAG_SCROLL_MAX_THRESHOLD);\n    offset /= DRAG_SCROLL_MAX_THRESHOLD;\n    return (offset / Math.abs(offset)) + Math.round(offset * (DRAG_SCROLL_MAX_SPEED - 1));\n  }\n\n  /**\n   * Returns whether the selection manager should force selection, regardless of\n   * whether the terminal is in mouse events mode.\n   * @param event The mouse event.\n   */\n  public shouldForceSelection(event: MouseEvent): boolean {\n    if (Browser.isMac) {\n      return event.altKey && this._optionsService.rawOptions.macOptionClickForcesSelection;\n    }\n\n    return event.shiftKey;\n  }\n\n  /**\n   * Handles te mousedown event, setting up for a new selection.\n   * @param event The mousedown event.\n   */\n  public handleMouseDown(event: MouseEvent): void {\n    this._mouseDownTimeStamp = event.timeStamp;\n    // If we have selection, we want the context menu on right click even if the\n    // terminal is in mouse mode.\n    if (event.button === 2 && this.hasSelection) {\n      return;\n    }\n\n    // Only action the primary button\n    if (event.button !== 0) {\n      return;\n    }\n\n    // Allow selection when using a specific modifier key, even when disabled\n    if (!this._enabled) {\n      if (!this.shouldForceSelection(event)) {\n        return;\n      }\n\n      // Don't send the mouse down event to the current process, we want to select\n      event.stopPropagation();\n    }\n\n    // Tell the browser not to start a regular selection\n    event.preventDefault();\n\n    // Reset drag scroll state\n    this._dragScrollAmount = 0;\n\n    if (this._enabled && event.shiftKey) {\n      this._handleIncrementalClick(event);\n    } else {\n      if (event.detail === 1) {\n        this._handleSingleClick(event);\n      } else if (event.detail === 2) {\n        this._handleDoubleClick(event);\n      } else if (event.detail === 3) {\n        this._handleTripleClick(event);\n      }\n    }\n\n    this._addMouseDownListeners();\n    this.refresh(true);\n  }\n\n  /**\n   * Adds listeners when mousedown is triggered.\n   */\n  private _addMouseDownListeners(): void {\n    // Listen on the document so that dragging outside of viewport works\n    if (this._screenElement.ownerDocument) {\n      this._screenElement.ownerDocument.addEventListener('mousemove', this._mouseMoveListener);\n      this._screenElement.ownerDocument.addEventListener('mouseup', this._mouseUpListener);\n    }\n    this._dragScrollIntervalTimer = this._coreBrowserService.window.setInterval(() => this._dragScroll(), DRAG_SCROLL_INTERVAL);\n  }\n\n  /**\n   * Removes the listeners that are registered when mousedown is triggered.\n   */\n  private _removeMouseDownListeners(): void {\n    if (this._screenElement.ownerDocument) {\n      this._screenElement.ownerDocument.removeEventListener('mousemove', this._mouseMoveListener);\n      this._screenElement.ownerDocument.removeEventListener('mouseup', this._mouseUpListener);\n    }\n    this._coreBrowserService.window.clearInterval(this._dragScrollIntervalTimer);\n    this._dragScrollIntervalTimer = undefined;\n  }\n\n  /**\n   * Performs an incremental click, setting the selection end position to the mouse\n   * position.\n   * @param event The mouse event.\n   */\n  private _handleIncrementalClick(event: MouseEvent): void {\n    if (this._model.selectionStart) {\n      this._model.selectionEnd = this._getMouseBufferCoords(event);\n    }\n  }\n\n  /**\n   * Performs a single click, resetting relevant state and setting the selection\n   * start position.\n   * @param event The mouse event.\n   */\n  private _handleSingleClick(event: MouseEvent): void {\n    this._model.selectionStartLength = 0;\n    this._model.isSelectAllActive = false;\n    this._activeSelectionMode = this.shouldColumnSelect(event) ? SelectionMode.COLUMN : SelectionMode.NORMAL;\n\n    // Initialize the new selection\n    this._model.selectionStart = this._getMouseBufferCoords(event);\n    if (!this._model.selectionStart) {\n      return;\n    }\n    this._model.selectionEnd = undefined;\n\n    // Ensure the line exists\n    const line = this._bufferService.buffer.lines.get(this._model.selectionStart[1]);\n    if (!line) {\n      return;\n    }\n\n    // Return early if the click event is not in the buffer (eg. in scroll bar)\n    if (line.length === this._model.selectionStart[0]) {\n      return;\n    }\n\n    // If the mouse is over the second half of a wide character, adjust the\n    // selection to cover the whole character\n    if (line.hasWidth(this._model.selectionStart[0]) === 0) {\n      this._model.selectionStart[0]++;\n    }\n  }\n\n  /**\n   * Performs a double click, selecting the current word.\n   * @param event The mouse event.\n   */\n  private _handleDoubleClick(event: MouseEvent): void {\n    if (this._selectWordAtCursor(event, true)) {\n      this._activeSelectionMode = SelectionMode.WORD;\n    }\n  }\n\n  /**\n   * Performs a triple click, selecting the current line and activating line\n   * select mode.\n   * @param event The mouse event.\n   */\n  private _handleTripleClick(event: MouseEvent): void {\n    const coords = this._getMouseBufferCoords(event);\n    if (coords) {\n      this._activeSelectionMode = SelectionMode.LINE;\n      this._selectLineAt(coords[1]);\n    }\n  }\n\n  /**\n   * Returns whether the selection manager should operate in column select mode\n   * @param event the mouse or keyboard event\n   */\n  public shouldColumnSelect(event: KeyboardEvent | MouseEvent): boolean {\n    return event.altKey && !(Browser.isMac && this._optionsService.rawOptions.macOptionClickForcesSelection);\n  }\n\n  /**\n   * Handles the mousemove event when the mouse button is down, recording the\n   * end of the selection and refreshing the selection.\n   * @param event The mousemove event.\n   */\n  private _handleMouseMove(event: MouseEvent): void {\n    // If the mousemove listener is active it means that a selection is\n    // currently being made, we should stop propagation to prevent mouse events\n    // to be sent to the pty.\n    event.stopImmediatePropagation();\n\n    // Do nothing if there is no selection start, this can happen if the first\n    // click in the terminal is an incremental click\n    if (!this._model.selectionStart) {\n      return;\n    }\n\n    // Record the previous position so we know whether to redraw the selection\n    // at the end.\n    const previousSelectionEnd = this._model.selectionEnd ? [this._model.selectionEnd[0], this._model.selectionEnd[1]] : null;\n\n    // Set the initial selection end based on the mouse coordinates\n    this._model.selectionEnd = this._getMouseBufferCoords(event);\n    if (!this._model.selectionEnd) {\n      this.refresh(true);\n      return;\n    }\n\n    // Select the entire line if line select mode is active.\n    if (this._activeSelectionMode === SelectionMode.LINE) {\n      if (this._model.selectionEnd[1] < this._model.selectionStart[1]) {\n        this._model.selectionEnd[0] = 0;\n      } else {\n        this._model.selectionEnd[0] = this._bufferService.cols;\n      }\n    } else if (this._activeSelectionMode === SelectionMode.WORD) {\n      this._selectToWordAt(this._model.selectionEnd);\n    }\n\n    // Determine the amount of scrolling that will happen.\n    this._dragScrollAmount = this._getMouseEventScrollAmount(event);\n\n    // If the cursor was above or below the viewport, make sure it's at the\n    // start or end of the viewport respectively. This should only happen when\n    // NOT in column select mode.\n    if (this._activeSelectionMode !== SelectionMode.COLUMN) {\n      if (this._dragScrollAmount > 0) {\n        this._model.selectionEnd[0] = this._bufferService.cols;\n      } else if (this._dragScrollAmount < 0) {\n        this._model.selectionEnd[0] = 0;\n      }\n    }\n\n    // If the character is a wide character include the cell to the right in the\n    // selection. Note that selections at the very end of the line will never\n    // have a character.\n    const buffer = this._bufferService.buffer;\n    if (this._model.selectionEnd[1] < buffer.lines.length) {\n      const line = buffer.lines.get(this._model.selectionEnd[1]);\n      if (line && line.hasWidth(this._model.selectionEnd[0]) === 0) {\n        if (this._model.selectionEnd[0] < this._bufferService.cols) {\n          this._model.selectionEnd[0]++;\n        }\n      }\n    }\n\n    // Only draw here if the selection changes.\n    if (!previousSelectionEnd ||\n      previousSelectionEnd[0] !== this._model.selectionEnd[0] ||\n      previousSelectionEnd[1] !== this._model.selectionEnd[1]) {\n      this.refresh(true);\n    }\n  }\n\n  /**\n   * The callback that occurs every DRAG_SCROLL_INTERVAL ms that does the\n   * scrolling of the viewport.\n   */\n  private _dragScroll(): void {\n    if (!this._model.selectionEnd || !this._model.selectionStart) {\n      return;\n    }\n    if (this._dragScrollAmount) {\n      this._onRequestScrollLines.fire({ amount: this._dragScrollAmount, suppressScrollEvent: false });\n      // Re-evaluate selection\n      // If the cursor was above or below the viewport, make sure it's at the\n      // start or end of the viewport respectively. This should only happen when\n      // NOT in column select mode.\n      const buffer = this._bufferService.buffer;\n      if (this._dragScrollAmount > 0) {\n        if (this._activeSelectionMode !== SelectionMode.COLUMN) {\n          this._model.selectionEnd[0] = this._bufferService.cols;\n        }\n        this._model.selectionEnd[1] = Math.min(buffer.ydisp + this._bufferService.rows, buffer.lines.length - 1);\n      } else {\n        if (this._activeSelectionMode !== SelectionMode.COLUMN) {\n          this._model.selectionEnd[0] = 0;\n        }\n        this._model.selectionEnd[1] = buffer.ydisp;\n      }\n      this.refresh();\n    }\n  }\n\n  /**\n   * Handles the mouseup event, removing the mousedown listeners.\n   * @param event The mouseup event.\n   */\n  private _handleMouseUp(event: MouseEvent): void {\n    const timeElapsed = event.timeStamp - this._mouseDownTimeStamp;\n\n    this._removeMouseDownListeners();\n\n    if (this.selectionText.length <= 1 && timeElapsed < ALT_CLICK_MOVE_CURSOR_TIME && event.altKey && this._optionsService.rawOptions.altClickMovesCursor) {\n      if (this._bufferService.buffer.ybase === this._bufferService.buffer.ydisp) {\n        const coordinates = this._mouseService.getCoords(\n          event,\n          this._element,\n          this._bufferService.cols,\n          this._bufferService.rows,\n          false\n        );\n        if (coordinates && coordinates[0] !== undefined && coordinates[1] !== undefined) {\n          const sequence = moveToCellSequence(coordinates[0] - 1, coordinates[1] - 1, this._bufferService, this._coreService.decPrivateModes.applicationCursorKeys);\n          this._coreService.triggerDataEvent(sequence, true);\n        }\n      }\n    } else {\n      this._fireEventIfSelectionChanged();\n    }\n  }\n\n  private _fireEventIfSelectionChanged(): void {\n    const start = this._model.finalSelectionStart;\n    const end = this._model.finalSelectionEnd;\n    const hasSelection = !!start && !!end && (start[0] !== end[0] || start[1] !== end[1]);\n\n    if (!hasSelection) {\n      if (this._oldHasSelection) {\n        this._fireOnSelectionChange(start, end, hasSelection);\n      }\n      return;\n    }\n\n    // Sanity check, these should not be undefined as there is a selection\n    if (!start || !end) {\n      return;\n    }\n\n    if (!this._oldSelectionStart || !this._oldSelectionEnd || (\n      start[0] !== this._oldSelectionStart[0] || start[1] !== this._oldSelectionStart[1] ||\n      end[0] !== this._oldSelectionEnd[0] || end[1] !== this._oldSelectionEnd[1])) {\n\n      this._fireOnSelectionChange(start, end, hasSelection);\n    }\n  }\n\n  private _fireOnSelectionChange(start: [number, number] | undefined, end: [number, number] | undefined, hasSelection: boolean): void {\n    this._oldSelectionStart = start;\n    this._oldSelectionEnd = end;\n    this._oldHasSelection = hasSelection;\n    this._onSelectionChange.fire();\n  }\n\n  private _handleBufferActivate(e: {activeBuffer: IBuffer, inactiveBuffer: IBuffer}): void {\n    this.clearSelection();\n    // Only adjust the selection on trim, shiftElements is rarely used (only in\n    // reverseIndex) and delete in a splice is only ever used when the same\n    // number of elements was just added. Given this is could actually be\n    // beneficial to leave the selection as is for these cases.\n    this._trimListener.dispose();\n    this._trimListener = e.activeBuffer.lines.onTrim(amount => this._handleTrim(amount));\n  }\n\n  /**\n   * Converts a viewport column (0 to cols - 1) to the character index on the\n   * buffer line, the latter takes into account wide and null characters.\n   * @param bufferLine The buffer line to use.\n   * @param x The x index in the buffer line to convert.\n   */\n  private _convertViewportColToCharacterIndex(bufferLine: IBufferLine, x: number): number {\n    let charIndex = x;\n    for (let i = 0; x >= i; i++) {\n      const length = bufferLine.loadCell(i, this._workCell).getChars().length;\n      if (this._workCell.getWidth() === 0) {\n        // Wide characters aren't included in the line string so decrement the\n        // index so the index is back on the wide character.\n        charIndex--;\n      } else if (length > 1 && x !== i) {\n        // Emojis take up multiple characters, so adjust accordingly. For these\n        // we don't want ot include the character at the column as we're\n        // returning the start index in the string, not the end index.\n        charIndex += length - 1;\n      }\n    }\n    return charIndex;\n  }\n\n  public setSelection(col: number, row: number, length: number): void {\n    this._model.clearSelection();\n    this._removeMouseDownListeners();\n    this._model.selectionStart = [col, row];\n    this._model.selectionStartLength = length;\n    this.refresh();\n    this._fireEventIfSelectionChanged();\n  }\n\n  public rightClickSelect(ev: MouseEvent): void {\n    if (!this._isClickInSelection(ev)) {\n      if (this._selectWordAtCursor(ev, false)) {\n        this.refresh(true);\n      }\n      this._fireEventIfSelectionChanged();\n    }\n  }\n\n  /**\n   * Gets positional information for the word at the coordinated specified.\n   * @param coords The coordinates to get the word at.\n   */\n  private _getWordAt(coords: [number, number], allowWhitespaceOnlySelection: boolean, followWrappedLinesAbove: boolean = true, followWrappedLinesBelow: boolean = true): IWordPosition | undefined {\n    // Ensure coords are within viewport (eg. not within scroll bar)\n    if (coords[0] >= this._bufferService.cols) {\n      return undefined;\n    }\n\n    const buffer = this._bufferService.buffer;\n    const bufferLine = buffer.lines.get(coords[1]);\n    if (!bufferLine) {\n      return undefined;\n    }\n\n    const line = buffer.translateBufferLineToString(coords[1], false);\n\n    // Get actual index, taking into consideration wide characters\n    let startIndex = this._convertViewportColToCharacterIndex(bufferLine, coords[0]);\n    let endIndex = startIndex;\n\n    // Record offset to be used later\n    const charOffset = coords[0] - startIndex;\n    let leftWideCharCount = 0;\n    let rightWideCharCount = 0;\n    let leftLongCharOffset = 0;\n    let rightLongCharOffset = 0;\n\n    if (line.charAt(startIndex) === ' ') {\n      // Expand until non-whitespace is hit\n      while (startIndex > 0 && line.charAt(startIndex - 1) === ' ') {\n        startIndex--;\n      }\n      while (endIndex < line.length && line.charAt(endIndex + 1) === ' ') {\n        endIndex++;\n      }\n    } else {\n      // Expand until whitespace is hit. This algorithm works by scanning left\n      // and right from the starting position, keeping both the index format\n      // (line) and the column format (bufferLine) in sync. When a wide\n      // character is hit, it is recorded and the column index is adjusted.\n      let startCol = coords[0];\n      let endCol = coords[0];\n\n      // Consider the initial position, skip it and increment the wide char\n      // variable\n      if (bufferLine.getWidth(startCol) === 0) {\n        leftWideCharCount++;\n        startCol--;\n      }\n      if (bufferLine.getWidth(endCol) === 2) {\n        rightWideCharCount++;\n        endCol++;\n      }\n\n      // Adjust the end index for characters whose length are > 1 (emojis)\n      const length = bufferLine.getString(endCol).length;\n      if (length > 1) {\n        rightLongCharOffset += length - 1;\n        endIndex += length - 1;\n      }\n\n      // Expand the string in both directions until a space is hit\n      while (startCol > 0 && startIndex > 0 && !this._isCharWordSeparator(bufferLine.loadCell(startCol - 1, this._workCell))) {\n        bufferLine.loadCell(startCol - 1, this._workCell);\n        const length = this._workCell.getChars().length;\n        if (this._workCell.getWidth() === 0) {\n          // If the next character is a wide char, record it and skip the column\n          leftWideCharCount++;\n          startCol--;\n        } else if (length > 1) {\n          // If the next character's string is longer than 1 char (eg. emoji),\n          // adjust the index\n          leftLongCharOffset += length - 1;\n          startIndex -= length - 1;\n        }\n        startIndex--;\n        startCol--;\n      }\n      while (endCol < bufferLine.length && endIndex + 1 < line.length && !this._isCharWordSeparator(bufferLine.loadCell(endCol + 1, this._workCell))) {\n        bufferLine.loadCell(endCol + 1, this._workCell);\n        const length = this._workCell.getChars().length;\n        if (this._workCell.getWidth() === 2) {\n          // If the next character is a wide char, record it and skip the column\n          rightWideCharCount++;\n          endCol++;\n        } else if (length > 1) {\n          // If the next character's string is longer than 1 char (eg. emoji),\n          // adjust the index\n          rightLongCharOffset += length - 1;\n          endIndex += length - 1;\n        }\n        endIndex++;\n        endCol++;\n      }\n    }\n\n    // Incremenet the end index so it is at the start of the next character\n    endIndex++;\n\n    // Calculate the start _column_, converting the the string indexes back to\n    // column coordinates.\n    let start =\n        startIndex // The index of the selection's start char in the line string\n        + charOffset // The difference between the initial char's column and index\n        - leftWideCharCount // The number of wide chars left of the initial char\n        + leftLongCharOffset; // The number of additional chars left of the initial char added by columns with strings longer than 1 (emojis)\n\n    // Calculate the length in _columns_, converting the the string indexes back\n    // to column coordinates.\n    let length = Math.min(this._bufferService.cols, // Disallow lengths larger than the terminal cols\n      endIndex // The index of the selection's end char in the line string\n      - startIndex // The index of the selection's start char in the line string\n      + leftWideCharCount // The number of wide chars left of the initial char\n      + rightWideCharCount // The number of wide chars right of the initial char (inclusive)\n      - leftLongCharOffset // The number of additional chars left of the initial char added by columns with strings longer than 1 (emojis)\n      - rightLongCharOffset); // The number of additional chars right of the initial char (inclusive) added by columns with strings longer than 1 (emojis)\n\n    if (!allowWhitespaceOnlySelection && line.slice(startIndex, endIndex).trim() === '') {\n      return undefined;\n    }\n\n    // Recurse upwards if the line is wrapped and the word wraps to the above line\n    if (followWrappedLinesAbove) {\n      if (start === 0 && bufferLine.getCodePoint(0) !== 32 /* ' ' */) {\n        const previousBufferLine = buffer.lines.get(coords[1] - 1);\n        if (previousBufferLine && bufferLine.isWrapped && previousBufferLine.getCodePoint(this._bufferService.cols - 1) !== 32 /* ' ' */) {\n          const previousLineWordPosition = this._getWordAt([this._bufferService.cols - 1, coords[1] - 1], false, true, false);\n          if (previousLineWordPosition) {\n            const offset = this._bufferService.cols - previousLineWordPosition.start;\n            start -= offset;\n            length += offset;\n          }\n        }\n      }\n    }\n\n    // Recurse downwards if the line is wrapped and the word wraps to the next line\n    if (followWrappedLinesBelow) {\n      if (start + length === this._bufferService.cols && bufferLine.getCodePoint(this._bufferService.cols - 1) !== 32 /* ' ' */) {\n        const nextBufferLine = buffer.lines.get(coords[1] + 1);\n        if (nextBufferLine?.isWrapped && nextBufferLine.getCodePoint(0) !== 32 /* ' ' */) {\n          const nextLineWordPosition = this._getWordAt([0, coords[1] + 1], false, false, true);\n          if (nextLineWordPosition) {\n            length += nextLineWordPosition.length;\n          }\n        }\n      }\n    }\n\n    return { start, length };\n  }\n\n  /**\n   * Selects the word at the coordinates specified.\n   * @param coords The coordinates to get the word at.\n   * @param allowWhitespaceOnlySelection If whitespace should be selected\n   */\n  protected _selectWordAt(coords: [number, number], allowWhitespaceOnlySelection: boolean): void {\n    const wordPosition = this._getWordAt(coords, allowWhitespaceOnlySelection);\n    if (wordPosition) {\n      // Adjust negative start value\n      while (wordPosition.start < 0) {\n        wordPosition.start += this._bufferService.cols;\n        coords[1]--;\n      }\n      this._model.selectionStart = [wordPosition.start, coords[1]];\n      this._model.selectionStartLength = wordPosition.length;\n    }\n  }\n\n  /**\n   * Sets the selection end to the word at the coordinated specified.\n   * @param coords The coordinates to get the word at.\n   */\n  private _selectToWordAt(coords: [number, number]): void {\n    const wordPosition = this._getWordAt(coords, true);\n    if (wordPosition) {\n      let endRow = coords[1];\n\n      // Adjust negative start value\n      while (wordPosition.start < 0) {\n        wordPosition.start += this._bufferService.cols;\n        endRow--;\n      }\n\n      // Adjust wrapped length value, this only needs to happen when values are reversed as in that\n      // case we're interested in the start of the word, not the end\n      if (!this._model.areSelectionValuesReversed()) {\n        while (wordPosition.start + wordPosition.length > this._bufferService.cols) {\n          wordPosition.length -= this._bufferService.cols;\n          endRow++;\n        }\n      }\n\n      this._model.selectionEnd = [this._model.areSelectionValuesReversed() ? wordPosition.start : wordPosition.start + wordPosition.length, endRow];\n    }\n  }\n\n  /**\n   * Gets whether the character is considered a word separator by the select\n   * word logic.\n   * @param cell The cell to check.\n   */\n  private _isCharWordSeparator(cell: CellData): boolean {\n    // Zero width characters are never separators as they are always to the\n    // right of wide characters\n    if (cell.getWidth() === 0) {\n      return false;\n    }\n    return this._optionsService.rawOptions.wordSeparator.indexOf(cell.getChars()) >= 0;\n  }\n\n  /**\n   * Selects the line specified.\n   * @param line The line index.\n   */\n  protected _selectLineAt(line: number): void {\n    const wrappedRange = this._bufferService.buffer.getWrappedRangeForLine(line);\n    const range: IBufferRange = {\n      start: { x: 0, y: wrappedRange.first },\n      end: { x: this._bufferService.cols - 1, y: wrappedRange.last }\n    };\n    this._model.selectionStart = [0, wrappedRange.first];\n    this._model.selectionEnd = undefined;\n    this._model.selectionStartLength = getRangeLength(range, this._bufferService.cols);\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IEvent } from 'common/EventEmitter';\nimport { IRenderDimensions, IRenderer } from 'browser/renderer/shared/Types';\nimport { IColorSet, ILink, ReadonlyColorSet } from 'browser/Types';\nimport { ISelectionRedrawRequestEvent as ISelectionRequestRedrawEvent, ISelectionRequestScrollLinesEvent } from 'browser/selection/Types';\nimport { createDecorator } from 'common/services/ServiceRegistry';\nimport { AllColorIndex, IDisposable } from 'common/Types';\n\nexport const ICharSizeService = createDecorator<ICharSizeService>('CharSizeService');\nexport interface ICharSizeService {\n  serviceBrand: undefined;\n\n  readonly width: number;\n  readonly height: number;\n  readonly hasValidSize: boolean;\n\n  readonly onCharSizeChange: IEvent<void>;\n\n  measure(): void;\n}\n\nexport const ICoreBrowserService = createDecorator<ICoreBrowserService>('CoreBrowserService');\nexport interface ICoreBrowserService {\n  serviceBrand: undefined;\n\n  readonly isFocused: boolean;\n\n  readonly onDprChange: IEvent<number>;\n  readonly onWindowChange: IEvent<Window & typeof globalThis>;\n\n  /**\n   * Gets or sets the parent window that the terminal is rendered into. DOM and rendering APIs (e.g.\n   * requestAnimationFrame) should be invoked in the context of this window. This should be set when\n   * the window hosting the xterm.js instance changes.\n   */\n  window: Window & typeof globalThis;\n  /**\n   * The document of the primary window to be used to create elements when working with multiple\n   * windows. This is defined by the documentOverride setting.\n   */\n  readonly mainDocument: Document;\n  /**\n   * Helper for getting the devicePixelRatio of the parent window.\n   */\n  readonly dpr: number;\n}\n\nexport const IMouseService = createDecorator<IMouseService>('MouseService');\nexport interface IMouseService {\n  serviceBrand: undefined;\n\n  getCoords(event: {clientX: number, clientY: number}, element: HTMLElement, colCount: number, rowCount: number, isSelection?: boolean): [number, number] | undefined;\n  getMouseReportCoords(event: MouseEvent, element: HTMLElement): { col: number, row: number, x: number, y: number } | undefined;\n}\n\nexport const IRenderService = createDecorator<IRenderService>('RenderService');\nexport interface IRenderService extends IDisposable {\n  serviceBrand: undefined;\n\n  onDimensionsChange: IEvent<IRenderDimensions>;\n  /**\n   * Fires when buffer changes are rendered. This does not fire when only cursor\n   * or selections are rendered.\n   */\n  onRenderedViewportChange: IEvent<{ start: number, end: number }>;\n  /**\n   * Fires on render\n   */\n  onRender: IEvent<{ start: number, end: number }>;\n  onRefreshRequest: IEvent<{ start: number, end: number }>;\n\n  dimensions: IRenderDimensions;\n\n  addRefreshCallback(callback: FrameRequestCallback): number;\n\n  refreshRows(start: number, end: number): void;\n  clearTextureAtlas(): void;\n  resize(cols: number, rows: number): void;\n  hasRenderer(): boolean;\n  setRenderer(renderer: IRenderer): void;\n  handleDevicePixelRatioChange(): void;\n  handleResize(cols: number, rows: number): void;\n  handleCharSizeChanged(): void;\n  handleBlur(): void;\n  handleFocus(): void;\n  handleSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean): void;\n  handleCursorMove(): void;\n  clear(): void;\n}\n\nexport const ISelectionService = createDecorator<ISelectionService>('SelectionService');\nexport interface ISelectionService {\n  serviceBrand: undefined;\n\n  readonly selectionText: string;\n  readonly hasSelection: boolean;\n  readonly selectionStart: [number, number] | undefined;\n  readonly selectionEnd: [number, number] | undefined;\n\n  readonly onLinuxMouseSelection: IEvent<string>;\n  readonly onRequestRedraw: IEvent<ISelectionRequestRedrawEvent>;\n  readonly onRequestScrollLines: IEvent<ISelectionRequestScrollLinesEvent>;\n  readonly onSelectionChange: IEvent<void>;\n\n  disable(): void;\n  enable(): void;\n  reset(): void;\n  setSelection(row: number, col: number, length: number): void;\n  selectAll(): void;\n  selectLines(start: number, end: number): void;\n  clearSelection(): void;\n  rightClickSelect(event: MouseEvent): void;\n  shouldColumnSelect(event: KeyboardEvent | MouseEvent): boolean;\n  shouldForceSelection(event: MouseEvent): boolean;\n  refresh(isLinuxMouseSelection?: boolean): void;\n  handleMouseDown(event: MouseEvent): void;\n  isCellInSelection(x: number, y: number): boolean;\n}\n\nexport const ICharacterJoinerService = createDecorator<ICharacterJoinerService>('CharacterJoinerService');\nexport interface ICharacterJoinerService {\n  serviceBrand: undefined;\n\n  register(handler: (text: string) => [number, number][]): number;\n  deregister(joinerId: number): boolean;\n  getJoinedCharacters(row: number): [number, number][];\n}\n\nexport const IThemeService = createDecorator<IThemeService>('ThemeService');\nexport interface IThemeService {\n  serviceBrand: undefined;\n\n  readonly colors: ReadonlyColorSet;\n\n  readonly onChangeColors: IEvent<ReadonlyColorSet>;\n\n  restoreColor(slot?: AllColorIndex): void;\n  /**\n   * Allows external modifying of colors in the theme, this is used instead of {@link colors} to\n   * prevent accidental writes.\n   */\n  modifyColors(callback: (colors: IColorSet) => void): void;\n}\n\n\nexport const ILinkProviderService = createDecorator<ILinkProviderService>('LinkProviderService');\nexport interface ILinkProviderService extends IDisposable {\n  serviceBrand: undefined;\n  readonly linkProviders: ReadonlyArray<ILinkProvider>;\n  registerLinkProvider(linkProvider: ILinkProvider): IDisposable;\n}\nexport interface ILinkProvider {\n  provideLinks(y: number, callback: (links: ILink[] | undefined) => void): void;\n}\n", "/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ColorContrastCache } from 'browser/ColorContrastCache';\nimport { IThemeService } from 'browser/services/Services';\nimport { IColorContrastCache, IColorSet, ReadonlyColorSet } from 'browser/Types';\nimport { channels, color, css, NULL_COLOR } from 'common/Color';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\nimport { IOptionsService, ITheme } from 'common/services/Services';\nimport { AllColorIndex, IColor, SpecialColorIndex } from 'common/Types';\n\ninterface IRestoreColorSet {\n  foreground: IColor;\n  background: IColor;\n  cursor: IColor;\n  ansi: IColor[];\n}\n\n\nconst DEFAULT_FOREGROUND = css.toColor('#ffffff');\nconst DEFAULT_BACKGROUND = css.toColor('#000000');\nconst DEFAULT_CURSOR = css.toColor('#ffffff');\nconst DEFAULT_CURSOR_ACCENT = css.toColor('#000000');\nconst DEFAULT_SELECTION = {\n  css: 'rgba(255, 255, 255, 0.3)',\n  rgba: 0xFFFFFF4D\n};\n\n// An IIFE to generate DEFAULT_ANSI_COLORS.\nexport const DEFAULT_ANSI_COLORS = Object.freeze((() => {\n  const colors = [\n    // dark:\n    css.toColor('#2e3436'),\n    css.toColor('#cc0000'),\n    css.toColor('#4e9a06'),\n    css.toColor('#c4a000'),\n    css.toColor('#3465a4'),\n    css.toColor('#75507b'),\n    css.toColor('#06989a'),\n    css.toColor('#d3d7cf'),\n    // bright:\n    css.toColor('#555753'),\n    css.toColor('#ef2929'),\n    css.toColor('#8ae234'),\n    css.toColor('#fce94f'),\n    css.toColor('#729fcf'),\n    css.toColor('#ad7fa8'),\n    css.toColor('#34e2e2'),\n    css.toColor('#eeeeec')\n  ];\n\n  // Fill in the remaining 240 ANSI colors.\n  // Generate colors (16-231)\n  const v = [0x00, 0x5f, 0x87, 0xaf, 0xd7, 0xff];\n  for (let i = 0; i < 216; i++) {\n    const r = v[(i / 36) % 6 | 0];\n    const g = v[(i / 6) % 6 | 0];\n    const b = v[i % 6];\n    colors.push({\n      css: channels.toCss(r, g, b),\n      rgba: channels.toRgba(r, g, b)\n    });\n  }\n\n  // Generate greys (232-255)\n  for (let i = 0; i < 24; i++) {\n    const c = 8 + i * 10;\n    colors.push({\n      css: channels.toCss(c, c, c),\n      rgba: channels.toRgba(c, c, c)\n    });\n  }\n\n  return colors;\n})());\n\nexport class ThemeService extends Disposable implements IThemeService {\n  public serviceBrand: undefined;\n\n  private _colors: IColorSet;\n  private _contrastCache: IColorContrastCache = new ColorContrastCache();\n  private _halfContrastCache: IColorContrastCache = new ColorContrastCache();\n  private _restoreColors!: IRestoreColorSet;\n\n  public get colors(): ReadonlyColorSet { return this._colors; }\n\n  private readonly _onChangeColors = this.register(new EventEmitter<ReadonlyColorSet>());\n  public readonly onChangeColors = this._onChangeColors.event;\n\n  constructor(\n    @IOptionsService private readonly _optionsService: IOptionsService\n  ) {\n    super();\n\n    this._colors = {\n      foreground: DEFAULT_FOREGROUND,\n      background: DEFAULT_BACKGROUND,\n      cursor: DEFAULT_CURSOR,\n      cursorAccent: DEFAULT_CURSOR_ACCENT,\n      selectionForeground: undefined,\n      selectionBackgroundTransparent: DEFAULT_SELECTION,\n      selectionBackgroundOpaque: color.blend(DEFAULT_BACKGROUND, DEFAULT_SELECTION),\n      selectionInactiveBackgroundTransparent: DEFAULT_SELECTION,\n      selectionInactiveBackgroundOpaque: color.blend(DEFAULT_BACKGROUND, DEFAULT_SELECTION),\n      ansi: DEFAULT_ANSI_COLORS.slice(),\n      contrastCache: this._contrastCache,\n      halfContrastCache: this._halfContrastCache\n    };\n    this._updateRestoreColors();\n    this._setTheme(this._optionsService.rawOptions.theme);\n\n    this.register(this._optionsService.onSpecificOptionChange('minimumContrastRatio', () => this._contrastCache.clear()));\n    this.register(this._optionsService.onSpecificOptionChange('theme', () => this._setTheme(this._optionsService.rawOptions.theme)));\n  }\n\n  /**\n   * Sets the terminal's theme.\n   * @param theme The  theme to use. If a partial theme is provided then default\n   * colors will be used where colors are not defined.\n   */\n  private _setTheme(theme: ITheme = {}): void {\n    const colors = this._colors;\n    colors.foreground = parseColor(theme.foreground, DEFAULT_FOREGROUND);\n    colors.background = parseColor(theme.background, DEFAULT_BACKGROUND);\n    colors.cursor = parseColor(theme.cursor, DEFAULT_CURSOR);\n    colors.cursorAccent = parseColor(theme.cursorAccent, DEFAULT_CURSOR_ACCENT);\n    colors.selectionBackgroundTransparent = parseColor(theme.selectionBackground, DEFAULT_SELECTION);\n    colors.selectionBackgroundOpaque = color.blend(colors.background, colors.selectionBackgroundTransparent);\n    colors.selectionInactiveBackgroundTransparent = parseColor(theme.selectionInactiveBackground, colors.selectionBackgroundTransparent);\n    colors.selectionInactiveBackgroundOpaque = color.blend(colors.background, colors.selectionInactiveBackgroundTransparent);\n    colors.selectionForeground = theme.selectionForeground ? parseColor(theme.selectionForeground, NULL_COLOR) : undefined;\n    if (colors.selectionForeground === NULL_COLOR) {\n      colors.selectionForeground = undefined;\n    }\n\n    /**\n     * If selection color is opaque, blend it with background with 0.3 opacity\n     * Issue #2737\n     */\n    if (color.isOpaque(colors.selectionBackgroundTransparent)) {\n      const opacity = 0.3;\n      colors.selectionBackgroundTransparent = color.opacity(colors.selectionBackgroundTransparent, opacity);\n    }\n    if (color.isOpaque(colors.selectionInactiveBackgroundTransparent)) {\n      const opacity = 0.3;\n      colors.selectionInactiveBackgroundTransparent = color.opacity(colors.selectionInactiveBackgroundTransparent, opacity);\n    }\n    colors.ansi = DEFAULT_ANSI_COLORS.slice();\n    colors.ansi[0] = parseColor(theme.black, DEFAULT_ANSI_COLORS[0]);\n    colors.ansi[1] = parseColor(theme.red, DEFAULT_ANSI_COLORS[1]);\n    colors.ansi[2] = parseColor(theme.green, DEFAULT_ANSI_COLORS[2]);\n    colors.ansi[3] = parseColor(theme.yellow, DEFAULT_ANSI_COLORS[3]);\n    colors.ansi[4] = parseColor(theme.blue, DEFAULT_ANSI_COLORS[4]);\n    colors.ansi[5] = parseColor(theme.magenta, DEFAULT_ANSI_COLORS[5]);\n    colors.ansi[6] = parseColor(theme.cyan, DEFAULT_ANSI_COLORS[6]);\n    colors.ansi[7] = parseColor(theme.white, DEFAULT_ANSI_COLORS[7]);\n    colors.ansi[8] = parseColor(theme.brightBlack, DEFAULT_ANSI_COLORS[8]);\n    colors.ansi[9] = parseColor(theme.brightRed, DEFAULT_ANSI_COLORS[9]);\n    colors.ansi[10] = parseColor(theme.brightGreen, DEFAULT_ANSI_COLORS[10]);\n    colors.ansi[11] = parseColor(theme.brightYellow, DEFAULT_ANSI_COLORS[11]);\n    colors.ansi[12] = parseColor(theme.brightBlue, DEFAULT_ANSI_COLORS[12]);\n    colors.ansi[13] = parseColor(theme.brightMagenta, DEFAULT_ANSI_COLORS[13]);\n    colors.ansi[14] = parseColor(theme.brightCyan, DEFAULT_ANSI_COLORS[14]);\n    colors.ansi[15] = parseColor(theme.brightWhite, DEFAULT_ANSI_COLORS[15]);\n    if (theme.extendedAnsi) {\n      const colorCount = Math.min(colors.ansi.length - 16, theme.extendedAnsi.length);\n      for (let i = 0; i < colorCount; i++) {\n        colors.ansi[i + 16] = parseColor(theme.extendedAnsi[i], DEFAULT_ANSI_COLORS[i + 16]);\n      }\n    }\n    // Clear our the cache\n    this._contrastCache.clear();\n    this._halfContrastCache.clear();\n    this._updateRestoreColors();\n    this._onChangeColors.fire(this.colors);\n  }\n\n  public restoreColor(slot?: AllColorIndex): void {\n    this._restoreColor(slot);\n    this._onChangeColors.fire(this.colors);\n  }\n\n  private _restoreColor(slot: AllColorIndex | undefined): void {\n    // unset slot restores all ansi colors\n    if (slot === undefined) {\n      for (let i = 0; i < this._restoreColors.ansi.length; ++i) {\n        this._colors.ansi[i] = this._restoreColors.ansi[i];\n      }\n      return;\n    }\n    switch (slot) {\n      case SpecialColorIndex.FOREGROUND:\n        this._colors.foreground = this._restoreColors.foreground;\n        break;\n      case SpecialColorIndex.BACKGROUND:\n        this._colors.background = this._restoreColors.background;\n        break;\n      case SpecialColorIndex.CURSOR:\n        this._colors.cursor = this._restoreColors.cursor;\n        break;\n      default:\n        this._colors.ansi[slot] = this._restoreColors.ansi[slot];\n    }\n  }\n\n  public modifyColors(callback: (colors: IColorSet) => void): void {\n    callback(this._colors);\n    // Assume the change happened\n    this._onChangeColors.fire(this.colors);\n  }\n\n  private _updateRestoreColors(): void {\n    this._restoreColors = {\n      foreground: this._colors.foreground,\n      background: this._colors.background,\n      cursor: this._colors.cursor,\n      ansi: this._colors.ansi.slice()\n    };\n  }\n}\n\nfunction parseColor(\n  cssString: string | undefined,\n  fallback: IColor\n): IColor {\n  if (cssString !== undefined) {\n    try {\n      return css.toColor(cssString);\n    } catch {\n      // no-op\n    }\n  }\n  return fallback;\n}\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICircularList } from 'common/Types';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\n\nexport interface IInsertEvent {\n  index: number;\n  amount: number;\n}\n\nexport interface IDeleteEvent {\n  index: number;\n  amount: number;\n}\n\n/**\n * Represents a circular list; a list with a maximum size that wraps around when push is called,\n * overriding values at the start of the list.\n */\nexport class CircularList<T> extends Disposable implements ICircularList<T> {\n  protected _array: (T | undefined)[];\n  private _startIndex: number;\n  private _length: number;\n\n  public readonly onDeleteEmitter = this.register(new EventEmitter<IDeleteEvent>());\n  public readonly onDelete = this.onDeleteEmitter.event;\n  public readonly onInsertEmitter = this.register(new EventEmitter<IInsertEvent>());\n  public readonly onInsert = this.onInsertEmitter.event;\n  public readonly onTrimEmitter = this.register(new EventEmitter<number>());\n  public readonly onTrim = this.onTrimEmitter.event;\n\n  constructor(\n    private _maxLength: number\n  ) {\n    super();\n    this._array = new Array<T>(this._maxLength);\n    this._startIndex = 0;\n    this._length = 0;\n  }\n\n  public get maxLength(): number {\n    return this._maxLength;\n  }\n\n  public set maxLength(newMaxLength: number) {\n    // There was no change in maxLength, return early.\n    if (this._maxLength === newMaxLength) {\n      return;\n    }\n\n    // Reconstruct array, starting at index 0. Only transfer values from the\n    // indexes 0 to length.\n    const newArray = new Array<T | undefined>(newMaxLength);\n    for (let i = 0; i < Math.min(newMaxLength, this.length); i++) {\n      newArray[i] = this._array[this._getCyclicIndex(i)];\n    }\n    this._array = newArray;\n    this._maxLength = newMaxLength;\n    this._startIndex = 0;\n  }\n\n  public get length(): number {\n    return this._length;\n  }\n\n  public set length(newLength: number) {\n    if (newLength > this._length) {\n      for (let i = this._length; i < newLength; i++) {\n        this._array[i] = undefined;\n      }\n    }\n    this._length = newLength;\n  }\n\n  /**\n   * Gets the value at an index.\n   *\n   * Note that for performance reasons there is no bounds checking here, the index reference is\n   * circular so this should always return a value and never throw.\n   * @param index The index of the value to get.\n   * @returns The value corresponding to the index.\n   */\n  public get(index: number): T | undefined {\n    return this._array[this._getCyclicIndex(index)];\n  }\n\n  /**\n   * Sets the value at an index.\n   *\n   * Note that for performance reasons there is no bounds checking here, the index reference is\n   * circular so this should always return a value and never throw.\n   * @param index The index to set.\n   * @param value The value to set.\n   */\n  public set(index: number, value: T | undefined): void {\n    this._array[this._getCyclicIndex(index)] = value;\n  }\n\n  /**\n   * Pushes a new value onto the list, wrapping around to the start of the array, overriding index 0\n   * if the maximum length is reached.\n   * @param value The value to push onto the list.\n   */\n  public push(value: T): void {\n    this._array[this._getCyclicIndex(this._length)] = value;\n    if (this._length === this._maxLength) {\n      this._startIndex = ++this._startIndex % this._maxLength;\n      this.onTrimEmitter.fire(1);\n    } else {\n      this._length++;\n    }\n  }\n\n  /**\n   * Advance ringbuffer index and return current element for recycling.\n   * Note: The buffer must be full for this method to work.\n   * @throws When the buffer is not full.\n   */\n  public recycle(): T {\n    if (this._length !== this._maxLength) {\n      throw new Error('Can only recycle when the buffer is full');\n    }\n    this._startIndex = ++this._startIndex % this._maxLength;\n    this.onTrimEmitter.fire(1);\n    return this._array[this._getCyclicIndex(this._length - 1)]!;\n  }\n\n  /**\n   * Ringbuffer is at max length.\n   */\n  public get isFull(): boolean {\n    return this._length === this._maxLength;\n  }\n\n  /**\n   * Removes and returns the last value on the list.\n   * @returns The popped value.\n   */\n  public pop(): T | undefined {\n    return this._array[this._getCyclicIndex(this._length-- - 1)];\n  }\n\n  /**\n   * Deletes and/or inserts items at a particular index (in that order). Unlike\n   * Array.prototype.splice, this operation does not return the deleted items as a new array in\n   * order to save creating a new array. Note that this operation may shift all values in the list\n   * in the worst case.\n   * @param start The index to delete and/or insert.\n   * @param deleteCount The number of elements to delete.\n   * @param items The items to insert.\n   */\n  public splice(start: number, deleteCount: number, ...items: T[]): void {\n    // Delete items\n    if (deleteCount) {\n      for (let i = start; i < this._length - deleteCount; i++) {\n        this._array[this._getCyclicIndex(i)] = this._array[this._getCyclicIndex(i + deleteCount)];\n      }\n      this._length -= deleteCount;\n      this.onDeleteEmitter.fire({ index: start, amount: deleteCount });\n    }\n\n    // Add items\n    for (let i = this._length - 1; i >= start; i--) {\n      this._array[this._getCyclicIndex(i + items.length)] = this._array[this._getCyclicIndex(i)];\n    }\n    for (let i = 0; i < items.length; i++) {\n      this._array[this._getCyclicIndex(start + i)] = items[i];\n    }\n    if (items.length) {\n      this.onInsertEmitter.fire({ index: start, amount: items.length });\n    }\n\n    // Adjust length as needed\n    if (this._length + items.length > this._maxLength) {\n      const countToTrim = (this._length + items.length) - this._maxLength;\n      this._startIndex += countToTrim;\n      this._length = this._maxLength;\n      this.onTrimEmitter.fire(countToTrim);\n    } else {\n      this._length += items.length;\n    }\n  }\n\n  /**\n   * Trims a number of items from the start of the list.\n   * @param count The number of items to remove.\n   */\n  public trimStart(count: number): void {\n    if (count > this._length) {\n      count = this._length;\n    }\n    this._startIndex += count;\n    this._length -= count;\n    this.onTrimEmitter.fire(count);\n  }\n\n  public shiftElements(start: number, count: number, offset: number): void {\n    if (count <= 0) {\n      return;\n    }\n    if (start < 0 || start >= this._length) {\n      throw new Error('start argument out of range');\n    }\n    if (start + offset < 0) {\n      throw new Error('Cannot shift elements in list beyond index 0');\n    }\n\n    if (offset > 0) {\n      for (let i = count - 1; i >= 0; i--) {\n        this.set(start + i + offset, this.get(start + i));\n      }\n      const expandListBy = (start + count + offset) - this._length;\n      if (expandListBy > 0) {\n        this._length += expandListBy;\n        while (this._length > this._maxLength) {\n          this._length--;\n          this._startIndex++;\n          this.onTrimEmitter.fire(1);\n        }\n      }\n    } else {\n      for (let i = 0; i < count; i++) {\n        this.set(start + i + offset, this.get(start + i));\n      }\n    }\n  }\n\n  /**\n   * Gets the cyclic index for the specified regular index. The cyclic index can then be used on the\n   * backing array to get the element associated with the regular index.\n   * @param index The regular index.\n   * @returns The cyclic index.\n   */\n  private _getCyclicIndex(index: number): number {\n    return (this._startIndex + index) % this._maxLength;\n  }\n}\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/*\n * A simple utility for cloning values\n */\nexport function clone<T>(val: T, depth: number = 5): T {\n  if (typeof val !== 'object') {\n    return val;\n  }\n\n  // If we're cloning an array, use an array as the base, otherwise use an object\n  const clonedObject: any = Array.isArray(val) ? [] : {};\n\n  for (const key in val) {\n    // Recursively clone eack item unless we're at the maximum depth\n    clonedObject[key] = depth <= 1 ? val[key] : (val[key] && clone(val[key], depth - 1));\n  }\n\n  return clonedObject as T;\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IColor, IColorRGB } from 'common/Types';\n\nlet $r = 0;\nlet $g = 0;\nlet $b = 0;\nlet $a = 0;\n\nexport const NULL_COLOR: IColor = {\n  css: '#00000000',\n  rgba: 0\n};\n\n/**\n * Helper functions where the source type is \"channels\" (individual color channels as numbers).\n */\nexport namespace channels {\n  export function toCss(r: number, g: number, b: number, a?: number): string {\n    if (a !== undefined) {\n      return `#${toPaddedHex(r)}${toPaddedHex(g)}${toPaddedHex(b)}${toPaddedHex(a)}`;\n    }\n    return `#${toPaddedHex(r)}${toPaddedHex(g)}${toPaddedHex(b)}`;\n  }\n\n  export function toRgba(r: number, g: number, b: number, a: number = 0xFF): number {\n    // Note: The aggregated number is RGBA32 (BE), thus needs to be converted to ABGR32\n    // on LE systems, before it can be used for direct 32-bit buffer writes.\n    // >>> 0 forces an unsigned int\n    return (r << 24 | g << 16 | b << 8 | a) >>> 0;\n  }\n\n  export function toColor(r: number, g: number, b: number, a?: number): IColor {\n    return {\n      css: channels.toCss(r, g, b, a),\n      rgba: channels.toRgba(r, g, b, a)\n    };\n  }\n}\n\n/**\n * Helper functions where the source type is `IColor`.\n */\nexport namespace color {\n  export function blend(bg: IColor, fg: IColor): IColor {\n    $a = (fg.rgba & 0xFF) / 255;\n    if ($a === 1) {\n      return {\n        css: fg.css,\n        rgba: fg.rgba\n      };\n    }\n    const fgR = (fg.rgba >> 24) & 0xFF;\n    const fgG = (fg.rgba >> 16) & 0xFF;\n    const fgB = (fg.rgba >> 8) & 0xFF;\n    const bgR = (bg.rgba >> 24) & 0xFF;\n    const bgG = (bg.rgba >> 16) & 0xFF;\n    const bgB = (bg.rgba >> 8) & 0xFF;\n    $r = bgR + Math.round((fgR - bgR) * $a);\n    $g = bgG + Math.round((fgG - bgG) * $a);\n    $b = bgB + Math.round((fgB - bgB) * $a);\n    const css = channels.toCss($r, $g, $b);\n    const rgba = channels.toRgba($r, $g, $b);\n    return { css, rgba };\n  }\n\n  export function isOpaque(color: IColor): boolean {\n    return (color.rgba & 0xFF) === 0xFF;\n  }\n\n  export function ensureContrastRatio(bg: IColor, fg: IColor, ratio: number): IColor | undefined {\n    const result = rgba.ensureContrastRatio(bg.rgba, fg.rgba, ratio);\n    if (!result) {\n      return undefined;\n    }\n    return channels.toColor(\n      (result >> 24 & 0xFF),\n      (result >> 16 & 0xFF),\n      (result >> 8  & 0xFF)\n    );\n  }\n\n  export function opaque(color: IColor): IColor {\n    const rgbaColor = (color.rgba | 0xFF) >>> 0;\n    [$r, $g, $b] = rgba.toChannels(rgbaColor);\n    return {\n      css: channels.toCss($r, $g, $b),\n      rgba: rgbaColor\n    };\n  }\n\n  export function opacity(color: IColor, opacity: number): IColor {\n    $a = Math.round(opacity * 0xFF);\n    [$r, $g, $b] = rgba.toChannels(color.rgba);\n    return {\n      css: channels.toCss($r, $g, $b, $a),\n      rgba: channels.toRgba($r, $g, $b, $a)\n    };\n  }\n\n  export function multiplyOpacity(color: IColor, factor: number): IColor {\n    $a = color.rgba & 0xFF;\n    return opacity(color, ($a * factor) / 0xFF);\n  }\n\n  export function toColorRGB(color: IColor): IColorRGB {\n    return [(color.rgba >> 24) & 0xFF, (color.rgba >> 16) & 0xFF, (color.rgba >> 8) & 0xFF];\n  }\n}\n\n/**\n * Helper functions where the source type is \"css\" (string: '#rgb', '#rgba', '#rrggbb',\n * '#rrggbbaa').\n */\nexport namespace css {\n  // Attempt to set get the shared canvas context\n  let $ctx: CanvasRenderingContext2D | undefined;\n  let $litmusColor: CanvasGradient | undefined;\n  try {\n    // This is guaranteed to run in the first window, so document should be correct\n    const canvas = document.createElement('canvas');\n    canvas.width = 1;\n    canvas.height = 1;\n    const ctx = canvas.getContext('2d', {\n      willReadFrequently: true\n    });\n    if (ctx) {\n      $ctx = ctx;\n      $ctx.globalCompositeOperation = 'copy';\n      $litmusColor = $ctx.createLinearGradient(0, 0, 1, 1);\n    }\n  }\n  catch {\n    // noop\n  }\n\n  /**\n   * Converts a css string to an IColor, this should handle all valid CSS color strings and will\n   * throw if it's invalid. The ideal format to use is `#rrggbb[aa]` as it's the fastest to parse.\n   *\n   * Only `#rgb[a]`, `#rrggbb[aa]`, `rgb()` and `rgba()` formats are supported when run in a Node\n   * environment.\n   */\n  export function toColor(css: string): IColor {\n    // Formats: #rgb[a] and #rrggbb[aa]\n    if (css.match(/#[\\da-f]{3,8}/i)) {\n      switch (css.length) {\n        case 4: { // #rgb\n          $r = parseInt(css.slice(1, 2).repeat(2), 16);\n          $g = parseInt(css.slice(2, 3).repeat(2), 16);\n          $b = parseInt(css.slice(3, 4).repeat(2), 16);\n          return channels.toColor($r, $g, $b);\n        }\n        case 5: { // #rgba\n          $r = parseInt(css.slice(1, 2).repeat(2), 16);\n          $g = parseInt(css.slice(2, 3).repeat(2), 16);\n          $b = parseInt(css.slice(3, 4).repeat(2), 16);\n          $a = parseInt(css.slice(4, 5).repeat(2), 16);\n          return channels.toColor($r, $g, $b, $a);\n        }\n        case 7: // #rrggbb\n          return {\n            css,\n            rgba: (parseInt(css.slice(1), 16) << 8 | 0xFF) >>> 0\n          };\n        case 9: // #rrggbbaa\n          return {\n            css,\n            rgba: parseInt(css.slice(1), 16) >>> 0\n          };\n      }\n    }\n\n    // Formats: rgb() or rgba()\n    const rgbaMatch = css.match(/rgba?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*(,\\s*(0|1|\\d?\\.(\\d+))\\s*)?\\)/);\n    if (rgbaMatch) {\n      $r = parseInt(rgbaMatch[1]);\n      $g = parseInt(rgbaMatch[2]);\n      $b = parseInt(rgbaMatch[3]);\n      $a = Math.round((rgbaMatch[5] === undefined ? 1 : parseFloat(rgbaMatch[5])) * 0xFF);\n      return channels.toColor($r, $g, $b, $a);\n    }\n\n    // Validate the context is available for canvas-based color parsing\n    if (!$ctx || !$litmusColor) {\n      throw new Error('css.toColor: Unsupported css format');\n    }\n\n    // Validate the color using canvas fillStyle\n    // See https://html.spec.whatwg.org/multipage/canvas.html#fill-and-stroke-styles\n    $ctx.fillStyle = $litmusColor;\n    $ctx.fillStyle = css;\n    if (typeof $ctx.fillStyle !== 'string') {\n      throw new Error('css.toColor: Unsupported css format');\n    }\n\n    $ctx.fillRect(0, 0, 1, 1);\n    [$r, $g, $b, $a] = $ctx.getImageData(0, 0, 1, 1).data;\n\n    // Validate the color is non-transparent as color hue gets lost when drawn to the canvas\n    if ($a !== 0xFF) {\n      throw new Error('css.toColor: Unsupported css format');\n    }\n\n    // Extract the color from the canvas' fillStyle property which exposes the color value in rgba()\n    // format\n    // See https://html.spec.whatwg.org/multipage/canvas.html#serialisation-of-a-color\n    return {\n      rgba: channels.toRgba($r, $g, $b, $a),\n      css\n    };\n  }\n}\n\n/**\n * Helper functions where the source type is \"rgb\" (number: 0xrrggbb).\n */\nexport namespace rgb {\n  /**\n   * Gets the relative luminance of an RGB color, this is useful in determining the contrast ratio\n   * between two colors.\n   * @param rgb The color to use.\n   * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n   */\n  export function relativeLuminance(rgb: number): number {\n    return relativeLuminance2(\n      (rgb >> 16) & 0xFF,\n      (rgb >> 8 ) & 0xFF,\n      (rgb      ) & 0xFF);\n  }\n\n  /**\n   * Gets the relative luminance of an RGB color, this is useful in determining the contrast ratio\n   * between two colors.\n   * @param r The red channel (0x00 to 0xFF).\n   * @param g The green channel (0x00 to 0xFF).\n   * @param b The blue channel (0x00 to 0xFF).\n   * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n   */\n  export function relativeLuminance2(r: number, g: number, b: number): number {\n    const rs = r / 255;\n    const gs = g / 255;\n    const bs = b / 255;\n    const rr = rs <= 0.03928 ? rs / 12.92 : Math.pow((rs + 0.055) / 1.055, 2.4);\n    const rg = gs <= 0.03928 ? gs / 12.92 : Math.pow((gs + 0.055) / 1.055, 2.4);\n    const rb = bs <= 0.03928 ? bs / 12.92 : Math.pow((bs + 0.055) / 1.055, 2.4);\n    return rr * 0.2126 + rg * 0.7152 + rb * 0.0722;\n  }\n}\n\n/**\n * Helper functions where the source type is \"rgba\" (number: 0xrrggbbaa).\n */\nexport namespace rgba {\n  export function blend(bg: number, fg: number): number {\n    $a = (fg & 0xFF) / 0xFF;\n    if ($a === 1) {\n      return fg;\n    }\n    const fgR = (fg >> 24) & 0xFF;\n    const fgG = (fg >> 16) & 0xFF;\n    const fgB = (fg >> 8) & 0xFF;\n    const bgR = (bg >> 24) & 0xFF;\n    const bgG = (bg >> 16) & 0xFF;\n    const bgB = (bg >> 8) & 0xFF;\n    $r = bgR + Math.round((fgR - bgR) * $a);\n    $g = bgG + Math.round((fgG - bgG) * $a);\n    $b = bgB + Math.round((fgB - bgB) * $a);\n    return channels.toRgba($r, $g, $b);\n  }\n\n  /**\n   * Given a foreground color and a background color, either increase or reduce the luminance of the\n   * foreground color until the specified contrast ratio is met. If pure white or black is hit\n   * without the contrast ratio being met, go the other direction using the background color as the\n   * foreground color and take either the first or second result depending on which has the higher\n   * contrast ratio.\n   *\n   * `undefined` will be returned if the contrast ratio is already met.\n   *\n   * @param bgRgba The background color in rgba format.\n   * @param fgRgba The foreground color in rgba format.\n   * @param ratio The contrast ratio to achieve.\n   */\n  export function ensureContrastRatio(bgRgba: number, fgRgba: number, ratio: number): number | undefined {\n    const bgL = rgb.relativeLuminance(bgRgba >> 8);\n    const fgL = rgb.relativeLuminance(fgRgba >> 8);\n    const cr = contrastRatio(bgL, fgL);\n    if (cr < ratio) {\n      if (fgL < bgL) {\n        const resultA = reduceLuminance(bgRgba, fgRgba, ratio);\n        const resultARatio = contrastRatio(bgL, rgb.relativeLuminance(resultA >> 8));\n        if (resultARatio < ratio) {\n          const resultB = increaseLuminance(bgRgba, fgRgba, ratio);\n          const resultBRatio = contrastRatio(bgL, rgb.relativeLuminance(resultB >> 8));\n          return resultARatio > resultBRatio ? resultA : resultB;\n        }\n        return resultA;\n      }\n      const resultA = increaseLuminance(bgRgba, fgRgba, ratio);\n      const resultARatio = contrastRatio(bgL, rgb.relativeLuminance(resultA >> 8));\n      if (resultARatio < ratio) {\n        const resultB = reduceLuminance(bgRgba, fgRgba, ratio);\n        const resultBRatio = contrastRatio(bgL, rgb.relativeLuminance(resultB >> 8));\n        return resultARatio > resultBRatio ? resultA : resultB;\n      }\n      return resultA;\n    }\n    return undefined;\n  }\n\n  export function reduceLuminance(bgRgba: number, fgRgba: number, ratio: number): number {\n    // This is a naive but fast approach to reducing luminance as converting to\n    // HSL and back is expensive\n    const bgR = (bgRgba >> 24) & 0xFF;\n    const bgG = (bgRgba >> 16) & 0xFF;\n    const bgB = (bgRgba >>  8) & 0xFF;\n    let fgR = (fgRgba >> 24) & 0xFF;\n    let fgG = (fgRgba >> 16) & 0xFF;\n    let fgB = (fgRgba >>  8) & 0xFF;\n    let cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    while (cr < ratio && (fgR > 0 || fgG > 0 || fgB > 0)) {\n      // Reduce by 10% until the ratio is hit\n      fgR -= Math.max(0, Math.ceil(fgR * 0.1));\n      fgG -= Math.max(0, Math.ceil(fgG * 0.1));\n      fgB -= Math.max(0, Math.ceil(fgB * 0.1));\n      cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    }\n    return (fgR << 24 | fgG << 16 | fgB << 8 | 0xFF) >>> 0;\n  }\n\n  export function increaseLuminance(bgRgba: number, fgRgba: number, ratio: number): number {\n    // This is a naive but fast approach to increasing luminance as converting to\n    // HSL and back is expensive\n    const bgR = (bgRgba >> 24) & 0xFF;\n    const bgG = (bgRgba >> 16) & 0xFF;\n    const bgB = (bgRgba >>  8) & 0xFF;\n    let fgR = (fgRgba >> 24) & 0xFF;\n    let fgG = (fgRgba >> 16) & 0xFF;\n    let fgB = (fgRgba >>  8) & 0xFF;\n    let cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    while (cr < ratio && (fgR < 0xFF || fgG < 0xFF || fgB < 0xFF)) {\n      // Increase by 10% until the ratio is hit\n      fgR = Math.min(0xFF, fgR + Math.ceil((255 - fgR) * 0.1));\n      fgG = Math.min(0xFF, fgG + Math.ceil((255 - fgG) * 0.1));\n      fgB = Math.min(0xFF, fgB + Math.ceil((255 - fgB) * 0.1));\n      cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    }\n    return (fgR << 24 | fgG << 16 | fgB << 8 | 0xFF) >>> 0;\n  }\n\n  export function toChannels(value: number): [number, number, number, number] {\n    return [(value >> 24) & 0xFF, (value >> 16) & 0xFF, (value >> 8) & 0xFF, value & 0xFF];\n  }\n}\n\nexport function toPaddedHex(c: number): string {\n  const s = c.toString(16);\n  return s.length < 2 ? '0' + s : s;\n}\n\n/**\n * Gets the contrast ratio between two relative luminance values.\n * @param l1 The first relative luminance.\n * @param l2 The first relative luminance.\n * @see https://www.w3.org/TR/WCAG20/#contrast-ratiodef\n */\nexport function contrastRatio(l1: number, l2: number): number {\n  if (l1 < l2) {\n    return (l2 + 0.05) / (l1 + 0.05);\n  }\n  return (l1 + 0.05) / (l2 + 0.05);\n}\n", "/**\n * Copyright (c) 2014-2020 The xterm.js authors. All rights reserved.\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\n * @license MIT\n *\n * Originally forked from (with the author's permission):\n *   Fabrice Bellard's javascript vt100 for jslinux:\n *   http://bellard.org/jslinux/\n *   Copyright (c) 2011 Fabrice Bellard\n *   The original design remains. The terminal itself\n *   has been extended to include xterm CSI codes, among\n *   other features.\n *\n * Terminal Emulation References:\n *   http://vt100.net/\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.txt\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.html\n *   http://invisible-island.net/vttest/\n *   http://www.inwap.com/pdp10/ansicode.txt\n *   http://linux.die.net/man/4/console_codes\n *   http://linux.die.net/man/7/urxvt\n */\n\nimport { Disposable, MutableDisposable, toDisposable } from 'common/Lifecycle';\nimport { IInstantiationService, IOptionsService, IBufferService, ILogService, ICharsetService, ICoreService, ICoreMouseService, IUnicodeService, LogLevelEnum, ITerminalOptions, IOscLinkService } from 'common/services/Services';\nimport { InstantiationService } from 'common/services/InstantiationService';\nimport { LogService } from 'common/services/LogService';\nimport { BufferService, MINIMUM_COLS, MINIMUM_ROWS } from 'common/services/BufferService';\nimport { OptionsService } from 'common/services/OptionsService';\nimport { IDisposable, IAttributeData, ICoreTerminal, IScrollEvent, ScrollSource } from 'common/Types';\nimport { CoreService } from 'common/services/CoreService';\nimport { EventEmitter, IEvent, forwardEvent } from 'common/EventEmitter';\nimport { CoreMouseService } from 'common/services/CoreMouseService';\nimport { UnicodeService } from 'common/services/UnicodeService';\nimport { CharsetService } from 'common/services/CharsetService';\nimport { updateWindowsModeWrappedState } from 'common/WindowsMode';\nimport { IFunctionIdentifier, IParams } from 'common/parser/Types';\nimport { IBufferSet } from 'common/buffer/Types';\nimport { InputHandler } from 'common/InputHandler';\nimport { WriteBuffer } from 'common/input/WriteBuffer';\nimport { OscLinkService } from 'common/services/OscLinkService';\n\n// Only trigger this warning a single time per session\nlet hasWriteSyncWarnHappened = false;\n\nexport abstract class CoreTerminal extends Disposable implements ICoreTerminal {\n  protected readonly _instantiationService: IInstantiationService;\n  protected readonly _bufferService: IBufferService;\n  protected readonly _logService: ILogService;\n  protected readonly _charsetService: ICharsetService;\n  protected readonly _oscLinkService: IOscLinkService;\n\n  public readonly coreMouseService: ICoreMouseService;\n  public readonly coreService: ICoreService;\n  public readonly unicodeService: IUnicodeService;\n  public readonly optionsService: IOptionsService;\n\n  protected _inputHandler: InputHandler;\n  private _writeBuffer: WriteBuffer;\n  private _windowsWrappingHeuristics = this.register(new MutableDisposable());\n\n  private readonly _onBinary = this.register(new EventEmitter<string>());\n  public readonly onBinary = this._onBinary.event;\n  private readonly _onData = this.register(new EventEmitter<string>());\n  public readonly onData = this._onData.event;\n  protected _onLineFeed = this.register(new EventEmitter<void>());\n  public readonly onLineFeed = this._onLineFeed.event;\n  private readonly _onResize = this.register(new EventEmitter<{ cols: number, rows: number }>());\n  public readonly onResize = this._onResize.event;\n  protected readonly _onWriteParsed = this.register(new EventEmitter<void>());\n  public readonly onWriteParsed = this._onWriteParsed.event;\n\n  /**\n   * Internally we track the source of the scroll but this is meaningless outside the library so\n   * it's filtered out.\n   */\n  protected _onScrollApi?: EventEmitter<number, void>;\n  protected _onScroll = this.register(new EventEmitter<IScrollEvent, void>());\n  public get onScroll(): IEvent<number, void> {\n    if (!this._onScrollApi) {\n      this._onScrollApi = this.register(new EventEmitter<number, void>());\n      this._onScroll.event(ev => {\n        this._onScrollApi?.fire(ev.position);\n      });\n    }\n    return this._onScrollApi.event;\n  }\n\n  public get cols(): number { return this._bufferService.cols; }\n  public get rows(): number { return this._bufferService.rows; }\n  public get buffers(): IBufferSet { return this._bufferService.buffers; }\n  public get options(): Required<ITerminalOptions> { return this.optionsService.options; }\n  public set options(options: ITerminalOptions) {\n    for (const key in options) {\n      this.optionsService.options[key] = options[key];\n    }\n  }\n\n  constructor(\n    options: Partial<ITerminalOptions>\n  ) {\n    super();\n\n    // Setup and initialize services\n    this._instantiationService = new InstantiationService();\n    this.optionsService = this.register(new OptionsService(options));\n    this._instantiationService.setService(IOptionsService, this.optionsService);\n    this._bufferService = this.register(this._instantiationService.createInstance(BufferService));\n    this._instantiationService.setService(IBufferService, this._bufferService);\n    this._logService = this.register(this._instantiationService.createInstance(LogService));\n    this._instantiationService.setService(ILogService, this._logService);\n    this.coreService = this.register(this._instantiationService.createInstance(CoreService));\n    this._instantiationService.setService(ICoreService, this.coreService);\n    this.coreMouseService = this.register(this._instantiationService.createInstance(CoreMouseService));\n    this._instantiationService.setService(ICoreMouseService, this.coreMouseService);\n    this.unicodeService = this.register(this._instantiationService.createInstance(UnicodeService));\n    this._instantiationService.setService(IUnicodeService, this.unicodeService);\n    this._charsetService = this._instantiationService.createInstance(CharsetService);\n    this._instantiationService.setService(ICharsetService, this._charsetService);\n    this._oscLinkService = this._instantiationService.createInstance(OscLinkService);\n    this._instantiationService.setService(IOscLinkService, this._oscLinkService);\n\n\n    // Register input handler and handle/forward events\n    this._inputHandler = this.register(new InputHandler(this._bufferService, this._charsetService, this.coreService, this._logService, this.optionsService, this._oscLinkService, this.coreMouseService, this.unicodeService));\n    this.register(forwardEvent(this._inputHandler.onLineFeed, this._onLineFeed));\n    this.register(this._inputHandler);\n\n    // Setup listeners\n    this.register(forwardEvent(this._bufferService.onResize, this._onResize));\n    this.register(forwardEvent(this.coreService.onData, this._onData));\n    this.register(forwardEvent(this.coreService.onBinary, this._onBinary));\n    this.register(this.coreService.onRequestScrollToBottom(() => this.scrollToBottom()));\n    this.register(this.coreService.onUserInput(() =>  this._writeBuffer.handleUserInput()));\n    this.register(this.optionsService.onMultipleOptionChange(['windowsMode', 'windowsPty'], () => this._handleWindowsPtyOptionChange()));\n    this.register(this._bufferService.onScroll(event => {\n      this._onScroll.fire({ position: this._bufferService.buffer.ydisp, source: ScrollSource.TERMINAL });\n      this._inputHandler.markRangeDirty(this._bufferService.buffer.scrollTop, this._bufferService.buffer.scrollBottom);\n    }));\n    this.register(this._inputHandler.onScroll(event => {\n      this._onScroll.fire({ position: this._bufferService.buffer.ydisp, source: ScrollSource.TERMINAL });\n      this._inputHandler.markRangeDirty(this._bufferService.buffer.scrollTop, this._bufferService.buffer.scrollBottom);\n    }));\n\n    // Setup WriteBuffer\n    this._writeBuffer = this.register(new WriteBuffer((data, promiseResult) => this._inputHandler.parse(data, promiseResult)));\n    this.register(forwardEvent(this._writeBuffer.onWriteParsed, this._onWriteParsed));\n  }\n\n  public write(data: string | Uint8Array, callback?: () => void): void {\n    this._writeBuffer.write(data, callback);\n  }\n\n  /**\n   * Write data to terminal synchonously.\n   *\n   * This method is unreliable with async parser handlers, thus should not\n   * be used anymore. If you need blocking semantics on data input consider\n   * `write` with a callback instead.\n   *\n   * @deprecated Unreliable, will be removed soon.\n   */\n  public writeSync(data: string | Uint8Array, maxSubsequentCalls?: number): void {\n    if (this._logService.logLevel <= LogLevelEnum.WARN && !hasWriteSyncWarnHappened) {\n      this._logService.warn('writeSync is unreliable and will be removed soon.');\n      hasWriteSyncWarnHappened = true;\n    }\n    this._writeBuffer.writeSync(data, maxSubsequentCalls);\n  }\n\n  public input(data: string, wasUserInput: boolean = true): void {\n    this.coreService.triggerDataEvent(data, wasUserInput);\n  }\n\n  public resize(x: number, y: number): void {\n    if (isNaN(x) || isNaN(y)) {\n      return;\n    }\n\n    x = Math.max(x, MINIMUM_COLS);\n    y = Math.max(y, MINIMUM_ROWS);\n\n    this._bufferService.resize(x, y);\n  }\n\n  /**\n   * Scroll the terminal down 1 row, creating a blank line.\n   * @param eraseAttr The attribute data to use the for blank line.\n   * @param isWrapped Whether the new line is wrapped from the previous line.\n   */\n  public scroll(eraseAttr: IAttributeData, isWrapped: boolean = false): void {\n    this._bufferService.scroll(eraseAttr, isWrapped);\n  }\n\n  /**\n   * Scroll the display of the terminal\n   * @param disp The number of lines to scroll down (negative scroll up).\n   * @param suppressScrollEvent Don't emit the scroll event as scrollLines. This is used to avoid\n   * unwanted events being handled by the viewport when the event was triggered from the viewport\n   * originally.\n   * @param source Which component the event came from.\n   */\n  public scrollLines(disp: number, suppressScrollEvent?: boolean, source?: ScrollSource): void {\n    this._bufferService.scrollLines(disp, suppressScrollEvent, source);\n  }\n\n  public scrollPages(pageCount: number): void {\n    this.scrollLines(pageCount * (this.rows - 1));\n  }\n\n  public scrollToTop(): void {\n    this.scrollLines(-this._bufferService.buffer.ydisp);\n  }\n\n  public scrollToBottom(): void {\n    this.scrollLines(this._bufferService.buffer.ybase - this._bufferService.buffer.ydisp);\n  }\n\n  public scrollToLine(line: number): void {\n    const scrollAmount = line - this._bufferService.buffer.ydisp;\n    if (scrollAmount !== 0) {\n      this.scrollLines(scrollAmount);\n    }\n  }\n\n  /** Add handler for ESC escape sequence. See xterm.d.ts for details. */\n  public registerEscHandler(id: IFunctionIdentifier, callback: () => boolean | Promise<boolean>): IDisposable {\n    return this._inputHandler.registerEscHandler(id, callback);\n  }\n\n  /** Add handler for DCS escape sequence. See xterm.d.ts for details. */\n  public registerDcsHandler(id: IFunctionIdentifier, callback: (data: string, param: IParams) => boolean | Promise<boolean>): IDisposable {\n    return this._inputHandler.registerDcsHandler(id, callback);\n  }\n\n  /** Add handler for CSI escape sequence. See xterm.d.ts for details. */\n  public registerCsiHandler(id: IFunctionIdentifier, callback: (params: IParams) => boolean | Promise<boolean>): IDisposable {\n    return this._inputHandler.registerCsiHandler(id, callback);\n  }\n\n  /** Add handler for OSC escape sequence. See xterm.d.ts for details. */\n  public registerOscHandler(ident: number, callback: (data: string) => boolean | Promise<boolean>): IDisposable {\n    return this._inputHandler.registerOscHandler(ident, callback);\n  }\n\n  protected _setup(): void {\n    this._handleWindowsPtyOptionChange();\n  }\n\n  public reset(): void {\n    this._inputHandler.reset();\n    this._bufferService.reset();\n    this._charsetService.reset();\n    this.coreService.reset();\n    this.coreMouseService.reset();\n  }\n\n\n  private _handleWindowsPtyOptionChange(): void {\n    let value = false;\n    const windowsPty = this.optionsService.rawOptions.windowsPty;\n    if (windowsPty && windowsPty.buildNumber !== undefined && windowsPty.buildNumber !== undefined) {\n      value = !!(windowsPty.backend === 'conpty' && windowsPty.buildNumber < 21376);\n    } else if (this.optionsService.rawOptions.windowsMode) {\n      value = true;\n    }\n    if (value) {\n      this._enableWindowsWrappingHeuristics();\n    } else {\n      this._windowsWrappingHeuristics.clear();\n    }\n  }\n\n  protected _enableWindowsWrappingHeuristics(): void {\n    if (!this._windowsWrappingHeuristics.value) {\n      const disposables: IDisposable[] = [];\n      disposables.push(this.onLineFeed(updateWindowsModeWrappedState.bind(null, this._bufferService)));\n      disposables.push(this.registerCsiHandler({ final: 'H' }, () => {\n        updateWindowsModeWrappedState(this._bufferService);\n        return false;\n      }));\n      this._windowsWrappingHeuristics.value = toDisposable(() => {\n        for (const d of disposables) {\n          d.dispose();\n        }\n      });\n    }\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\ninterface IListener<T, U = void> {\n  (arg1: T, arg2: U): void;\n}\n\nexport interface IEvent<T, U = void> {\n  (listener: (arg1: T, arg2: U) => any): IDisposable;\n}\n\nexport interface IEventEmitter<T, U = void> {\n  event: IEvent<T, U>;\n  fire(arg1: T, arg2: U): void;\n  dispose(): void;\n}\n\nexport class EventEmitter<T, U = void> implements IEventEmitter<T, U> {\n  private _listeners: IListener<T, U>[] = [];\n  private _event?: IEvent<T, U>;\n  private _disposed: boolean = false;\n\n  public get event(): IEvent<T, U> {\n    if (!this._event) {\n      this._event = (listener: (arg1: T, arg2: U) => any) => {\n        this._listeners.push(listener);\n        const disposable = {\n          dispose: () => {\n            if (!this._disposed) {\n              for (let i = 0; i < this._listeners.length; i++) {\n                if (this._listeners[i] === listener) {\n                  this._listeners.splice(i, 1);\n                  return;\n                }\n              }\n            }\n          }\n        };\n        return disposable;\n      };\n    }\n    return this._event;\n  }\n\n  public fire(arg1: T, arg2: U): void {\n    const queue: IListener<T, U>[] = [];\n    for (let i = 0; i < this._listeners.length; i++) {\n      queue.push(this._listeners[i]);\n    }\n    for (let i = 0; i < queue.length; i++) {\n      queue[i].call(undefined, arg1, arg2);\n    }\n  }\n\n  public dispose(): void {\n    this.clearListeners();\n    this._disposed = true;\n  }\n\n  public clearListeners(): void {\n    if (this._listeners) {\n      this._listeners.length = 0;\n    }\n  }\n}\n\nexport function forwardEvent<T>(from: IEvent<T>, to: IEventEmitter<T>): IDisposable {\n  return from(e => to.fire(e));\n}\n\nexport function runAndSubscribe<T>(event: IEvent<T>, handler: (e: T | undefined) => any): IDisposable {\n  handler(undefined);\n  return event(e => handler(e));\n}\n", "/**\n * Copyright (c) 2014 The xterm.js authors. All rights reserved.\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\n * @license MIT\n */\n\nimport { IInputHandler, IAttributeData, IDisposable, IWindowOptions, IColorEvent, IParseStack, ColorIndex, ColorRequestType, SpecialColorIndex } from 'common/Types';\nimport { C0, C1 } from 'common/data/EscapeSequences';\nimport { CHARSETS, DEFAULT_CHARSET } from 'common/data/Charsets';\nimport { EscapeSequenceParser } from 'common/parser/EscapeSequenceParser';\nimport { Disposable } from 'common/Lifecycle';\nimport { StringToUtf32, stringFromCodePoint, Utf8ToUtf32 } from 'common/input/TextDecoder';\nimport { BufferLine, DEFAULT_ATTR_DATA } from 'common/buffer/BufferLine';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { IParsingState, IEscapeSequenceParser, IParams, IFunctionIdentifier } from 'common/parser/Types';\nimport { NULL_CELL_CODE, NULL_CELL_WIDTH, Attributes, FgFlags, BgFlags, Content, UnderlineStyle } from 'common/buffer/Constants';\nimport { CellData } from 'common/buffer/CellData';\nimport { AttributeData } from 'common/buffer/AttributeData';\nimport { ICoreService, IBufferService, IOptionsService, ILogService, ICoreMouseService, ICharsetService, IUnicodeService, LogLevelEnum, IOscLinkService } from 'common/services/Services';\nimport { UnicodeService } from 'common/services/UnicodeService';\nimport { OscHandler } from 'common/parser/OscParser';\nimport { DcsHandler } from 'common/parser/DcsParser';\nimport { IBuffer } from 'common/buffer/Types';\nimport { parseColor } from 'common/input/XParseColor';\n\n/**\n * Map collect to glevel. Used in `selectCharset`.\n */\nconst GLEVEL: { [key: string]: number } = { '(': 0, ')': 1, '*': 2, '+': 3, '-': 1, '.': 2 };\n\n/**\n * VT commands done by the parser - FIXME: move this to the parser?\n */\n// @vt: #Y   ESC   CSI   \"Control Sequence Introducer\"   \"ESC [\"   \"Start of a CSI sequence.\"\n// @vt: #Y   ESC   OSC   \"Operating System Command\"      \"ESC ]\"   \"Start of an OSC sequence.\"\n// @vt: #Y   ESC   DCS   \"Device Control String\"         \"ESC P\"   \"Start of a DCS sequence.\"\n// @vt: #Y   ESC   ST    \"String Terminator\"             \"ESC \\\"   \"Terminator used for string type sequences.\"\n// @vt: #Y   ESC   PM    \"Privacy Message\"               \"ESC ^\"   \"Start of a privacy message.\"\n// @vt: #Y   ESC   APC   \"Application Program Command\"   \"ESC _\"   \"Start of an APC sequence.\"\n// @vt: #Y   C1    CSI   \"Control Sequence Introducer\"   \"\\x9B\"    \"Start of a CSI sequence.\"\n// @vt: #Y   C1    OSC   \"Operating System Command\"      \"\\x9D\"    \"Start of an OSC sequence.\"\n// @vt: #Y   C1    DCS   \"Device Control String\"         \"\\x90\"    \"Start of a DCS sequence.\"\n// @vt: #Y   C1    ST    \"String Terminator\"             \"\\x9C\"    \"Terminator used for string type sequences.\"\n// @vt: #Y   C1    PM    \"Privacy Message\"               \"\\x9E\"    \"Start of a privacy message.\"\n// @vt: #Y   C1    APC   \"Application Program Command\"   \"\\x9F\"    \"Start of an APC sequence.\"\n// @vt: #Y   C0    NUL   \"Null\"                          \"\\0, \\x00\"  \"NUL is ignored.\"\n// @vt: #Y   C0    ESC   \"Escape\"                        \"\\e, \\x1B\"  \"Start of a sequence. Cancels any other sequence.\"\n\n/**\n * Document xterm VT features here that are currently unsupported\n */\n// @vt: #E[Supported via @xterm/addon-image.]  DCS   SIXEL       \"SIXEL Graphics\"          \"DCS Ps ; Ps ; Ps ; q \tPt ST\"  \"Draw SIXEL image.\"\n// @vt: #N  DCS   DECUDK      \"User Defined Keys\"       \"DCS Ps ; Ps \\| Pt ST\"           \"Definitions for user-defined keys.\"\n// @vt: #N  DCS   XTGETTCAP   \"Request Terminfo String\" \"DCS + q Pt ST\"                 \"Request Terminfo String.\"\n// @vt: #N  DCS   XTSETTCAP   \"Set Terminfo Data\"       \"DCS + p Pt ST\"                 \"Set Terminfo Data.\"\n// @vt: #N  OSC   1           \"Set Icon Name\"           \"OSC 1 ; Pt BEL\"                \"Set icon name.\"\n\n/**\n * Max length of the UTF32 input buffer. Real memory consumption is 4 times higher.\n */\nconst MAX_PARSEBUFFER_LENGTH = 131072;\n\n/**\n * Limit length of title and icon name stacks.\n */\nconst STACK_LIMIT = 10;\n\n// map params to window option\nfunction paramToWindowOption(n: number, opts: IWindowOptions): boolean {\n  if (n > 24) {\n    return opts.setWinLines || false;\n  }\n  switch (n) {\n    case 1: return !!opts.restoreWin;\n    case 2: return !!opts.minimizeWin;\n    case 3: return !!opts.setWinPosition;\n    case 4: return !!opts.setWinSizePixels;\n    case 5: return !!opts.raiseWin;\n    case 6: return !!opts.lowerWin;\n    case 7: return !!opts.refreshWin;\n    case 8: return !!opts.setWinSizeChars;\n    case 9: return !!opts.maximizeWin;\n    case 10: return !!opts.fullscreenWin;\n    case 11: return !!opts.getWinState;\n    case 13: return !!opts.getWinPosition;\n    case 14: return !!opts.getWinSizePixels;\n    case 15: return !!opts.getScreenSizePixels;\n    case 16: return !!opts.getCellSizePixels;\n    case 18: return !!opts.getWinSizeChars;\n    case 19: return !!opts.getScreenSizeChars;\n    case 20: return !!opts.getIconTitle;\n    case 21: return !!opts.getWinTitle;\n    case 22: return !!opts.pushTitle;\n    case 23: return !!opts.popTitle;\n    case 24: return !!opts.setWinLines;\n  }\n  return false;\n}\n\nexport enum WindowsOptionsReportType {\n  GET_WIN_SIZE_PIXELS = 0,\n  GET_CELL_SIZE_PIXELS = 1\n}\n\n// create a warning log if an async handler takes longer than the limit (in ms)\nconst SLOW_ASYNC_LIMIT = 5000;\n\n// Work variables to avoid garbage collection\nlet $temp = 0;\n\n/**\n * The terminal's standard implementation of IInputHandler, this handles all\n * input from the Parser.\n *\n * Refer to http://invisible-island.net/xterm/ctlseqs/ctlseqs.html to understand\n * each function's header comment.\n */\nexport class InputHandler extends Disposable implements IInputHandler {\n  private _parseBuffer: Uint32Array = new Uint32Array(4096);\n  private _stringDecoder: StringToUtf32 = new StringToUtf32();\n  private _utf8Decoder: Utf8ToUtf32 = new Utf8ToUtf32();\n  private _workCell: CellData = new CellData();\n  private _windowTitle = '';\n  private _iconName = '';\n  private _dirtyRowTracker: IDirtyRowTracker;\n  protected _windowTitleStack: string[] = [];\n  protected _iconNameStack: string[] = [];\n\n  private _curAttrData: IAttributeData = DEFAULT_ATTR_DATA.clone();\n  public getAttrData(): IAttributeData { return this._curAttrData; }\n  private _eraseAttrDataInternal: IAttributeData = DEFAULT_ATTR_DATA.clone();\n\n  private _activeBuffer: IBuffer;\n\n  private readonly _onRequestBell = this.register(new EventEmitter<void>());\n  public readonly onRequestBell = this._onRequestBell.event;\n  private readonly _onRequestRefreshRows = this.register(new EventEmitter<number, number>());\n  public readonly onRequestRefreshRows = this._onRequestRefreshRows.event;\n  private readonly _onRequestReset = this.register(new EventEmitter<void>());\n  public readonly onRequestReset = this._onRequestReset.event;\n  private readonly _onRequestSendFocus = this.register(new EventEmitter<void>());\n  public readonly onRequestSendFocus = this._onRequestSendFocus.event;\n  private readonly _onRequestSyncScrollBar = this.register(new EventEmitter<void>());\n  public readonly onRequestSyncScrollBar = this._onRequestSyncScrollBar.event;\n  private readonly _onRequestWindowsOptionsReport = this.register(new EventEmitter<WindowsOptionsReportType>());\n  public readonly onRequestWindowsOptionsReport = this._onRequestWindowsOptionsReport.event;\n\n  private readonly _onA11yChar = this.register(new EventEmitter<string>());\n  public readonly onA11yChar = this._onA11yChar.event;\n  private readonly _onA11yTab = this.register(new EventEmitter<number>());\n  public readonly onA11yTab = this._onA11yTab.event;\n  private readonly _onCursorMove = this.register(new EventEmitter<void>());\n  public readonly onCursorMove = this._onCursorMove.event;\n  private readonly _onLineFeed = this.register(new EventEmitter<void>());\n  public readonly onLineFeed = this._onLineFeed.event;\n  private readonly _onScroll = this.register(new EventEmitter<number>());\n  public readonly onScroll = this._onScroll.event;\n  private readonly _onTitleChange = this.register(new EventEmitter<string>());\n  public readonly onTitleChange = this._onTitleChange.event;\n  private readonly _onColor = this.register(new EventEmitter<IColorEvent>());\n  public readonly onColor = this._onColor.event;\n\n  private _parseStack: IParseStack = {\n    paused: false,\n    cursorStartX: 0,\n    cursorStartY: 0,\n    decodedLength: 0,\n    position: 0\n  };\n\n  constructor(\n    private readonly _bufferService: IBufferService,\n    private readonly _charsetService: ICharsetService,\n    private readonly _coreService: ICoreService,\n    private readonly _logService: ILogService,\n    private readonly _optionsService: IOptionsService,\n    private readonly _oscLinkService: IOscLinkService,\n    private readonly _coreMouseService: ICoreMouseService,\n    private readonly _unicodeService: IUnicodeService,\n    private readonly _parser: IEscapeSequenceParser = new EscapeSequenceParser()\n  ) {\n    super();\n    this.register(this._parser);\n    this._dirtyRowTracker = new DirtyRowTracker(this._bufferService);\n\n    // Track properties used in performance critical code manually to avoid using slow getters\n    this._activeBuffer = this._bufferService.buffer;\n    this.register(this._bufferService.buffers.onBufferActivate(e => this._activeBuffer = e.activeBuffer));\n\n    /**\n     * custom fallback handlers\n     */\n    this._parser.setCsiHandlerFallback((ident, params) => {\n      this._logService.debug('Unknown CSI code: ', { identifier: this._parser.identToString(ident), params: params.toArray() });\n    });\n    this._parser.setEscHandlerFallback(ident => {\n      this._logService.debug('Unknown ESC code: ', { identifier: this._parser.identToString(ident) });\n    });\n    this._parser.setExecuteHandlerFallback(code => {\n      this._logService.debug('Unknown EXECUTE code: ', { code });\n    });\n    this._parser.setOscHandlerFallback((identifier, action, data) => {\n      this._logService.debug('Unknown OSC code: ', { identifier, action, data });\n    });\n    this._parser.setDcsHandlerFallback((ident, action, payload) => {\n      if (action === 'HOOK') {\n        payload = payload.toArray();\n      }\n      this._logService.debug('Unknown DCS code: ', { identifier: this._parser.identToString(ident), action, payload });\n    });\n\n    /**\n     * print handler\n     */\n    this._parser.setPrintHandler((data, start, end) => this.print(data, start, end));\n\n    /**\n     * CSI handler\n     */\n    this._parser.registerCsiHandler({ final: '@' }, params => this.insertChars(params));\n    this._parser.registerCsiHandler({ intermediates: ' ', final: '@' }, params => this.scrollLeft(params));\n    this._parser.registerCsiHandler({ final: 'A' }, params => this.cursorUp(params));\n    this._parser.registerCsiHandler({ intermediates: ' ', final: 'A' }, params => this.scrollRight(params));\n    this._parser.registerCsiHandler({ final: 'B' }, params => this.cursorDown(params));\n    this._parser.registerCsiHandler({ final: 'C' }, params => this.cursorForward(params));\n    this._parser.registerCsiHandler({ final: 'D' }, params => this.cursorBackward(params));\n    this._parser.registerCsiHandler({ final: 'E' }, params => this.cursorNextLine(params));\n    this._parser.registerCsiHandler({ final: 'F' }, params => this.cursorPrecedingLine(params));\n    this._parser.registerCsiHandler({ final: 'G' }, params => this.cursorCharAbsolute(params));\n    this._parser.registerCsiHandler({ final: 'H' }, params => this.cursorPosition(params));\n    this._parser.registerCsiHandler({ final: 'I' }, params => this.cursorForwardTab(params));\n    this._parser.registerCsiHandler({ final: 'J' }, params => this.eraseInDisplay(params, false));\n    this._parser.registerCsiHandler({ prefix: '?', final: 'J' }, params => this.eraseInDisplay(params, true));\n    this._parser.registerCsiHandler({ final: 'K' }, params => this.eraseInLine(params, false));\n    this._parser.registerCsiHandler({ prefix: '?', final: 'K' }, params => this.eraseInLine(params, true));\n    this._parser.registerCsiHandler({ final: 'L' }, params => this.insertLines(params));\n    this._parser.registerCsiHandler({ final: 'M' }, params => this.deleteLines(params));\n    this._parser.registerCsiHandler({ final: 'P' }, params => this.deleteChars(params));\n    this._parser.registerCsiHandler({ final: 'S' }, params => this.scrollUp(params));\n    this._parser.registerCsiHandler({ final: 'T' }, params => this.scrollDown(params));\n    this._parser.registerCsiHandler({ final: 'X' }, params => this.eraseChars(params));\n    this._parser.registerCsiHandler({ final: 'Z' }, params => this.cursorBackwardTab(params));\n    this._parser.registerCsiHandler({ final: '`' }, params => this.charPosAbsolute(params));\n    this._parser.registerCsiHandler({ final: 'a' }, params => this.hPositionRelative(params));\n    this._parser.registerCsiHandler({ final: 'b' }, params => this.repeatPrecedingCharacter(params));\n    this._parser.registerCsiHandler({ final: 'c' }, params => this.sendDeviceAttributesPrimary(params));\n    this._parser.registerCsiHandler({ prefix: '>', final: 'c' }, params => this.sendDeviceAttributesSecondary(params));\n    this._parser.registerCsiHandler({ final: 'd' }, params => this.linePosAbsolute(params));\n    this._parser.registerCsiHandler({ final: 'e' }, params => this.vPositionRelative(params));\n    this._parser.registerCsiHandler({ final: 'f' }, params => this.hVPosition(params));\n    this._parser.registerCsiHandler({ final: 'g' }, params => this.tabClear(params));\n    this._parser.registerCsiHandler({ final: 'h' }, params => this.setMode(params));\n    this._parser.registerCsiHandler({ prefix: '?', final: 'h' }, params => this.setModePrivate(params));\n    this._parser.registerCsiHandler({ final: 'l' }, params => this.resetMode(params));\n    this._parser.registerCsiHandler({ prefix: '?', final: 'l' }, params => this.resetModePrivate(params));\n    this._parser.registerCsiHandler({ final: 'm' }, params => this.charAttributes(params));\n    this._parser.registerCsiHandler({ final: 'n' }, params => this.deviceStatus(params));\n    this._parser.registerCsiHandler({ prefix: '?', final: 'n' }, params => this.deviceStatusPrivate(params));\n    this._parser.registerCsiHandler({ intermediates: '!', final: 'p' }, params => this.softReset(params));\n    this._parser.registerCsiHandler({ intermediates: ' ', final: 'q' }, params => this.setCursorStyle(params));\n    this._parser.registerCsiHandler({ final: 'r' }, params => this.setScrollRegion(params));\n    this._parser.registerCsiHandler({ final: 's' }, params => this.saveCursor(params));\n    this._parser.registerCsiHandler({ final: 't' }, params => this.windowOptions(params));\n    this._parser.registerCsiHandler({ final: 'u' }, params => this.restoreCursor(params));\n    this._parser.registerCsiHandler({ intermediates: '\\'', final: '}' }, params => this.insertColumns(params));\n    this._parser.registerCsiHandler({ intermediates: '\\'', final: '~' }, params => this.deleteColumns(params));\n    this._parser.registerCsiHandler({ intermediates: '\"', final: 'q' }, params => this.selectProtected(params));\n    this._parser.registerCsiHandler({ intermediates: '$', final: 'p' }, params => this.requestMode(params, true));\n    this._parser.registerCsiHandler({ prefix: '?', intermediates: '$', final: 'p' }, params => this.requestMode(params, false));\n\n    /**\n     * execute handler\n     */\n    this._parser.setExecuteHandler(C0.BEL, () => this.bell());\n    this._parser.setExecuteHandler(C0.LF, () => this.lineFeed());\n    this._parser.setExecuteHandler(C0.VT, () => this.lineFeed());\n    this._parser.setExecuteHandler(C0.FF, () => this.lineFeed());\n    this._parser.setExecuteHandler(C0.CR, () => this.carriageReturn());\n    this._parser.setExecuteHandler(C0.BS, () => this.backspace());\n    this._parser.setExecuteHandler(C0.HT, () => this.tab());\n    this._parser.setExecuteHandler(C0.SO, () => this.shiftOut());\n    this._parser.setExecuteHandler(C0.SI, () => this.shiftIn());\n    // FIXME:   What do to with missing? Old code just added those to print.\n\n    this._parser.setExecuteHandler(C1.IND, () => this.index());\n    this._parser.setExecuteHandler(C1.NEL, () => this.nextLine());\n    this._parser.setExecuteHandler(C1.HTS, () => this.tabSet());\n\n    /**\n     * OSC handler\n     */\n    //   0 - icon name + title\n    this._parser.registerOscHandler(0, new OscHandler(data => { this.setTitle(data); this.setIconName(data); return true; }));\n    //   1 - icon name\n    this._parser.registerOscHandler(1, new OscHandler(data => this.setIconName(data)));\n    //   2 - title\n    this._parser.registerOscHandler(2, new OscHandler(data => this.setTitle(data)));\n    //   3 - set property X in the form \"prop=value\"\n    //   4 - Change Color Number\n    this._parser.registerOscHandler(4, new OscHandler(data => this.setOrReportIndexedColor(data)));\n    //   5 - Change Special Color Number\n    //   6 - Enable/disable Special Color Number c\n    //   7 - current directory? (not in xterm spec, see https://gitlab.com/gnachman/iterm2/issues/3939)\n    //   8 - create hyperlink (not in xterm spec, see https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda)\n    this._parser.registerOscHandler(8, new OscHandler(data => this.setHyperlink(data)));\n    //  10 - Change VT100 text foreground color to Pt.\n    this._parser.registerOscHandler(10, new OscHandler(data => this.setOrReportFgColor(data)));\n    //  11 - Change VT100 text background color to Pt.\n    this._parser.registerOscHandler(11, new OscHandler(data => this.setOrReportBgColor(data)));\n    //  12 - Change text cursor color to Pt.\n    this._parser.registerOscHandler(12, new OscHandler(data => this.setOrReportCursorColor(data)));\n    //  13 - Change mouse foreground color to Pt.\n    //  14 - Change mouse background color to Pt.\n    //  15 - Change Tektronix foreground color to Pt.\n    //  16 - Change Tektronix background color to Pt.\n    //  17 - Change highlight background color to Pt.\n    //  18 - Change Tektronix cursor color to Pt.\n    //  19 - Change highlight foreground color to Pt.\n    //  46 - Change Log File to Pt.\n    //  50 - Set Font to Pt.\n    //  51 - reserved for Emacs shell.\n    //  52 - Manipulate Selection Data.\n    // 104 ; c - Reset Color Number c.\n    this._parser.registerOscHandler(104, new OscHandler(data => this.restoreIndexedColor(data)));\n    // 105 ; c - Reset Special Color Number c.\n    // 106 ; c; f - Enable/disable Special Color Number c.\n    // 110 - Reset VT100 text foreground color.\n    this._parser.registerOscHandler(110, new OscHandler(data => this.restoreFgColor(data)));\n    // 111 - Reset VT100 text background color.\n    this._parser.registerOscHandler(111, new OscHandler(data => this.restoreBgColor(data)));\n    // 112 - Reset text cursor color.\n    this._parser.registerOscHandler(112, new OscHandler(data => this.restoreCursorColor(data)));\n    // 113 - Reset mouse foreground color.\n    // 114 - Reset mouse background color.\n    // 115 - Reset Tektronix foreground color.\n    // 116 - Reset Tektronix background color.\n    // 117 - Reset highlight color.\n    // 118 - Reset Tektronix cursor color.\n    // 119 - Reset highlight foreground color.\n\n    /**\n     * ESC handlers\n     */\n    this._parser.registerEscHandler({ final: '7' }, () => this.saveCursor());\n    this._parser.registerEscHandler({ final: '8' }, () => this.restoreCursor());\n    this._parser.registerEscHandler({ final: 'D' }, () => this.index());\n    this._parser.registerEscHandler({ final: 'E' }, () => this.nextLine());\n    this._parser.registerEscHandler({ final: 'H' }, () => this.tabSet());\n    this._parser.registerEscHandler({ final: 'M' }, () => this.reverseIndex());\n    this._parser.registerEscHandler({ final: '=' }, () => this.keypadApplicationMode());\n    this._parser.registerEscHandler({ final: '>' }, () => this.keypadNumericMode());\n    this._parser.registerEscHandler({ final: 'c' }, () => this.fullReset());\n    this._parser.registerEscHandler({ final: 'n' }, () => this.setgLevel(2));\n    this._parser.registerEscHandler({ final: 'o' }, () => this.setgLevel(3));\n    this._parser.registerEscHandler({ final: '|' }, () => this.setgLevel(3));\n    this._parser.registerEscHandler({ final: '}' }, () => this.setgLevel(2));\n    this._parser.registerEscHandler({ final: '~' }, () => this.setgLevel(1));\n    this._parser.registerEscHandler({ intermediates: '%', final: '@' }, () => this.selectDefaultCharset());\n    this._parser.registerEscHandler({ intermediates: '%', final: 'G' }, () => this.selectDefaultCharset());\n    for (const flag in CHARSETS) {\n      this._parser.registerEscHandler({ intermediates: '(', final: flag }, () => this.selectCharset('(' + flag));\n      this._parser.registerEscHandler({ intermediates: ')', final: flag }, () => this.selectCharset(')' + flag));\n      this._parser.registerEscHandler({ intermediates: '*', final: flag }, () => this.selectCharset('*' + flag));\n      this._parser.registerEscHandler({ intermediates: '+', final: flag }, () => this.selectCharset('+' + flag));\n      this._parser.registerEscHandler({ intermediates: '-', final: flag }, () => this.selectCharset('-' + flag));\n      this._parser.registerEscHandler({ intermediates: '.', final: flag }, () => this.selectCharset('.' + flag));\n      this._parser.registerEscHandler({ intermediates: '/', final: flag }, () => this.selectCharset('/' + flag)); // TODO: supported?\n    }\n    this._parser.registerEscHandler({ intermediates: '#', final: '8' }, () => this.screenAlignmentPattern());\n\n    /**\n     * error handler\n     */\n    this._parser.setErrorHandler((state: IParsingState) => {\n      this._logService.error('Parsing error: ', state);\n      return state;\n    });\n\n    /**\n     * DCS handler\n     */\n    this._parser.registerDcsHandler({ intermediates: '$', final: 'q' }, new DcsHandler((data, params) => this.requestStatusString(data, params)));\n  }\n\n  /**\n   * Async parse support.\n   */\n  private _preserveStack(cursorStartX: number, cursorStartY: number, decodedLength: number, position: number): void {\n    this._parseStack.paused = true;\n    this._parseStack.cursorStartX = cursorStartX;\n    this._parseStack.cursorStartY = cursorStartY;\n    this._parseStack.decodedLength = decodedLength;\n    this._parseStack.position = position;\n  }\n\n  private _logSlowResolvingAsync(p: Promise<boolean>): void {\n    // log a limited warning about an async handler taking too long\n    if (this._logService.logLevel <= LogLevelEnum.WARN) {\n      Promise.race([p, new Promise((res, rej) => setTimeout(() => rej('#SLOW_TIMEOUT'), SLOW_ASYNC_LIMIT))])\n        .catch(err => {\n          if (err !== '#SLOW_TIMEOUT') {\n            throw err;\n          }\n          console.warn(`async parser handler taking longer than ${SLOW_ASYNC_LIMIT} ms`);\n        });\n    }\n  }\n\n  private _getCurrentLinkId(): number {\n    return this._curAttrData.extended.urlId;\n  }\n\n  /**\n   * Parse call with async handler support.\n   *\n   * Whether the stack state got preserved for the next call, is indicated by the return value:\n   * - undefined (void):\n   *   all handlers were sync, no stack save, continue normally with next chunk\n   * - Promise\\<boolean\\>:\n   *   execution stopped at async handler, stack saved, continue with same chunk and the promise\n   *   resolve value as `promiseResult` until the method returns `undefined`\n   *\n   * Note: This method should only be called by `Terminal.write` to ensure correct execution order\n   * and proper continuation of async parser handlers.\n   */\n  public parse(data: string | Uint8Array, promiseResult?: boolean): void | Promise<boolean> {\n    let result: void | Promise<boolean>;\n    let cursorStartX = this._activeBuffer.x;\n    let cursorStartY = this._activeBuffer.y;\n    let start = 0;\n    const wasPaused = this._parseStack.paused;\n\n    if (wasPaused) {\n      // assumption: _parseBuffer never mutates between async calls\n      if (result = this._parser.parse(this._parseBuffer, this._parseStack.decodedLength, promiseResult)) {\n        this._logSlowResolvingAsync(result);\n        return result;\n      }\n      cursorStartX = this._parseStack.cursorStartX;\n      cursorStartY = this._parseStack.cursorStartY;\n      this._parseStack.paused = false;\n      if (data.length > MAX_PARSEBUFFER_LENGTH) {\n        start = this._parseStack.position + MAX_PARSEBUFFER_LENGTH;\n      }\n    }\n\n    // Log debug data, the log level gate is to prevent extra work in this hot path\n    if (this._logService.logLevel <= LogLevelEnum.DEBUG) {\n      this._logService.debug(`parsing data${typeof data === 'string' ? ` \"${data}\"` : ` \"${Array.prototype.map.call(data, e => String.fromCharCode(e)).join('')}\"`}`, typeof data === 'string'\n        ? data.split('').map(e => e.charCodeAt(0))\n        : data\n      );\n    }\n\n    // resize input buffer if needed\n    if (this._parseBuffer.length < data.length) {\n      if (this._parseBuffer.length < MAX_PARSEBUFFER_LENGTH) {\n        this._parseBuffer = new Uint32Array(Math.min(data.length, MAX_PARSEBUFFER_LENGTH));\n      }\n    }\n\n    // Clear the dirty row service so we know which lines changed as a result of parsing\n    // Important: do not clear between async calls, otherwise we lost pending update information.\n    if (!wasPaused) {\n      this._dirtyRowTracker.clearRange();\n    }\n\n    // process big data in smaller chunks\n    if (data.length > MAX_PARSEBUFFER_LENGTH) {\n      for (let i = start; i < data.length; i += MAX_PARSEBUFFER_LENGTH) {\n        const end = i + MAX_PARSEBUFFER_LENGTH < data.length ? i + MAX_PARSEBUFFER_LENGTH : data.length;\n        const len = (typeof data === 'string')\n          ? this._stringDecoder.decode(data.substring(i, end), this._parseBuffer)\n          : this._utf8Decoder.decode(data.subarray(i, end), this._parseBuffer);\n        if (result = this._parser.parse(this._parseBuffer, len)) {\n          this._preserveStack(cursorStartX, cursorStartY, len, i);\n          this._logSlowResolvingAsync(result);\n          return result;\n        }\n      }\n    } else {\n      if (!wasPaused) {\n        const len = (typeof data === 'string')\n          ? this._stringDecoder.decode(data, this._parseBuffer)\n          : this._utf8Decoder.decode(data, this._parseBuffer);\n        if (result = this._parser.parse(this._parseBuffer, len)) {\n          this._preserveStack(cursorStartX, cursorStartY, len, 0);\n          this._logSlowResolvingAsync(result);\n          return result;\n        }\n      }\n    }\n\n    if (this._activeBuffer.x !== cursorStartX || this._activeBuffer.y !== cursorStartY) {\n      this._onCursorMove.fire();\n    }\n\n    // Refresh any dirty rows accumulated as part of parsing, fire only for rows within the\n    // _viewport_ which is relative to ydisp, not relative to ybase.\n    const viewportEnd = this._dirtyRowTracker.end + (this._bufferService.buffer.ybase - this._bufferService.buffer.ydisp);\n    const viewportStart = this._dirtyRowTracker.start + (this._bufferService.buffer.ybase - this._bufferService.buffer.ydisp);\n    if (viewportStart < this._bufferService.rows) {\n      this._onRequestRefreshRows.fire(Math.min(viewportStart, this._bufferService.rows - 1), Math.min(viewportEnd, this._bufferService.rows - 1));\n    }\n  }\n\n  public print(data: Uint32Array, start: number, end: number): void {\n    let code: number;\n    let chWidth: number;\n    const charset = this._charsetService.charset;\n    const screenReaderMode = this._optionsService.rawOptions.screenReaderMode;\n    const cols = this._bufferService.cols;\n    const wraparoundMode = this._coreService.decPrivateModes.wraparound;\n    const insertMode = this._coreService.modes.insertMode;\n    const curAttr = this._curAttrData;\n    let bufferRow = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!;\n\n    this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n\n    // handle wide chars: reset start_cell-1 if we would overwrite the second cell of a wide char\n    if (this._activeBuffer.x && end - start > 0 && bufferRow.getWidth(this._activeBuffer.x - 1) === 2) {\n      bufferRow.setCellFromCodepoint(this._activeBuffer.x - 1, 0, 1, curAttr);\n    }\n\n    let precedingJoinState = this._parser.precedingJoinState;\n    for (let pos = start; pos < end; ++pos) {\n      code = data[pos];\n\n      // get charset replacement character\n      // charset is only defined for ASCII, therefore we only\n      // search for an replacement char if code < 127\n      if (code < 127 && charset) {\n        const ch = charset[String.fromCharCode(code)];\n        if (ch) {\n          code = ch.charCodeAt(0);\n        }\n      }\n\n      const currentInfo = this._unicodeService.charProperties(code, precedingJoinState);\n      chWidth = UnicodeService.extractWidth(currentInfo);\n      const shouldJoin = UnicodeService.extractShouldJoin(currentInfo);\n      const oldWidth = shouldJoin ? UnicodeService.extractWidth(precedingJoinState) : 0;\n      precedingJoinState = currentInfo;\n\n      if (screenReaderMode) {\n        this._onA11yChar.fire(stringFromCodePoint(code));\n      }\n      if (this._getCurrentLinkId()) {\n        this._oscLinkService.addLineToLink(this._getCurrentLinkId(), this._activeBuffer.ybase + this._activeBuffer.y);\n      }\n\n      // goto next line if ch would overflow\n      // NOTE: To avoid costly width checks here,\n      // the terminal does not allow a cols < 2.\n      if (this._activeBuffer.x + chWidth - oldWidth > cols) {\n        // autowrap - DECAWM\n        // automatically wraps to the beginning of the next line\n        if (wraparoundMode) {\n          const oldRow = bufferRow;\n          let oldCol = this._activeBuffer.x - oldWidth;\n          this._activeBuffer.x = oldWidth;\n          this._activeBuffer.y++;\n          if (this._activeBuffer.y === this._activeBuffer.scrollBottom + 1) {\n            this._activeBuffer.y--;\n            this._bufferService.scroll(this._eraseAttrData(), true);\n          } else {\n            if (this._activeBuffer.y >= this._bufferService.rows) {\n              this._activeBuffer.y = this._bufferService.rows - 1;\n            }\n            // The line already exists (eg. the initial viewport), mark it as a\n            // wrapped line\n            this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!.isWrapped = true;\n          }\n          // row changed, get it again\n          bufferRow = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!;\n          if (oldWidth > 0 && bufferRow instanceof BufferLine) {\n            // Combining character widens 1 column to 2.\n            // Move old character to next line.\n            bufferRow.copyCellsFrom(oldRow as BufferLine,\n              oldCol, 0, oldWidth, false);\n          }\n          // clear left over cells to the right\n          while (oldCol < cols) {\n            oldRow.setCellFromCodepoint(oldCol++, 0, 1, curAttr);\n          }\n        } else {\n          this._activeBuffer.x = cols - 1;\n          if (chWidth === 2) {\n            // FIXME: check for xterm behavior\n            // What to do here? We got a wide char that does not fit into last cell\n            continue;\n          }\n        }\n      }\n\n      // insert combining char at last cursor position\n      // this._activeBuffer.x should never be 0 for a combining char\n      // since they always follow a cell consuming char\n      // therefore we can test for this._activeBuffer.x to avoid overflow left\n      if (shouldJoin && this._activeBuffer.x) {\n        const offset = bufferRow.getWidth(this._activeBuffer.x - 1) ? 1 : 2;\n        // if empty cell after fullwidth, need to go 2 cells back\n        // it is save to step 2 cells back here\n        // since an empty cell is only set by fullwidth chars\n        bufferRow.addCodepointToCell(this._activeBuffer.x - offset,\n          code, chWidth);\n        for (let delta = chWidth - oldWidth; --delta >= 0; ) {\n          bufferRow.setCellFromCodepoint(this._activeBuffer.x++, 0, 0, curAttr);\n        }\n        continue;\n      }\n\n      // insert mode: move characters to right\n      if (insertMode) {\n        // right shift cells according to the width\n        bufferRow.insertCells(this._activeBuffer.x, chWidth - oldWidth, this._activeBuffer.getNullCell(curAttr));\n        // test last cell - since the last cell has only room for\n        // a halfwidth char any fullwidth shifted there is lost\n        // and will be set to empty cell\n        if (bufferRow.getWidth(cols - 1) === 2) {\n          bufferRow.setCellFromCodepoint(cols - 1, NULL_CELL_CODE, NULL_CELL_WIDTH, curAttr);\n        }\n      }\n\n      // write current char to buffer and advance cursor\n      bufferRow.setCellFromCodepoint(this._activeBuffer.x++, code, chWidth, curAttr);\n\n      // fullwidth char - also set next cell to placeholder stub and advance cursor\n      // for graphemes bigger than fullwidth we can simply loop to zero\n      // we already made sure above, that this._activeBuffer.x + chWidth will not overflow right\n      if (chWidth > 0) {\n        while (--chWidth) {\n          // other than a regular empty cell a cell following a wide char has no width\n          bufferRow.setCellFromCodepoint(this._activeBuffer.x++, 0, 0, curAttr);\n        }\n      }\n    }\n\n    this._parser.precedingJoinState = precedingJoinState;\n\n    // handle wide chars: reset cell to the right if it is second cell of a wide char\n    if (this._activeBuffer.x < cols && end - start > 0 && bufferRow.getWidth(this._activeBuffer.x) === 0 && !bufferRow.hasContent(this._activeBuffer.x)) {\n      bufferRow.setCellFromCodepoint(this._activeBuffer.x, 0, 1, curAttr);\n    }\n\n    this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n  }\n\n  /**\n   * Forward registerCsiHandler from parser.\n   */\n  public registerCsiHandler(id: IFunctionIdentifier, callback: (params: IParams) => boolean | Promise<boolean>): IDisposable {\n    if (id.final === 't' && !id.prefix && !id.intermediates) {\n      // security: always check whether window option is allowed\n      return this._parser.registerCsiHandler(id, params => {\n        if (!paramToWindowOption(params.params[0], this._optionsService.rawOptions.windowOptions)) {\n          return true;\n        }\n        return callback(params);\n      });\n    }\n    return this._parser.registerCsiHandler(id, callback);\n  }\n\n  /**\n   * Forward registerDcsHandler from parser.\n   */\n  public registerDcsHandler(id: IFunctionIdentifier, callback: (data: string, param: IParams) => boolean | Promise<boolean>): IDisposable {\n    return this._parser.registerDcsHandler(id, new DcsHandler(callback));\n  }\n\n  /**\n   * Forward registerEscHandler from parser.\n   */\n  public registerEscHandler(id: IFunctionIdentifier, callback: () => boolean | Promise<boolean>): IDisposable {\n    return this._parser.registerEscHandler(id, callback);\n  }\n\n  /**\n   * Forward registerOscHandler from parser.\n   */\n  public registerOscHandler(ident: number, callback: (data: string) => boolean | Promise<boolean>): IDisposable {\n    return this._parser.registerOscHandler(ident, new OscHandler(callback));\n  }\n\n  /**\n   * BEL\n   * Bell (Ctrl-G).\n   *\n   * @vt: #Y   C0    BEL   \"Bell\"  \"\\a, \\x07\"  \"Ring the bell.\"\n   * The behavior of the bell is further customizable with `ITerminalOptions.bellStyle`\n   * and `ITerminalOptions.bellSound`.\n   */\n  public bell(): boolean {\n    this._onRequestBell.fire();\n    return true;\n  }\n\n  /**\n   * LF\n   * Line Feed or New Line (NL).  (LF  is Ctrl-J).\n   *\n   * @vt: #Y   C0    LF   \"Line Feed\"            \"\\n, \\x0A\"  \"Move the cursor one row down, scrolling if needed.\"\n   * Scrolling is restricted to scroll margins and will only happen on the bottom line.\n   *\n   * @vt: #Y   C0    VT   \"Vertical Tabulation\"  \"\\v, \\x0B\"  \"Treated as LF.\"\n   * @vt: #Y   C0    FF   \"Form Feed\"            \"\\f, \\x0C\"  \"Treated as LF.\"\n   */\n  public lineFeed(): boolean {\n    this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n    if (this._optionsService.rawOptions.convertEol) {\n      this._activeBuffer.x = 0;\n    }\n    this._activeBuffer.y++;\n    if (this._activeBuffer.y === this._activeBuffer.scrollBottom + 1) {\n      this._activeBuffer.y--;\n      this._bufferService.scroll(this._eraseAttrData());\n    } else if (this._activeBuffer.y >= this._bufferService.rows) {\n      this._activeBuffer.y = this._bufferService.rows - 1;\n    } else {\n      // There was an explicit line feed (not just a carriage return), so clear the wrapped state of\n      // the line. This is particularly important on conpty/Windows where revisiting lines to\n      // reprint is common, especially on resize. Note that the windowsMode wrapped line heuristics\n      // can mess with this so windowsMode should be disabled, which is recommended on Windows build\n      // 21376 and above.\n      this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!.isWrapped = false;\n    }\n    // If the end of the line is hit, prevent this action from wrapping around to the next line.\n    if (this._activeBuffer.x >= this._bufferService.cols) {\n      this._activeBuffer.x--;\n    }\n    this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n\n    this._onLineFeed.fire();\n    return true;\n  }\n\n  /**\n   * CR\n   * Carriage Return (Ctrl-M).\n   *\n   * @vt: #Y   C0    CR   \"Carriage Return\"  \"\\r, \\x0D\"  \"Move the cursor to the beginning of the row.\"\n   */\n  public carriageReturn(): boolean {\n    this._activeBuffer.x = 0;\n    return true;\n  }\n\n  /**\n   * BS\n   * Backspace (Ctrl-H).\n   *\n   * @vt: #Y   C0    BS   \"Backspace\"  \"\\b, \\x08\"  \"Move the cursor one position to the left.\"\n   * By default it is not possible to move the cursor past the leftmost position.\n   * If `reverse wrap-around` (`CSI ? 45 h`) is set, a previous soft line wrap (DECAWM)\n   * can be undone with BS within the scroll margins. In that case the cursor will wrap back\n   * to the end of the previous row. Note that it is not possible to peek back into the scrollbuffer\n   * with the cursor, thus at the home position (top-leftmost cell) this has no effect.\n   */\n  public backspace(): boolean {\n    // reverse wrap-around is disabled\n    if (!this._coreService.decPrivateModes.reverseWraparound) {\n      this._restrictCursor();\n      if (this._activeBuffer.x > 0) {\n        this._activeBuffer.x--;\n      }\n      return true;\n    }\n\n    // reverse wrap-around is enabled\n    // other than for normal operation mode, reverse wrap-around allows the cursor\n    // to be at x=cols to be able to address the last cell of a row by BS\n    this._restrictCursor(this._bufferService.cols);\n\n    if (this._activeBuffer.x > 0) {\n      this._activeBuffer.x--;\n    } else {\n      /**\n       * reverse wrap-around handling:\n       * Our implementation deviates from xterm on purpose. Details:\n       * - only previous soft NLs can be reversed (isWrapped=true)\n       * - only works within scrollborders (top/bottom, left/right not yet supported)\n       * - cannot peek into scrollbuffer\n       * - any cursor movement sequence keeps working as expected\n       */\n      if (this._activeBuffer.x === 0\n        && this._activeBuffer.y > this._activeBuffer.scrollTop\n        && this._activeBuffer.y <= this._activeBuffer.scrollBottom\n        && this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)?.isWrapped) {\n        this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!.isWrapped = false;\n        this._activeBuffer.y--;\n        this._activeBuffer.x = this._bufferService.cols - 1;\n        // find last taken cell - last cell can have 3 different states:\n        // - hasContent(true) + hasWidth(1): narrow char - we are done\n        // - hasWidth(0): second part of wide char - we are done\n        // - hasContent(false) + hasWidth(1): empty cell due to early wrapping wide char, go one\n        //   cell further back\n        const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!;\n        if (line.hasWidth(this._activeBuffer.x) && !line.hasContent(this._activeBuffer.x)) {\n          this._activeBuffer.x--;\n          // We do this only once, since width=1 + hasContent=false currently happens only once\n          // before early wrapping of a wide char.\n          // This needs to be fixed once we support graphemes taking more than 2 cells.\n        }\n      }\n    }\n    this._restrictCursor();\n    return true;\n  }\n\n  /**\n   * TAB\n   * Horizontal Tab (HT) (Ctrl-I).\n   *\n   * @vt: #Y   C0    HT   \"Horizontal Tabulation\"  \"\\t, \\x09\"  \"Move the cursor to the next character tab stop.\"\n   */\n  public tab(): boolean {\n    if (this._activeBuffer.x >= this._bufferService.cols) {\n      return true;\n    }\n    const originalX = this._activeBuffer.x;\n    this._activeBuffer.x = this._activeBuffer.nextStop();\n    if (this._optionsService.rawOptions.screenReaderMode) {\n      this._onA11yTab.fire(this._activeBuffer.x - originalX);\n    }\n    return true;\n  }\n\n  /**\n   * SO\n   * Shift Out (Ctrl-N) -> Switch to Alternate Character Set.  This invokes the\n   * G1 character set.\n   *\n   * @vt: #P[Only limited ISO-2022 charset support.]  C0    SO   \"Shift Out\"  \"\\x0E\"  \"Switch to an alternative character set.\"\n   */\n  public shiftOut(): boolean {\n    this._charsetService.setgLevel(1);\n    return true;\n  }\n\n  /**\n   * SI\n   * Shift In (Ctrl-O) -> Switch to Standard Character Set.  This invokes the G0\n   * character set (the default).\n   *\n   * @vt: #Y   C0    SI   \"Shift In\"   \"\\x0F\"  \"Return to regular character set after Shift Out.\"\n   */\n  public shiftIn(): boolean {\n    this._charsetService.setgLevel(0);\n    return true;\n  }\n\n  /**\n   * Restrict cursor to viewport size / scroll margin (origin mode).\n   */\n  private _restrictCursor(maxCol: number = this._bufferService.cols - 1): void {\n    this._activeBuffer.x = Math.min(maxCol, Math.max(0, this._activeBuffer.x));\n    this._activeBuffer.y = this._coreService.decPrivateModes.origin\n      ? Math.min(this._activeBuffer.scrollBottom, Math.max(this._activeBuffer.scrollTop, this._activeBuffer.y))\n      : Math.min(this._bufferService.rows - 1, Math.max(0, this._activeBuffer.y));\n    this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n  }\n\n  /**\n   * Set absolute cursor position.\n   */\n  private _setCursor(x: number, y: number): void {\n    this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n    if (this._coreService.decPrivateModes.origin) {\n      this._activeBuffer.x = x;\n      this._activeBuffer.y = this._activeBuffer.scrollTop + y;\n    } else {\n      this._activeBuffer.x = x;\n      this._activeBuffer.y = y;\n    }\n    this._restrictCursor();\n    this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n  }\n\n  /**\n   * Set relative cursor position.\n   */\n  private _moveCursor(x: number, y: number): void {\n    // for relative changes we have to make sure we are within 0 .. cols/rows - 1\n    // before calculating the new position\n    this._restrictCursor();\n    this._setCursor(this._activeBuffer.x + x, this._activeBuffer.y + y);\n  }\n\n  /**\n   * CSI Ps A\n   * Cursor Up Ps Times (default = 1) (CUU).\n   *\n   * @vt: #Y CSI CUU   \"Cursor Up\"   \"CSI Ps A\"  \"Move cursor `Ps` times up (default=1).\"\n   * If the cursor would pass the top scroll margin, it will stop there.\n   */\n  public cursorUp(params: IParams): boolean {\n    // stop at scrollTop\n    const diffToTop = this._activeBuffer.y - this._activeBuffer.scrollTop;\n    if (diffToTop >= 0) {\n      this._moveCursor(0, -Math.min(diffToTop, params.params[0] || 1));\n    } else {\n      this._moveCursor(0, -(params.params[0] || 1));\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps B\n   * Cursor Down Ps Times (default = 1) (CUD).\n   *\n   * @vt: #Y CSI CUD   \"Cursor Down\"   \"CSI Ps B\"  \"Move cursor `Ps` times down (default=1).\"\n   * If the cursor would pass the bottom scroll margin, it will stop there.\n   */\n  public cursorDown(params: IParams): boolean {\n    // stop at scrollBottom\n    const diffToBottom = this._activeBuffer.scrollBottom - this._activeBuffer.y;\n    if (diffToBottom >= 0) {\n      this._moveCursor(0, Math.min(diffToBottom, params.params[0] || 1));\n    } else {\n      this._moveCursor(0, params.params[0] || 1);\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps C\n   * Cursor Forward Ps Times (default = 1) (CUF).\n   *\n   * @vt: #Y CSI CUF   \"Cursor Forward\"    \"CSI Ps C\"  \"Move cursor `Ps` times forward (default=1).\"\n   */\n  public cursorForward(params: IParams): boolean {\n    this._moveCursor(params.params[0] || 1, 0);\n    return true;\n  }\n\n  /**\n   * CSI Ps D\n   * Cursor Backward Ps Times (default = 1) (CUB).\n   *\n   * @vt: #Y CSI CUB   \"Cursor Backward\"   \"CSI Ps D\"  \"Move cursor `Ps` times backward (default=1).\"\n   */\n  public cursorBackward(params: IParams): boolean {\n    this._moveCursor(-(params.params[0] || 1), 0);\n    return true;\n  }\n\n  /**\n   * CSI Ps E\n   * Cursor Next Line Ps Times (default = 1) (CNL).\n   * Other than cursorDown (CUD) also set the cursor to first column.\n   *\n   * @vt: #Y CSI CNL   \"Cursor Next Line\"  \"CSI Ps E\"  \"Move cursor `Ps` times down (default=1) and to the first column.\"\n   * Same as CUD, additionally places the cursor at the first column.\n   */\n  public cursorNextLine(params: IParams): boolean {\n    this.cursorDown(params);\n    this._activeBuffer.x = 0;\n    return true;\n  }\n\n  /**\n   * CSI Ps F\n   * Cursor Previous Line Ps Times (default = 1) (CPL).\n   * Other than cursorUp (CUU) also set the cursor to first column.\n   *\n   * @vt: #Y CSI CPL   \"Cursor Backward\"   \"CSI Ps F\"  \"Move cursor `Ps` times up (default=1) and to the first column.\"\n   * Same as CUU, additionally places the cursor at the first column.\n   */\n  public cursorPrecedingLine(params: IParams): boolean {\n    this.cursorUp(params);\n    this._activeBuffer.x = 0;\n    return true;\n  }\n\n  /**\n   * CSI Ps G\n   * Cursor Character Absolute  [column] (default = [row,1]) (CHA).\n   *\n   * @vt: #Y CSI CHA   \"Cursor Horizontal Absolute\" \"CSI Ps G\" \"Move cursor to `Ps`-th column of the active row (default=1).\"\n   */\n  public cursorCharAbsolute(params: IParams): boolean {\n    this._setCursor((params.params[0] || 1) - 1, this._activeBuffer.y);\n    return true;\n  }\n\n  /**\n   * CSI Ps ; Ps H\n   * Cursor Position [row;column] (default = [1,1]) (CUP).\n   *\n   * @vt: #Y CSI CUP   \"Cursor Position\"   \"CSI Ps ; Ps H\"  \"Set cursor to position [`Ps`, `Ps`] (default = [1, 1]).\"\n   * If ORIGIN mode is set, places the cursor to the absolute position within the scroll margins.\n   * If ORIGIN mode is not set, places the cursor to the absolute position within the viewport.\n   * Note that the coordinates are 1-based, thus the top left position starts at `1 ; 1`.\n   */\n  public cursorPosition(params: IParams): boolean {\n    this._setCursor(\n      // col\n      (params.length >= 2) ? (params.params[1] || 1) - 1 : 0,\n      // row\n      (params.params[0] || 1) - 1\n    );\n    return true;\n  }\n\n  /**\n   * CSI Pm `  Character Position Absolute\n   *   [column] (default = [row,1]) (HPA).\n   * Currently same functionality as CHA.\n   *\n   * @vt: #Y CSI HPA   \"Horizontal Position Absolute\"  \"CSI Ps ` \" \"Same as CHA.\"\n   */\n  public charPosAbsolute(params: IParams): boolean {\n    this._setCursor((params.params[0] || 1) - 1, this._activeBuffer.y);\n    return true;\n  }\n\n  /**\n   * CSI Pm a  Character Position Relative\n   *   [columns] (default = [row,col+1]) (HPR)\n   *\n   * @vt: #Y CSI HPR   \"Horizontal Position Relative\"  \"CSI Ps a\"  \"Same as CUF.\"\n   */\n  public hPositionRelative(params: IParams): boolean {\n    this._moveCursor(params.params[0] || 1, 0);\n    return true;\n  }\n\n  /**\n   * CSI Pm d  Vertical Position Absolute (VPA)\n   *   [row] (default = [1,column])\n   *\n   * @vt: #Y CSI VPA   \"Vertical Position Absolute\"    \"CSI Ps d\"  \"Move cursor to `Ps`-th row (default=1).\"\n   */\n  public linePosAbsolute(params: IParams): boolean {\n    this._setCursor(this._activeBuffer.x, (params.params[0] || 1) - 1);\n    return true;\n  }\n\n  /**\n   * CSI Pm e  Vertical Position Relative (VPR)\n   *   [rows] (default = [row+1,column])\n   * reuse CSI Ps B ?\n   *\n   * @vt: #Y CSI VPR   \"Vertical Position Relative\"    \"CSI Ps e\"  \"Move cursor `Ps` times down (default=1).\"\n   */\n  public vPositionRelative(params: IParams): boolean {\n    this._moveCursor(0, params.params[0] || 1);\n    return true;\n  }\n\n  /**\n   * CSI Ps ; Ps f\n   *   Horizontal and Vertical Position [row;column] (default =\n   *   [1,1]) (HVP).\n   *   Same as CUP.\n   *\n   * @vt: #Y CSI HVP   \"Horizontal and Vertical Position\" \"CSI Ps ; Ps f\"  \"Same as CUP.\"\n   */\n  public hVPosition(params: IParams): boolean {\n    this.cursorPosition(params);\n    return true;\n  }\n\n  /**\n   * CSI Ps g  Tab Clear (TBC).\n   *     Ps = 0  -> Clear Current Column (default).\n   *     Ps = 3  -> Clear All.\n   * Potentially:\n   *   Ps = 2  -> Clear Stops on Line.\n   *   http://vt100.net/annarbor/aaa-ug/section6.html\n   *\n   * @vt: #Y CSI TBC   \"Tab Clear\" \"CSI Ps g\"  \"Clear tab stops at current position (0) or all (3) (default=0).\"\n   * Clearing tabstops off the active row (Ps = 2, VT100) is currently not supported.\n   */\n  public tabClear(params: IParams): boolean {\n    const param = params.params[0];\n    if (param === 0) {\n      delete this._activeBuffer.tabs[this._activeBuffer.x];\n    } else if (param === 3) {\n      this._activeBuffer.tabs = {};\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps I\n   *   Cursor Forward Tabulation Ps tab stops (default = 1) (CHT).\n   *\n   * @vt: #Y CSI CHT   \"Cursor Horizontal Tabulation\" \"CSI Ps I\" \"Move cursor `Ps` times tabs forward (default=1).\"\n   */\n  public cursorForwardTab(params: IParams): boolean {\n    if (this._activeBuffer.x >= this._bufferService.cols) {\n      return true;\n    }\n    let param = params.params[0] || 1;\n    while (param--) {\n      this._activeBuffer.x = this._activeBuffer.nextStop();\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps Z  Cursor Backward Tabulation Ps tab stops (default = 1) (CBT).\n   *\n   * @vt: #Y CSI CBT   \"Cursor Backward Tabulation\"  \"CSI Ps Z\"  \"Move cursor `Ps` tabs backward (default=1).\"\n   */\n  public cursorBackwardTab(params: IParams): boolean {\n    if (this._activeBuffer.x >= this._bufferService.cols) {\n      return true;\n    }\n    let param = params.params[0] || 1;\n\n    while (param--) {\n      this._activeBuffer.x = this._activeBuffer.prevStop();\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps \" q  Select Character Protection Attribute (DECSCA).\n   *\n   * @vt: #Y CSI DECSCA   \"Select Character Protection Attribute\"  \"CSI Ps \" q\"  \"Whether DECSED and DECSEL can erase (0=default, 2) or not (1).\"\n   */\n  public selectProtected(params: IParams): boolean {\n    const p = params.params[0];\n    if (p === 1) this._curAttrData.bg |= BgFlags.PROTECTED;\n    if (p === 2 || p === 0) this._curAttrData.bg &= ~BgFlags.PROTECTED;\n    return true;\n  }\n\n\n  /**\n   * Helper method to erase cells in a terminal row.\n   * The cell gets replaced with the eraseChar of the terminal.\n   * @param y The row index relative to the viewport.\n   * @param start The start x index of the range to be erased.\n   * @param end The end x index of the range to be erased (exclusive).\n   * @param clearWrap clear the isWrapped flag\n   * @param respectProtect Whether to respect the protection attribute (DECSCA).\n   */\n  private _eraseInBufferLine(y: number, start: number, end: number, clearWrap: boolean = false, respectProtect: boolean = false): void {\n    const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n    line.replaceCells(\n      start,\n      end,\n      this._activeBuffer.getNullCell(this._eraseAttrData()),\n      respectProtect\n    );\n    if (clearWrap) {\n      line.isWrapped = false;\n    }\n  }\n\n  /**\n   * Helper method to reset cells in a terminal row. The cell gets replaced with the eraseChar of\n   * the terminal and the isWrapped property is set to false.\n   * @param y row index\n   */\n  private _resetBufferLine(y: number, respectProtect: boolean = false): void {\n    const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y);\n    if (line) {\n      line.fill(this._activeBuffer.getNullCell(this._eraseAttrData()), respectProtect);\n      this._bufferService.buffer.clearMarkers(this._activeBuffer.ybase + y);\n      line.isWrapped = false;\n    }\n  }\n\n  /**\n   * CSI Ps J  Erase in Display (ED).\n   *     Ps = 0  -> Erase Below (default).\n   *     Ps = 1  -> Erase Above.\n   *     Ps = 2  -> Erase All.\n   *     Ps = 3  -> Erase Saved Lines (xterm).\n   * CSI ? Ps J\n   *   Erase in Display (DECSED).\n   *     Ps = 0  -> Selective Erase Below (default).\n   *     Ps = 1  -> Selective Erase Above.\n   *     Ps = 2  -> Selective Erase All.\n   *\n   * @vt: #Y CSI ED  \"Erase In Display\"  \"CSI Ps J\"  \"Erase various parts of the viewport.\"\n   * Supported param values:\n   *\n   * | Ps | Effect                                                       |\n   * | -- | ------------------------------------------------------------ |\n   * | 0  | Erase from the cursor through the end of the viewport.       |\n   * | 1  | Erase from the beginning of the viewport through the cursor. |\n   * | 2  | Erase complete viewport.                                     |\n   * | 3  | Erase scrollback.                                            |\n   *\n   * @vt: #Y CSI DECSED   \"Selective Erase In Display\"  \"CSI ? Ps J\"  \"Same as ED with respecting protection flag.\"\n   */\n  public eraseInDisplay(params: IParams, respectProtect: boolean = false): boolean {\n    this._restrictCursor(this._bufferService.cols);\n    let j;\n    switch (params.params[0]) {\n      case 0:\n        j = this._activeBuffer.y;\n        this._dirtyRowTracker.markDirty(j);\n        this._eraseInBufferLine(j++, this._activeBuffer.x, this._bufferService.cols, this._activeBuffer.x === 0, respectProtect);\n        for (; j < this._bufferService.rows; j++) {\n          this._resetBufferLine(j, respectProtect);\n        }\n        this._dirtyRowTracker.markDirty(j);\n        break;\n      case 1:\n        j = this._activeBuffer.y;\n        this._dirtyRowTracker.markDirty(j);\n        // Deleted front part of line and everything before. This line will no longer be wrapped.\n        this._eraseInBufferLine(j, 0, this._activeBuffer.x + 1, true, respectProtect);\n        if (this._activeBuffer.x + 1 >= this._bufferService.cols) {\n          // Deleted entire previous line. This next line can no longer be wrapped.\n          this._activeBuffer.lines.get(j + 1)!.isWrapped = false;\n        }\n        while (j--) {\n          this._resetBufferLine(j, respectProtect);\n        }\n        this._dirtyRowTracker.markDirty(0);\n        break;\n      case 2:\n        j = this._bufferService.rows;\n        this._dirtyRowTracker.markDirty(j - 1);\n        while (j--) {\n          this._resetBufferLine(j, respectProtect);\n        }\n        this._dirtyRowTracker.markDirty(0);\n        break;\n      case 3:\n        // Clear scrollback (everything not in viewport)\n        const scrollBackSize = this._activeBuffer.lines.length - this._bufferService.rows;\n        if (scrollBackSize > 0) {\n          this._activeBuffer.lines.trimStart(scrollBackSize);\n          this._activeBuffer.ybase = Math.max(this._activeBuffer.ybase - scrollBackSize, 0);\n          this._activeBuffer.ydisp = Math.max(this._activeBuffer.ydisp - scrollBackSize, 0);\n          // Force a scroll event to refresh viewport\n          this._onScroll.fire(0);\n        }\n        break;\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps K  Erase in Line (EL).\n   *     Ps = 0  -> Erase to Right (default).\n   *     Ps = 1  -> Erase to Left.\n   *     Ps = 2  -> Erase All.\n   * CSI ? Ps K\n   *   Erase in Line (DECSEL).\n   *     Ps = 0  -> Selective Erase to Right (default).\n   *     Ps = 1  -> Selective Erase to Left.\n   *     Ps = 2  -> Selective Erase All.\n   *\n   * @vt: #Y CSI EL    \"Erase In Line\"  \"CSI Ps K\"  \"Erase various parts of the active row.\"\n   * Supported param values:\n   *\n   * | Ps | Effect                                                   |\n   * | -- | -------------------------------------------------------- |\n   * | 0  | Erase from the cursor through the end of the row.        |\n   * | 1  | Erase from the beginning of the line through the cursor. |\n   * | 2  | Erase complete line.                                     |\n   *\n   * @vt: #Y CSI DECSEL   \"Selective Erase In Line\"  \"CSI ? Ps K\"  \"Same as EL with respecting protecting flag.\"\n   */\n  public eraseInLine(params: IParams, respectProtect: boolean = false): boolean {\n    this._restrictCursor(this._bufferService.cols);\n    switch (params.params[0]) {\n      case 0:\n        this._eraseInBufferLine(this._activeBuffer.y, this._activeBuffer.x, this._bufferService.cols, this._activeBuffer.x === 0, respectProtect);\n        break;\n      case 1:\n        this._eraseInBufferLine(this._activeBuffer.y, 0, this._activeBuffer.x + 1, false, respectProtect);\n        break;\n      case 2:\n        this._eraseInBufferLine(this._activeBuffer.y, 0, this._bufferService.cols, true, respectProtect);\n        break;\n    }\n    this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n    return true;\n  }\n\n  /**\n   * CSI Ps L\n   * Insert Ps Line(s) (default = 1) (IL).\n   *\n   * @vt: #Y CSI IL  \"Insert Line\"   \"CSI Ps L\"  \"Insert `Ps` blank lines at active row (default=1).\"\n   * For every inserted line at the scroll top one line at the scroll bottom gets removed.\n   * The cursor is set to the first column.\n   * IL has no effect if the cursor is outside the scroll margins.\n   */\n  public insertLines(params: IParams): boolean {\n    this._restrictCursor();\n    let param = params.params[0] || 1;\n\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n\n    const row: number = this._activeBuffer.ybase + this._activeBuffer.y;\n\n    const scrollBottomRowsOffset = this._bufferService.rows - 1 - this._activeBuffer.scrollBottom;\n    const scrollBottomAbsolute = this._bufferService.rows - 1 + this._activeBuffer.ybase - scrollBottomRowsOffset + 1;\n    while (param--) {\n      // test: echo -e '\\e[44m\\e[1L\\e[0m'\n      // blankLine(true) - xterm/linux behavior\n      this._activeBuffer.lines.splice(scrollBottomAbsolute - 1, 1);\n      this._activeBuffer.lines.splice(row, 0, this._activeBuffer.getBlankLine(this._eraseAttrData()));\n    }\n\n    this._dirtyRowTracker.markRangeDirty(this._activeBuffer.y, this._activeBuffer.scrollBottom);\n    this._activeBuffer.x = 0; // see https://vt100.net/docs/vt220-rm/chapter4.html - vt220 only?\n    return true;\n  }\n\n  /**\n   * CSI Ps M\n   * Delete Ps Line(s) (default = 1) (DL).\n   *\n   * @vt: #Y CSI DL  \"Delete Line\"   \"CSI Ps M\"  \"Delete `Ps` lines at active row (default=1).\"\n   * For every deleted line at the scroll top one blank line at the scroll bottom gets appended.\n   * The cursor is set to the first column.\n   * DL has no effect if the cursor is outside the scroll margins.\n   */\n  public deleteLines(params: IParams): boolean {\n    this._restrictCursor();\n    let param = params.params[0] || 1;\n\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n\n    const row: number = this._activeBuffer.ybase + this._activeBuffer.y;\n\n    let j: number;\n    j = this._bufferService.rows - 1 - this._activeBuffer.scrollBottom;\n    j = this._bufferService.rows - 1 + this._activeBuffer.ybase - j;\n    while (param--) {\n      // test: echo -e '\\e[44m\\e[1M\\e[0m'\n      // blankLine(true) - xterm/linux behavior\n      this._activeBuffer.lines.splice(row, 1);\n      this._activeBuffer.lines.splice(j, 0, this._activeBuffer.getBlankLine(this._eraseAttrData()));\n    }\n\n    this._dirtyRowTracker.markRangeDirty(this._activeBuffer.y, this._activeBuffer.scrollBottom);\n    this._activeBuffer.x = 0; // see https://vt100.net/docs/vt220-rm/chapter4.html - vt220 only?\n    return true;\n  }\n\n  /**\n   * CSI Ps @\n   * Insert Ps (Blank) Character(s) (default = 1) (ICH).\n   *\n   * @vt: #Y CSI ICH  \"Insert Characters\"   \"CSI Ps @\"  \"Insert `Ps` (blank) characters (default = 1).\"\n   * The ICH sequence inserts `Ps` blank characters. The cursor remains at the beginning of the\n   * blank characters. Text between the cursor and right margin moves to the right. Characters moved\n   * past the right margin are lost.\n   *\n   *\n   * FIXME: check against xterm - should not work outside of scroll margins (see VT520 manual)\n   */\n  public insertChars(params: IParams): boolean {\n    this._restrictCursor();\n    const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);\n    if (line) {\n      line.insertCells(\n        this._activeBuffer.x,\n        params.params[0] || 1,\n        this._activeBuffer.getNullCell(this._eraseAttrData())\n      );\n      this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps P\n   * Delete Ps Character(s) (default = 1) (DCH).\n   *\n   * @vt: #Y CSI DCH   \"Delete Character\"  \"CSI Ps P\"  \"Delete `Ps` characters (default=1).\"\n   * As characters are deleted, the remaining characters between the cursor and right margin move to\n   * the left. Character attributes move with the characters. The terminal adds blank characters at\n   * the right margin.\n   *\n   *\n   * FIXME: check against xterm - should not work outside of scroll margins (see VT520 manual)\n   */\n  public deleteChars(params: IParams): boolean {\n    this._restrictCursor();\n    const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);\n    if (line) {\n      line.deleteCells(\n        this._activeBuffer.x,\n        params.params[0] || 1,\n        this._activeBuffer.getNullCell(this._eraseAttrData())\n      );\n      this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps S  Scroll up Ps lines (default = 1) (SU).\n   *\n   * @vt: #Y CSI SU  \"Scroll Up\"   \"CSI Ps S\"  \"Scroll `Ps` lines up (default=1).\"\n   *\n   *\n   * FIXME: scrolled out lines at top = 1 should add to scrollback (xterm)\n   */\n  public scrollUp(params: IParams): boolean {\n    let param = params.params[0] || 1;\n\n    while (param--) {\n      this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollTop, 1);\n      this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollBottom, 0, this._activeBuffer.getBlankLine(this._eraseAttrData()));\n    }\n    this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Ps T  Scroll down Ps lines (default = 1) (SD).\n   *\n   * @vt: #Y CSI SD  \"Scroll Down\"   \"CSI Ps T\"  \"Scroll `Ps` lines down (default=1).\"\n   */\n  public scrollDown(params: IParams): boolean {\n    let param = params.params[0] || 1;\n\n    while (param--) {\n      this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollBottom, 1);\n      this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollTop, 0, this._activeBuffer.getBlankLine(DEFAULT_ATTR_DATA));\n    }\n    this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Ps SP @  Scroll left Ps columns (default = 1) (SL) ECMA-48\n   *\n   * Notation: (Pn)\n   * Representation: CSI Pn 02/00 04/00\n   * Parameter default value: Pn = 1\n   * SL causes the data in the presentation component to be moved by n character positions\n   * if the line orientation is horizontal, or by n line positions if the line orientation\n   * is vertical, such that the data appear to move to the left; where n equals the value of Pn.\n   * The active presentation position is not affected by this control function.\n   *\n   * Supported:\n   *   - always left shift (no line orientation setting respected)\n   *\n   * @vt: #Y CSI SL  \"Scroll Left\" \"CSI Ps SP @\" \"Scroll viewport `Ps` times to the left.\"\n   * SL moves the content of all lines within the scroll margins `Ps` times to the left.\n   * SL has no effect outside of the scroll margins.\n   */\n  public scrollLeft(params: IParams): boolean {\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n    const param = params.params[0] || 1;\n    for (let y = this._activeBuffer.scrollTop; y <= this._activeBuffer.scrollBottom; ++y) {\n      const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n      line.deleteCells(0, param, this._activeBuffer.getNullCell(this._eraseAttrData()));\n      line.isWrapped = false;\n    }\n    this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Ps SP A  Scroll right Ps columns (default = 1) (SR) ECMA-48\n   *\n   * Notation: (Pn)\n   * Representation: CSI Pn 02/00 04/01\n   * Parameter default value: Pn = 1\n   * SR causes the data in the presentation component to be moved by n character positions\n   * if the line orientation is horizontal, or by n line positions if the line orientation\n   * is vertical, such that the data appear to move to the right; where n equals the value of Pn.\n   * The active presentation position is not affected by this control function.\n   *\n   * Supported:\n   *   - always right shift (no line orientation setting respected)\n   *\n   * @vt: #Y CSI SR  \"Scroll Right\"  \"CSI Ps SP A\"   \"Scroll viewport `Ps` times to the right.\"\n   * SL moves the content of all lines within the scroll margins `Ps` times to the right.\n   * Content at the right margin is lost.\n   * SL has no effect outside of the scroll margins.\n   */\n  public scrollRight(params: IParams): boolean {\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n    const param = params.params[0] || 1;\n    for (let y = this._activeBuffer.scrollTop; y <= this._activeBuffer.scrollBottom; ++y) {\n      const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n      line.insertCells(0, param, this._activeBuffer.getNullCell(this._eraseAttrData()));\n      line.isWrapped = false;\n    }\n    this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Pm ' }\n   * Insert Ps Column(s) (default = 1) (DECIC), VT420 and up.\n   *\n   * @vt: #Y CSI DECIC \"Insert Columns\"  \"CSI Ps ' }\"  \"Insert `Ps` columns at cursor position.\"\n   * DECIC inserts `Ps` times blank columns at the cursor position for all lines with the scroll\n   * margins, moving content to the right. Content at the right margin is lost. DECIC has no effect\n   * outside the scrolling margins.\n   */\n  public insertColumns(params: IParams): boolean {\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n    const param = params.params[0] || 1;\n    for (let y = this._activeBuffer.scrollTop; y <= this._activeBuffer.scrollBottom; ++y) {\n      const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n      line.insertCells(this._activeBuffer.x, param, this._activeBuffer.getNullCell(this._eraseAttrData()));\n      line.isWrapped = false;\n    }\n    this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Pm ' ~\n   * Delete Ps Column(s) (default = 1) (DECDC), VT420 and up.\n   *\n   * @vt: #Y CSI DECDC \"Delete Columns\"  \"CSI Ps ' ~\"  \"Delete `Ps` columns at cursor position.\"\n   * DECDC deletes `Ps` times columns at the cursor position for all lines with the scroll margins,\n   * moving content to the left. Blank columns are added at the right margin.\n   * DECDC has no effect outside the scrolling margins.\n   */\n  public deleteColumns(params: IParams): boolean {\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n    const param = params.params[0] || 1;\n    for (let y = this._activeBuffer.scrollTop; y <= this._activeBuffer.scrollBottom; ++y) {\n      const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n      line.deleteCells(this._activeBuffer.x, param, this._activeBuffer.getNullCell(this._eraseAttrData()));\n      line.isWrapped = false;\n    }\n    this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Ps X\n   * Erase Ps Character(s) (default = 1) (ECH).\n   *\n   * @vt: #Y CSI ECH   \"Erase Character\"   \"CSI Ps X\"  \"Erase `Ps` characters from current cursor position to the right (default=1).\"\n   * ED erases `Ps` characters from current cursor position to the right.\n   * ED works inside or outside the scrolling margins.\n   */\n  public eraseChars(params: IParams): boolean {\n    this._restrictCursor();\n    const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);\n    if (line) {\n      line.replaceCells(\n        this._activeBuffer.x,\n        this._activeBuffer.x + (params.params[0] || 1),\n        this._activeBuffer.getNullCell(this._eraseAttrData())\n      );\n      this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps b  Repeat the preceding graphic character Ps times (REP).\n   * From ECMA 48 (@see http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-048.pdf)\n   *    Notation: (Pn)\n   *    Representation: CSI Pn 06/02\n   *    Parameter default value: Pn = 1\n   *    REP is used to indicate that the preceding character in the data stream,\n   *    if it is a graphic character (represented by one or more bit combinations) including SPACE,\n   *    is to be repeated n times, where n equals the value of Pn.\n   *    If the character preceding REP is a control function or part of a control function,\n   *    the effect of REP is not defined by this Standard.\n   *\n   * We extend xterm's behavior to allow repeating entire grapheme clusters.\n   * This isn't 100% xterm-compatible, but it seems saner and more useful.\n   *    - text attrs are applied normally\n   *    - wrap around is respected\n   *    - any valid sequence resets the carried forward char\n   *\n   * Note: To get reset on a valid sequence working correctly without much runtime penalty, the\n   * preceding codepoint is stored on the parser in `this.print` and reset during `parser.parse`.\n   *\n   * @vt: #Y CSI REP   \"Repeat Preceding Character\"    \"CSI Ps b\"  \"Repeat preceding character `Ps` times (default=1).\"\n   * REP repeats the previous character `Ps` times advancing the cursor, also wrapping if DECAWM is\n   * set. REP has no effect if the sequence does not follow a printable ASCII character\n   * (NOOP for any other sequence in between or NON ASCII characters).\n   */\n  public repeatPrecedingCharacter(params: IParams): boolean {\n    const joinState = this._parser.precedingJoinState;\n    if (!joinState) {\n      return true;\n    }\n    // call print to insert the chars and handle correct wrapping\n    const length = params.params[0] || 1;\n    const chWidth = UnicodeService.extractWidth(joinState);\n    const x = this._activeBuffer.x - chWidth;\n    const bufferRow = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!;\n    const text = bufferRow.getString(x);\n    const data = new Uint32Array(text.length * length);\n    let idata = 0;\n    for (let itext = 0; itext < text.length; ) {\n      const ch = text.codePointAt(itext) || 0;\n      data[idata++] = ch;\n      itext += ch > 0xffff ? 2 : 1;\n    }\n    let tlength = idata;\n    for (let i = 1; i < length; ++i) {\n      data.copyWithin(tlength, 0, idata);\n      tlength += idata;\n    }\n    this.print(data, 0, tlength);\n    return true;\n  }\n\n  /**\n   * CSI Ps c  Send Device Attributes (Primary DA).\n   *     Ps = 0  or omitted -> request attributes from terminal.  The\n   *     response depends on the decTerminalID resource setting.\n   *     -> CSI ? 1 ; 2 c  (``VT100 with Advanced Video Option'')\n   *     -> CSI ? 1 ; 0 c  (``VT101 with No Options'')\n   *     -> CSI ? 6 c  (``VT102'')\n   *     -> CSI ? 6 0 ; 1 ; 2 ; 6 ; 8 ; 9 ; 1 5 ; c  (``VT220'')\n   *   The VT100-style response parameters do not mean anything by\n   *   themselves.  VT220 parameters do, telling the host what fea-\n   *   tures the terminal supports:\n   *     Ps = 1  -> 132-columns.\n   *     Ps = 2  -> Printer.\n   *     Ps = 6  -> Selective erase.\n   *     Ps = 8  -> User-defined keys.\n   *     Ps = 9  -> National replacement character sets.\n   *     Ps = 1 5  -> Technical characters.\n   *     Ps = 2 2  -> ANSI color, e.g., VT525.\n   *     Ps = 2 9  -> ANSI text locator (i.e., DEC Locator mode).\n   *\n   * @vt: #Y CSI DA1   \"Primary Device Attributes\"     \"CSI c\"  \"Send primary device attributes.\"\n   *\n   *\n   * TODO: fix and cleanup response\n   */\n  public sendDeviceAttributesPrimary(params: IParams): boolean {\n    if (params.params[0] > 0) {\n      return true;\n    }\n    if (this._is('xterm') || this._is('rxvt-unicode') || this._is('screen')) {\n      this._coreService.triggerDataEvent(C0.ESC + '[?1;2c');\n    } else if (this._is('linux')) {\n      this._coreService.triggerDataEvent(C0.ESC + '[?6c');\n    }\n    return true;\n  }\n\n  /**\n   * CSI > Ps c\n   *   Send Device Attributes (Secondary DA).\n   *     Ps = 0  or omitted -> request the terminal's identification\n   *     code.  The response depends on the decTerminalID resource set-\n   *     ting.  It should apply only to VT220 and up, but xterm extends\n   *     this to VT100.\n   *     -> CSI  > Pp ; Pv ; Pc c\n   *   where Pp denotes the terminal type\n   *     Pp = 0  -> ``VT100''.\n   *     Pp = 1  -> ``VT220''.\n   *   and Pv is the firmware version (for xterm, this was originally\n   *   the XFree86 patch number, starting with 95).  In a DEC termi-\n   *   nal, Pc indicates the ROM cartridge registration number and is\n   *   always zero.\n   * More information:\n   *   xterm/charproc.c - line 2012, for more information.\n   *   vim responds with ^[[?0c or ^[[?1c after the terminal's response (?)\n   *\n   * @vt: #Y CSI DA2   \"Secondary Device Attributes\"   \"CSI > c\" \"Send primary device attributes.\"\n   *\n   *\n   * TODO: fix and cleanup response\n   */\n  public sendDeviceAttributesSecondary(params: IParams): boolean {\n    if (params.params[0] > 0) {\n      return true;\n    }\n    // xterm and urxvt\n    // seem to spit this\n    // out around ~370 times (?).\n    if (this._is('xterm')) {\n      this._coreService.triggerDataEvent(C0.ESC + '[>0;276;0c');\n    } else if (this._is('rxvt-unicode')) {\n      this._coreService.triggerDataEvent(C0.ESC + '[>85;95;0c');\n    } else if (this._is('linux')) {\n      // not supported by linux console.\n      // linux console echoes parameters.\n      this._coreService.triggerDataEvent(params.params[0] + 'c');\n    } else if (this._is('screen')) {\n      this._coreService.triggerDataEvent(C0.ESC + '[>83;40003;0c');\n    }\n    return true;\n  }\n\n  /**\n   * Evaluate if the current terminal is the given argument.\n   * @param term The terminal name to evaluate\n   */\n  private _is(term: string): boolean {\n    return (this._optionsService.rawOptions.termName + '').indexOf(term) === 0;\n  }\n\n  /**\n   * CSI Pm h  Set Mode (SM).\n   *     Ps = 2  -> Keyboard Action Mode (AM).\n   *     Ps = 4  -> Insert Mode (IRM).\n   *     Ps = 1 2  -> Send/receive (SRM).\n   *     Ps = 2 0  -> Automatic Newline (LNM).\n   *\n   * @vt: #P[Only IRM is supported.]    CSI SM    \"Set Mode\"  \"CSI Pm h\"  \"Set various terminal modes.\"\n   * Supported param values by SM:\n   *\n   * | Param | Action                                 | Support |\n   * | ----- | -------------------------------------- | ------- |\n   * | 2     | Keyboard Action Mode (KAM). Always on. | #N      |\n   * | 4     | Insert Mode (IRM).                     | #Y      |\n   * | 12    | Send/receive (SRM). Always off.        | #N      |\n   * | 20    | Automatic Newline (LNM).               | #Y      |\n   */\n  public setMode(params: IParams): boolean {\n    for (let i = 0; i < params.length; i++) {\n      switch (params.params[i]) {\n        case 4:\n          this._coreService.modes.insertMode = true;\n          break;\n        case 20:\n          this._optionsService.options.convertEol = true;\n          break;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * CSI ? Pm h\n   *   DEC Private Mode Set (DECSET).\n   *     Ps = 1  -> Application Cursor Keys (DECCKM).\n   *     Ps = 2  -> Designate USASCII for character sets G0-G3\n   *     (DECANM), and set VT100 mode.\n   *     Ps = 3  -> 132 Column Mode (DECCOLM).\n   *     Ps = 4  -> Smooth (Slow) Scroll (DECSCLM).\n   *     Ps = 5  -> Reverse Video (DECSCNM).\n   *     Ps = 6  -> Origin Mode (DECOM).\n   *     Ps = 7  -> Wraparound Mode (DECAWM).\n   *     Ps = 8  -> Auto-repeat Keys (DECARM).\n   *     Ps = 9  -> Send Mouse X & Y on button press.  See the sec-\n   *     tion Mouse Tracking.\n   *     Ps = 1 0  -> Show toolbar (rxvt).\n   *     Ps = 1 2  -> Start Blinking Cursor (att610).\n   *     Ps = 1 8  -> Print form feed (DECPFF).\n   *     Ps = 1 9  -> Set print extent to full screen (DECPEX).\n   *     Ps = 2 5  -> Show Cursor (DECTCEM).\n   *     Ps = 3 0  -> Show scrollbar (rxvt).\n   *     Ps = 3 5  -> Enable font-shifting functions (rxvt).\n   *     Ps = 3 8  -> Enter Tektronix Mode (DECTEK).\n   *     Ps = 4 0  -> Allow 80 -> 132 Mode.\n   *     Ps = 4 1  -> more(1) fix (see curses resource).\n   *     Ps = 4 2  -> Enable Nation Replacement Character sets (DECN-\n   *     RCM).\n   *     Ps = 4 4  -> Turn On Margin Bell.\n   *     Ps = 4 5  -> Reverse-wraparound Mode.\n   *     Ps = 4 6  -> Start Logging.  This is normally disabled by a\n   *     compile-time option.\n   *     Ps = 4 7  -> Use Alternate Screen Buffer.  (This may be dis-\n   *     abled by the titeInhibit resource).\n   *     Ps = 6 6  -> Application keypad (DECNKM).\n   *     Ps = 6 7  -> Backarrow key sends backspace (DECBKM).\n   *     Ps = 1 0 0 0  -> Send Mouse X & Y on button press and\n   *     release.  See the section Mouse Tracking.\n   *     Ps = 1 0 0 1  -> Use Hilite Mouse Tracking.\n   *     Ps = 1 0 0 2  -> Use Cell Motion Mouse Tracking.\n   *     Ps = 1 0 0 3  -> Use All Motion Mouse Tracking.\n   *     Ps = 1 0 0 4  -> Send FocusIn/FocusOut events.\n   *     Ps = 1 0 0 5  -> Enable Extended Mouse Mode.\n   *     Ps = 1 0 1 0  -> Scroll to bottom on tty output (rxvt).\n   *     Ps = 1 0 1 1  -> Scroll to bottom on key press (rxvt).\n   *     Ps = 1 0 3 4  -> Interpret \"meta\" key, sets eighth bit.\n   *     (enables the eightBitInput resource).\n   *     Ps = 1 0 3 5  -> Enable special modifiers for Alt and Num-\n   *     Lock keys.  (This enables the numLock resource).\n   *     Ps = 1 0 3 6  -> Send ESC   when Meta modifies a key.  (This\n   *     enables the metaSendsEscape resource).\n   *     Ps = 1 0 3 7  -> Send DEL from the editing-keypad Delete\n   *     key.\n   *     Ps = 1 0 3 9  -> Send ESC  when Alt modifies a key.  (This\n   *     enables the altSendsEscape resource).\n   *     Ps = 1 0 4 0  -> Keep selection even if not highlighted.\n   *     (This enables the keepSelection resource).\n   *     Ps = 1 0 4 1  -> Use the CLIPBOARD selection.  (This enables\n   *     the selectToClipboard resource).\n   *     Ps = 1 0 4 2  -> Enable Urgency window manager hint when\n   *     Control-G is received.  (This enables the bellIsUrgent\n   *     resource).\n   *     Ps = 1 0 4 3  -> Enable raising of the window when Control-G\n   *     is received.  (enables the popOnBell resource).\n   *     Ps = 1 0 4 7  -> Use Alternate Screen Buffer.  (This may be\n   *     disabled by the titeInhibit resource).\n   *     Ps = 1 0 4 8  -> Save cursor as in DECSC.  (This may be dis-\n   *     abled by the titeInhibit resource).\n   *     Ps = 1 0 4 9  -> Save cursor as in DECSC and use Alternate\n   *     Screen Buffer, clearing it first.  (This may be disabled by\n   *     the titeInhibit resource).  This combines the effects of the 1\n   *     0 4 7  and 1 0 4 8  modes.  Use this with terminfo-based\n   *     applications rather than the 4 7  mode.\n   *     Ps = 1 0 5 0  -> Set terminfo/termcap function-key mode.\n   *     Ps = 1 0 5 1  -> Set Sun function-key mode.\n   *     Ps = 1 0 5 2  -> Set HP function-key mode.\n   *     Ps = 1 0 5 3  -> Set SCO function-key mode.\n   *     Ps = 1 0 6 0  -> Set legacy keyboard emulation (X11R6).\n   *     Ps = 1 0 6 1  -> Set VT220 keyboard emulation.\n   *     Ps = 2 0 0 4  -> Set bracketed paste mode.\n   * Modes:\n   *   http: *vt100.net/docs/vt220-rm/chapter4.html\n   *\n   * @vt: #P[See below for supported modes.]    CSI DECSET  \"DEC Private Set Mode\" \"CSI ? Pm h\"  \"Set various terminal attributes.\"\n   * Supported param values by DECSET:\n   *\n   * | param | Action                                                  | Support |\n   * | ----- | ------------------------------------------------------- | --------|\n   * | 1     | Application Cursor Keys (DECCKM).                       | #Y      |\n   * | 2     | Designate US-ASCII for character sets G0-G3 (DECANM).   | #Y      |\n   * | 3     | 132 Column Mode (DECCOLM).                              | #Y      |\n   * | 6     | Origin Mode (DECOM).                                    | #Y      |\n   * | 7     | Auto-wrap Mode (DECAWM).                                | #Y      |\n   * | 8     | Auto-repeat Keys (DECARM). Always on.                   | #N      |\n   * | 9     | X10 xterm mouse protocol.                               | #Y      |\n   * | 12    | Start Blinking Cursor.                                  | #Y      |\n   * | 25    | Show Cursor (DECTCEM).                                  | #Y      |\n   * | 45    | Reverse wrap-around.                                    | #Y      |\n   * | 47    | Use Alternate Screen Buffer.                            | #Y      |\n   * | 66    | Application keypad (DECNKM).                            | #Y      |\n   * | 1000  | X11 xterm mouse protocol.                               | #Y      |\n   * | 1002  | Use Cell Motion Mouse Tracking.                         | #Y      |\n   * | 1003  | Use All Motion Mouse Tracking.                          | #Y      |\n   * | 1004  | Send FocusIn/FocusOut events                            | #Y      |\n   * | 1005  | Enable UTF-8 Mouse Mode.                                | #N      |\n   * | 1006  | Enable SGR Mouse Mode.                                  | #Y      |\n   * | 1015  | Enable urxvt Mouse Mode.                                | #N      |\n   * | 1016  | Enable SGR-Pixels Mouse Mode.                           | #Y      |\n   * | 1047  | Use Alternate Screen Buffer.                            | #Y      |\n   * | 1048  | Save cursor as in DECSC.                                | #Y      |\n   * | 1049  | Save cursor and switch to alternate buffer clearing it. | #P[Does not clear the alternate buffer.] |\n   * | 2004  | Set bracketed paste mode.                               | #Y      |\n   *\n   *\n   * FIXME: implement DECSCNM, 1049 should clear altbuffer\n   */\n  public setModePrivate(params: IParams): boolean {\n    for (let i = 0; i < params.length; i++) {\n      switch (params.params[i]) {\n        case 1:\n          this._coreService.decPrivateModes.applicationCursorKeys = true;\n          break;\n        case 2:\n          this._charsetService.setgCharset(0, DEFAULT_CHARSET);\n          this._charsetService.setgCharset(1, DEFAULT_CHARSET);\n          this._charsetService.setgCharset(2, DEFAULT_CHARSET);\n          this._charsetService.setgCharset(3, DEFAULT_CHARSET);\n          // set VT100 mode here\n          break;\n        case 3:\n          /**\n           * DECCOLM - 132 column mode.\n           * This is only active if 'SetWinLines' (24) is enabled\n           * through `options.windowsOptions`.\n           */\n          if (this._optionsService.rawOptions.windowOptions.setWinLines) {\n            this._bufferService.resize(132, this._bufferService.rows);\n            this._onRequestReset.fire();\n          }\n          break;\n        case 6:\n          this._coreService.decPrivateModes.origin = true;\n          this._setCursor(0, 0);\n          break;\n        case 7:\n          this._coreService.decPrivateModes.wraparound = true;\n          break;\n        case 12:\n          this._optionsService.options.cursorBlink = true;\n          break;\n        case 45:\n          this._coreService.decPrivateModes.reverseWraparound = true;\n          break;\n        case 66:\n          this._logService.debug('Serial port requested application keypad.');\n          this._coreService.decPrivateModes.applicationKeypad = true;\n          this._onRequestSyncScrollBar.fire();\n          break;\n        case 9: // X10 Mouse\n          // no release, no motion, no wheel, no modifiers.\n          this._coreMouseService.activeProtocol = 'X10';\n          break;\n        case 1000: // vt200 mouse\n          // no motion.\n          this._coreMouseService.activeProtocol = 'VT200';\n          break;\n        case 1002: // button event mouse\n          this._coreMouseService.activeProtocol = 'DRAG';\n          break;\n        case 1003: // any event mouse\n          // any event - sends motion events,\n          // even if there is no button held down.\n          this._coreMouseService.activeProtocol = 'ANY';\n          break;\n        case 1004: // send focusin/focusout events\n          // focusin: ^[[I\n          // focusout: ^[[O\n          this._coreService.decPrivateModes.sendFocus = true;\n          this._onRequestSendFocus.fire();\n          break;\n        case 1005: // utf8 ext mode mouse - removed in #2507\n          this._logService.debug('DECSET 1005 not supported (see #2507)');\n          break;\n        case 1006: // sgr ext mode mouse\n          this._coreMouseService.activeEncoding = 'SGR';\n          break;\n        case 1015: // urxvt ext mode mouse - removed in #2507\n          this._logService.debug('DECSET 1015 not supported (see #2507)');\n          break;\n        case 1016: // sgr pixels mode mouse\n          this._coreMouseService.activeEncoding = 'SGR_PIXELS';\n          break;\n        case 25: // show cursor\n          this._coreService.isCursorHidden = false;\n          break;\n        case 1048: // alt screen cursor\n          this.saveCursor();\n          break;\n        case 1049: // alt screen buffer cursor\n          this.saveCursor();\n        // FALL-THROUGH\n        case 47: // alt screen buffer\n        case 1047: // alt screen buffer\n          this._bufferService.buffers.activateAltBuffer(this._eraseAttrData());\n          this._coreService.isCursorInitialized = true;\n          this._onRequestRefreshRows.fire(0, this._bufferService.rows - 1);\n          this._onRequestSyncScrollBar.fire();\n          break;\n        case 2004: // bracketed paste mode (https://cirw.in/blog/bracketed-paste)\n          this._coreService.decPrivateModes.bracketedPasteMode = true;\n          break;\n      }\n    }\n    return true;\n  }\n\n\n  /**\n   * CSI Pm l  Reset Mode (RM).\n   *     Ps = 2  -> Keyboard Action Mode (AM).\n   *     Ps = 4  -> Replace Mode (IRM).\n   *     Ps = 1 2  -> Send/receive (SRM).\n   *     Ps = 2 0  -> Normal Linefeed (LNM).\n   *\n   * @vt: #P[Only IRM is supported.]    CSI RM    \"Reset Mode\"  \"CSI Pm l\"  \"Set various terminal attributes.\"\n   * Supported param values by RM:\n   *\n   * | Param | Action                                 | Support |\n   * | ----- | -------------------------------------- | ------- |\n   * | 2     | Keyboard Action Mode (KAM). Always on. | #N      |\n   * | 4     | Replace Mode (IRM). (default)          | #Y      |\n   * | 12    | Send/receive (SRM). Always off.        | #N      |\n   * | 20    | Normal Linefeed (LNM).                 | #Y      |\n   *\n   *\n   * FIXME: why is LNM commented out?\n   */\n  public resetMode(params: IParams): boolean {\n    for (let i = 0; i < params.length; i++) {\n      switch (params.params[i]) {\n        case 4:\n          this._coreService.modes.insertMode = false;\n          break;\n        case 20:\n          this._optionsService.options.convertEol = false;\n          break;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * CSI ? Pm l\n   *   DEC Private Mode Reset (DECRST).\n   *     Ps = 1  -> Normal Cursor Keys (DECCKM).\n   *     Ps = 2  -> Designate VT52 mode (DECANM).\n   *     Ps = 3  -> 80 Column Mode (DECCOLM).\n   *     Ps = 4  -> Jump (Fast) Scroll (DECSCLM).\n   *     Ps = 5  -> Normal Video (DECSCNM).\n   *     Ps = 6  -> Normal Cursor Mode (DECOM).\n   *     Ps = 7  -> No Wraparound Mode (DECAWM).\n   *     Ps = 8  -> No Auto-repeat Keys (DECARM).\n   *     Ps = 9  -> Don't send Mouse X & Y on button press.\n   *     Ps = 1 0  -> Hide toolbar (rxvt).\n   *     Ps = 1 2  -> Stop Blinking Cursor (att610).\n   *     Ps = 1 8  -> Don't print form feed (DECPFF).\n   *     Ps = 1 9  -> Limit print to scrolling region (DECPEX).\n   *     Ps = 2 5  -> Hide Cursor (DECTCEM).\n   *     Ps = 3 0  -> Don't show scrollbar (rxvt).\n   *     Ps = 3 5  -> Disable font-shifting functions (rxvt).\n   *     Ps = 4 0  -> Disallow 80 -> 132 Mode.\n   *     Ps = 4 1  -> No more(1) fix (see curses resource).\n   *     Ps = 4 2  -> Disable Nation Replacement Character sets (DEC-\n   *     NRCM).\n   *     Ps = 4 4  -> Turn Off Margin Bell.\n   *     Ps = 4 5  -> No Reverse-wraparound Mode.\n   *     Ps = 4 6  -> Stop Logging.  (This is normally disabled by a\n   *     compile-time option).\n   *     Ps = 4 7  -> Use Normal Screen Buffer.\n   *     Ps = 6 6  -> Numeric keypad (DECNKM).\n   *     Ps = 6 7  -> Backarrow key sends delete (DECBKM).\n   *     Ps = 1 0 0 0  -> Don't send Mouse X & Y on button press and\n   *     release.  See the section Mouse Tracking.\n   *     Ps = 1 0 0 1  -> Don't use Hilite Mouse Tracking.\n   *     Ps = 1 0 0 2  -> Don't use Cell Motion Mouse Tracking.\n   *     Ps = 1 0 0 3  -> Don't use All Motion Mouse Tracking.\n   *     Ps = 1 0 0 4  -> Don't send FocusIn/FocusOut events.\n   *     Ps = 1 0 0 5  -> Disable Extended Mouse Mode.\n   *     Ps = 1 0 1 0  -> Don't scroll to bottom on tty output\n   *     (rxvt).\n   *     Ps = 1 0 1 1  -> Don't scroll to bottom on key press (rxvt).\n   *     Ps = 1 0 3 4  -> Don't interpret \"meta\" key.  (This disables\n   *     the eightBitInput resource).\n   *     Ps = 1 0 3 5  -> Disable special modifiers for Alt and Num-\n   *     Lock keys.  (This disables the numLock resource).\n   *     Ps = 1 0 3 6  -> Don't send ESC  when Meta modifies a key.\n   *     (This disables the metaSendsEscape resource).\n   *     Ps = 1 0 3 7  -> Send VT220 Remove from the editing-keypad\n   *     Delete key.\n   *     Ps = 1 0 3 9  -> Don't send ESC  when Alt modifies a key.\n   *     (This disables the altSendsEscape resource).\n   *     Ps = 1 0 4 0  -> Do not keep selection when not highlighted.\n   *     (This disables the keepSelection resource).\n   *     Ps = 1 0 4 1  -> Use the PRIMARY selection.  (This disables\n   *     the selectToClipboard resource).\n   *     Ps = 1 0 4 2  -> Disable Urgency window manager hint when\n   *     Control-G is received.  (This disables the bellIsUrgent\n   *     resource).\n   *     Ps = 1 0 4 3  -> Disable raising of the window when Control-\n   *     G is received.  (This disables the popOnBell resource).\n   *     Ps = 1 0 4 7  -> Use Normal Screen Buffer, clearing screen\n   *     first if in the Alternate Screen.  (This may be disabled by\n   *     the titeInhibit resource).\n   *     Ps = 1 0 4 8  -> Restore cursor as in DECRC.  (This may be\n   *     disabled by the titeInhibit resource).\n   *     Ps = 1 0 4 9  -> Use Normal Screen Buffer and restore cursor\n   *     as in DECRC.  (This may be disabled by the titeInhibit\n   *     resource).  This combines the effects of the 1 0 4 7  and 1 0\n   *     4 8  modes.  Use this with terminfo-based applications rather\n   *     than the 4 7  mode.\n   *     Ps = 1 0 5 0  -> Reset terminfo/termcap function-key mode.\n   *     Ps = 1 0 5 1  -> Reset Sun function-key mode.\n   *     Ps = 1 0 5 2  -> Reset HP function-key mode.\n   *     Ps = 1 0 5 3  -> Reset SCO function-key mode.\n   *     Ps = 1 0 6 0  -> Reset legacy keyboard emulation (X11R6).\n   *     Ps = 1 0 6 1  -> Reset keyboard emulation to Sun/PC style.\n   *     Ps = 2 0 0 4  -> Reset bracketed paste mode.\n   *\n   * @vt: #P[See below for supported modes.]    CSI DECRST  \"DEC Private Reset Mode\" \"CSI ? Pm l\"  \"Reset various terminal attributes.\"\n   * Supported param values by DECRST:\n   *\n   * | param | Action                                                  | Support |\n   * | ----- | ------------------------------------------------------- | ------- |\n   * | 1     | Normal Cursor Keys (DECCKM).                            | #Y      |\n   * | 2     | Designate VT52 mode (DECANM).                           | #N      |\n   * | 3     | 80 Column Mode (DECCOLM).                               | #B[Switches to old column width instead of 80.] |\n   * | 6     | Normal Cursor Mode (DECOM).                             | #Y      |\n   * | 7     | No Wraparound Mode (DECAWM).                            | #Y      |\n   * | 8     | No Auto-repeat Keys (DECARM).                           | #N      |\n   * | 9     | Don't send Mouse X & Y on button press.                 | #Y      |\n   * | 12    | Stop Blinking Cursor.                                   | #Y      |\n   * | 25    | Hide Cursor (DECTCEM).                                  | #Y      |\n   * | 45    | No reverse wrap-around.                                 | #Y      |\n   * | 47    | Use Normal Screen Buffer.                               | #Y      |\n   * | 66    | Numeric keypad (DECNKM).                                | #Y      |\n   * | 1000  | Don't send Mouse reports.                               | #Y      |\n   * | 1002  | Don't use Cell Motion Mouse Tracking.                   | #Y      |\n   * | 1003  | Don't use All Motion Mouse Tracking.                    | #Y      |\n   * | 1004  | Don't send FocusIn/FocusOut events.                     | #Y      |\n   * | 1005  | Disable UTF-8 Mouse Mode.                               | #N      |\n   * | 1006  | Disable SGR Mouse Mode.                                 | #Y      |\n   * | 1015  | Disable urxvt Mouse Mode.                               | #N      |\n   * | 1016  | Disable SGR-Pixels Mouse Mode.                          | #Y      |\n   * | 1047  | Use Normal Screen Buffer (clearing screen if in alt).   | #Y      |\n   * | 1048  | Restore cursor as in DECRC.                             | #Y      |\n   * | 1049  | Use Normal Screen Buffer and restore cursor.            | #Y      |\n   * | 2004  | Reset bracketed paste mode.                             | #Y      |\n   *\n   *\n   * FIXME: DECCOLM is currently broken (already fixed in window options PR)\n   */\n  public resetModePrivate(params: IParams): boolean {\n    for (let i = 0; i < params.length; i++) {\n      switch (params.params[i]) {\n        case 1:\n          this._coreService.decPrivateModes.applicationCursorKeys = false;\n          break;\n        case 3:\n          /**\n           * DECCOLM - 80 column mode.\n           * This is only active if 'SetWinLines' (24) is enabled\n           * through `options.windowsOptions`.\n           */\n          if (this._optionsService.rawOptions.windowOptions.setWinLines) {\n            this._bufferService.resize(80, this._bufferService.rows);\n            this._onRequestReset.fire();\n          }\n          break;\n        case 6:\n          this._coreService.decPrivateModes.origin = false;\n          this._setCursor(0, 0);\n          break;\n        case 7:\n          this._coreService.decPrivateModes.wraparound = false;\n          break;\n        case 12:\n          this._optionsService.options.cursorBlink = false;\n          break;\n        case 45:\n          this._coreService.decPrivateModes.reverseWraparound = false;\n          break;\n        case 66:\n          this._logService.debug('Switching back to normal keypad.');\n          this._coreService.decPrivateModes.applicationKeypad = false;\n          this._onRequestSyncScrollBar.fire();\n          break;\n        case 9: // X10 Mouse\n        case 1000: // vt200 mouse\n        case 1002: // button event mouse\n        case 1003: // any event mouse\n          this._coreMouseService.activeProtocol = 'NONE';\n          break;\n        case 1004: // send focusin/focusout events\n          this._coreService.decPrivateModes.sendFocus = false;\n          break;\n        case 1005: // utf8 ext mode mouse - removed in #2507\n          this._logService.debug('DECRST 1005 not supported (see #2507)');\n          break;\n        case 1006: // sgr ext mode mouse\n          this._coreMouseService.activeEncoding = 'DEFAULT';\n          break;\n        case 1015: // urxvt ext mode mouse - removed in #2507\n          this._logService.debug('DECRST 1015 not supported (see #2507)');\n          break;\n        case 1016: // sgr pixels mode mouse\n          this._coreMouseService.activeEncoding = 'DEFAULT';\n          break;\n        case 25: // hide cursor\n          this._coreService.isCursorHidden = true;\n          break;\n        case 1048: // alt screen cursor\n          this.restoreCursor();\n          break;\n        case 1049: // alt screen buffer cursor\n        // FALL-THROUGH\n        case 47: // normal screen buffer\n        case 1047: // normal screen buffer - clearing it first\n          // Ensure the selection manager has the correct buffer\n          this._bufferService.buffers.activateNormalBuffer();\n          if (params.params[i] === 1049) {\n            this.restoreCursor();\n          }\n          this._coreService.isCursorInitialized = true;\n          this._onRequestRefreshRows.fire(0, this._bufferService.rows - 1);\n          this._onRequestSyncScrollBar.fire();\n          break;\n        case 2004: // bracketed paste mode (https://cirw.in/blog/bracketed-paste)\n          this._coreService.decPrivateModes.bracketedPasteMode = false;\n          break;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps $ p Request ANSI Mode (DECRQM).\n   *\n   * Reports CSI Ps; Pm $ y (DECRPM), where Ps is the mode number as in SM/RM,\n   * and Pm is the mode value:\n   *    0 - not recognized\n   *    1 - set\n   *    2 - reset\n   *    3 - permanently set\n   *    4 - permanently reset\n   *\n   * @vt: #Y  CSI   DECRQM  \"Request Mode\"  \"CSI Ps $p\"  \"Request mode state.\"\n   * Returns a report as `CSI Ps; Pm $ y` (DECRPM), where `Ps` is the mode number as in SM/RM\n   * or DECSET/DECRST, and `Pm` is the mode value:\n   * - 0: not recognized\n   * - 1: set\n   * - 2: reset\n   * - 3: permanently set\n   * - 4: permanently reset\n   *\n   * For modes not understood xterm.js always returns `notRecognized`. In general this means,\n   * that a certain operation mode is not implemented and cannot be used.\n   *\n   * Modes changing the active terminal buffer (47, 1047, 1049) are not subqueried\n   * and only report, whether the alternate buffer is set.\n   *\n   * Mouse encodings and mouse protocols are handled mutual exclusive,\n   * thus only one of each of those can be set at a given time.\n   *\n   * There is a chance, that some mode reports are not fully in line with xterm.js' behavior,\n   * e.g. if the default implementation already exposes a certain behavior. If you find\n   * discrepancies in the mode reports, please file a bug.\n   */\n  public requestMode(params: IParams, ansi: boolean): boolean {\n    // return value as in DECRPM\n    const enum V {\n      NOT_RECOGNIZED = 0,\n      SET = 1,\n      RESET = 2,\n      PERMANENTLY_SET = 3,\n      PERMANENTLY_RESET = 4\n    }\n\n    // access helpers\n    const dm = this._coreService.decPrivateModes;\n    const { activeProtocol: mouseProtocol, activeEncoding: mouseEncoding } = this._coreMouseService;\n    const cs = this._coreService;\n    const { buffers, cols } = this._bufferService;\n    const { active, alt } = buffers;\n    const opts = this._optionsService.rawOptions;\n\n    const f = (m: number, v: V): boolean => {\n      cs.triggerDataEvent(`${C0.ESC}[${ansi ? '' : '?'}${m};${v}$y`);\n      return true;\n    };\n    const b2v = (value: boolean): V => value ? V.SET : V.RESET;\n\n    const p = params.params[0];\n\n    if (ansi) {\n      if (p === 2) return f(p, V.PERMANENTLY_RESET);\n      if (p === 4) return f(p, b2v(cs.modes.insertMode));\n      if (p === 12) return f(p, V.PERMANENTLY_SET);\n      if (p === 20) return f(p, b2v(opts.convertEol));\n      return f(p, V.NOT_RECOGNIZED);\n    }\n\n    if (p === 1) return f(p, b2v(dm.applicationCursorKeys));\n    if (p === 3) return f(p, opts.windowOptions.setWinLines ? (cols === 80 ? V.RESET : cols === 132 ? V.SET : V.NOT_RECOGNIZED) : V.NOT_RECOGNIZED);\n    if (p === 6) return f(p, b2v(dm.origin));\n    if (p === 7) return f(p, b2v(dm.wraparound));\n    if (p === 8) return f(p, V.PERMANENTLY_SET);\n    if (p === 9) return f(p, b2v(mouseProtocol === 'X10'));\n    if (p === 12) return f(p, b2v(opts.cursorBlink));\n    if (p === 25) return f(p, b2v(!cs.isCursorHidden));\n    if (p === 45) return f(p, b2v(dm.reverseWraparound));\n    if (p === 66) return f(p, b2v(dm.applicationKeypad));\n    if (p === 67) return f(p, V.PERMANENTLY_RESET);\n    if (p === 1000) return f(p, b2v(mouseProtocol === 'VT200'));\n    if (p === 1002) return f(p, b2v(mouseProtocol === 'DRAG'));\n    if (p === 1003) return f(p, b2v(mouseProtocol === 'ANY'));\n    if (p === 1004) return f(p, b2v(dm.sendFocus));\n    if (p === 1005) return f(p, V.PERMANENTLY_RESET);\n    if (p === 1006) return f(p, b2v(mouseEncoding === 'SGR'));\n    if (p === 1015) return f(p, V.PERMANENTLY_RESET);\n    if (p === 1016) return f(p, b2v(mouseEncoding === 'SGR_PIXELS'));\n    if (p === 1048) return f(p, V.SET); // xterm always returns SET here\n    if (p === 47 || p === 1047 || p === 1049) return f(p, b2v(active === alt));\n    if (p === 2004) return f(p, b2v(dm.bracketedPasteMode));\n    return f(p, V.NOT_RECOGNIZED);\n  }\n\n  /**\n   * Helper to write color information packed with color mode.\n   */\n  private _updateAttrColor(color: number, mode: number, c1: number, c2: number, c3: number): number {\n    if (mode === 2) {\n      color |= Attributes.CM_RGB;\n      color &= ~Attributes.RGB_MASK;\n      color |= AttributeData.fromColorRGB([c1, c2, c3]);\n    } else if (mode === 5) {\n      color &= ~(Attributes.CM_MASK | Attributes.PCOLOR_MASK);\n      color |= Attributes.CM_P256 | (c1 & 0xff);\n    }\n    return color;\n  }\n\n  /**\n   * Helper to extract and apply color params/subparams.\n   * Returns advance for params index.\n   */\n  private _extractColor(params: IParams, pos: number, attr: IAttributeData): number {\n    // normalize params\n    // meaning: [target, CM, ign, val, val, val]\n    // RGB    : [ 38/48,  2, ign,   r,   g,   b]\n    // P256   : [ 38/48,  5, ign,   v, ign, ign]\n    const accu = [0, 0, -1, 0, 0, 0];\n\n    // alignment placeholder for non color space sequences\n    let cSpace = 0;\n\n    // return advance we took in params\n    let advance = 0;\n\n    do {\n      accu[advance + cSpace] = params.params[pos + advance];\n      if (params.hasSubParams(pos + advance)) {\n        const subparams = params.getSubParams(pos + advance)!;\n        let i = 0;\n        do {\n          if (accu[1] === 5) {\n            cSpace = 1;\n          }\n          accu[advance + i + 1 + cSpace] = subparams[i];\n        } while (++i < subparams.length && i + advance + 1 + cSpace < accu.length);\n        break;\n      }\n      // exit early if can decide color mode with semicolons\n      if ((accu[1] === 5 && advance + cSpace >= 2)\n        || (accu[1] === 2 && advance + cSpace >= 5)) {\n        break;\n      }\n      // offset colorSpace slot for semicolon mode\n      if (accu[1]) {\n        cSpace = 1;\n      }\n    } while (++advance + pos < params.length && advance + cSpace < accu.length);\n\n    // set default values to 0\n    for (let i = 2; i < accu.length; ++i) {\n      if (accu[i] === -1) {\n        accu[i] = 0;\n      }\n    }\n\n    // apply colors\n    switch (accu[0]) {\n      case 38:\n        attr.fg = this._updateAttrColor(attr.fg, accu[1], accu[3], accu[4], accu[5]);\n        break;\n      case 48:\n        attr.bg = this._updateAttrColor(attr.bg, accu[1], accu[3], accu[4], accu[5]);\n        break;\n      case 58:\n        attr.extended = attr.extended.clone();\n        attr.extended.underlineColor = this._updateAttrColor(attr.extended.underlineColor, accu[1], accu[3], accu[4], accu[5]);\n    }\n\n    return advance;\n  }\n\n  /**\n   * SGR 4 subparams:\n   *    4:0   -   equal to SGR 24 (turn off all underline)\n   *    4:1   -   equal to SGR 4 (single underline)\n   *    4:2   -   equal to SGR 21 (double underline)\n   *    4:3   -   curly underline\n   *    4:4   -   dotted underline\n   *    4:5   -   dashed underline\n   */\n  private _processUnderline(style: number, attr: IAttributeData): void {\n    // treat extended attrs as immutable, thus always clone from old one\n    // this is needed since the buffer only holds references to it\n    attr.extended = attr.extended.clone();\n\n    // default to 1 == single underline\n    if (!~style || style > 5) {\n      style = 1;\n    }\n    attr.extended.underlineStyle = style;\n    attr.fg |= FgFlags.UNDERLINE;\n\n    // 0 deactivates underline\n    if (style === 0) {\n      attr.fg &= ~FgFlags.UNDERLINE;\n    }\n\n    // update HAS_EXTENDED in BG\n    attr.updateExtended();\n  }\n\n  private _processSGR0(attr: IAttributeData): void {\n    attr.fg = DEFAULT_ATTR_DATA.fg;\n    attr.bg = DEFAULT_ATTR_DATA.bg;\n    attr.extended = attr.extended.clone();\n    // Reset underline style and color. Note that we don't want to reset other\n    // fields such as the url id.\n    attr.extended.underlineStyle = UnderlineStyle.NONE;\n    attr.extended.underlineColor &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n    attr.updateExtended();\n  }\n\n  /**\n   * CSI Pm m  Character Attributes (SGR).\n   *\n   * @vt: #P[See below for supported attributes.]    CSI SGR   \"Select Graphic Rendition\"  \"CSI Pm m\"  \"Set/Reset various text attributes.\"\n   * SGR selects one or more character attributes at the same time. Multiple params (up to 32)\n   * are applied in order from left to right. The changed attributes are applied to all new\n   * characters received. If you move characters in the viewport by scrolling or any other means,\n   * then the attributes move with the characters.\n   *\n   * Supported param values by SGR:\n   *\n   * | Param     | Meaning                                                  | Support |\n   * | --------- | -------------------------------------------------------- | ------- |\n   * | 0         | Normal (default). Resets any other preceding SGR.        | #Y      |\n   * | 1         | Bold. (also see `options.drawBoldTextInBrightColors`)    | #Y      |\n   * | 2         | Faint, decreased intensity.                              | #Y      |\n   * | 3         | Italic.                                                  | #Y      |\n   * | 4         | Underlined (see below for style support).                | #Y      |\n   * | 5         | Slowly blinking.                                         | #N      |\n   * | 6         | Rapidly blinking.                                        | #N      |\n   * | 7         | Inverse. Flips foreground and background color.          | #Y      |\n   * | 8         | Invisible (hidden).                                      | #Y      |\n   * | 9         | Crossed-out characters (strikethrough).                  | #Y      |\n   * | 21        | Doubly underlined.                                       | #Y      |\n   * | 22        | Normal (neither bold nor faint).                         | #Y      |\n   * | 23        | No italic.                                               | #Y      |\n   * | 24        | Not underlined.                                          | #Y      |\n   * | 25        | Steady (not blinking).                                   | #Y      |\n   * | 27        | Positive (not inverse).                                  | #Y      |\n   * | 28        | Visible (not hidden).                                    | #Y      |\n   * | 29        | Not Crossed-out (strikethrough).                         | #Y      |\n   * | 30        | Foreground color: Black.                                 | #Y      |\n   * | 31        | Foreground color: Red.                                   | #Y      |\n   * | 32        | Foreground color: Green.                                 | #Y      |\n   * | 33        | Foreground color: Yellow.                                | #Y      |\n   * | 34        | Foreground color: Blue.                                  | #Y      |\n   * | 35        | Foreground color: Magenta.                               | #Y      |\n   * | 36        | Foreground color: Cyan.                                  | #Y      |\n   * | 37        | Foreground color: White.                                 | #Y      |\n   * | 38        | Foreground color: Extended color.                        | #P[Support for RGB and indexed colors, see below.] |\n   * | 39        | Foreground color: Default (original).                    | #Y      |\n   * | 40        | Background color: Black.                                 | #Y      |\n   * | 41        | Background color: Red.                                   | #Y      |\n   * | 42        | Background color: Green.                                 | #Y      |\n   * | 43        | Background color: Yellow.                                | #Y      |\n   * | 44        | Background color: Blue.                                  | #Y      |\n   * | 45        | Background color: Magenta.                               | #Y      |\n   * | 46        | Background color: Cyan.                                  | #Y      |\n   * | 47        | Background color: White.                                 | #Y      |\n   * | 48        | Background color: Extended color.                        | #P[Support for RGB and indexed colors, see below.] |\n   * | 49        | Background color: Default (original).                    | #Y      |\n   * | 53        | Overlined.                                               | #Y      |\n   * | 55        | Not Overlined.                                           | #Y      |\n   * | 58        | Underline color: Extended color.                         | #P[Support for RGB and indexed colors, see below.] |\n   * | 90 - 97   | Bright foreground color (analogous to 30 - 37).          | #Y      |\n   * | 100 - 107 | Bright background color (analogous to 40 - 47).          | #Y      |\n   *\n   * Underline supports subparams to denote the style in the form `4 : x`:\n   *\n   * | x      | Meaning                                                       | Support |\n   * | ------ | ------------------------------------------------------------- | ------- |\n   * | 0      | No underline. Same as `SGR 24 m`.                             | #Y      |\n   * | 1      | Single underline. Same as `SGR 4 m`.                          | #Y      |\n   * | 2      | Double underline.                                             | #Y      |\n   * | 3      | Curly underline.                                              | #Y      |\n   * | 4      | Dotted underline.                                             | #Y      |\n   * | 5      | Dashed underline.                                             | #Y      |\n   * | other  | Single underline. Same as `SGR 4 m`.                          | #Y      |\n   *\n   * Extended colors are supported for foreground (Ps=38), background (Ps=48) and underline (Ps=58)\n   * as follows:\n   *\n   * | Ps + 1 | Meaning                                                       | Support |\n   * | ------ | ------------------------------------------------------------- | ------- |\n   * | 0      | Implementation defined.                                       | #N      |\n   * | 1      | Transparent.                                                  | #N      |\n   * | 2      | RGB color as `Ps ; 2 ; R ; G ; B` or `Ps : 2 : : R : G : B`.  | #Y      |\n   * | 3      | CMY color.                                                    | #N      |\n   * | 4      | CMYK color.                                                   | #N      |\n   * | 5      | Indexed (256 colors) as `Ps ; 5 ; INDEX` or `Ps : 5 : INDEX`. | #Y      |\n   *\n   *\n   * FIXME: blinking is implemented in attrs, but not working in renderers?\n   * FIXME: remove dead branch for p=100\n   */\n  public charAttributes(params: IParams): boolean {\n    // Optimize a single SGR0.\n    if (params.length === 1 && params.params[0] === 0) {\n      this._processSGR0(this._curAttrData);\n      return true;\n    }\n\n    const l = params.length;\n    let p;\n    const attr = this._curAttrData;\n\n    for (let i = 0; i < l; i++) {\n      p = params.params[i];\n      if (p >= 30 && p <= 37) {\n        // fg color 8\n        attr.fg &= ~(Attributes.CM_MASK | Attributes.PCOLOR_MASK);\n        attr.fg |= Attributes.CM_P16 | (p - 30);\n      } else if (p >= 40 && p <= 47) {\n        // bg color 8\n        attr.bg &= ~(Attributes.CM_MASK | Attributes.PCOLOR_MASK);\n        attr.bg |= Attributes.CM_P16 | (p - 40);\n      } else if (p >= 90 && p <= 97) {\n        // fg color 16\n        attr.fg &= ~(Attributes.CM_MASK | Attributes.PCOLOR_MASK);\n        attr.fg |= Attributes.CM_P16 | (p - 90) | 8;\n      } else if (p >= 100 && p <= 107) {\n        // bg color 16\n        attr.bg &= ~(Attributes.CM_MASK | Attributes.PCOLOR_MASK);\n        attr.bg |= Attributes.CM_P16 | (p - 100) | 8;\n      } else if (p === 0) {\n        // default\n        this._processSGR0(attr);\n      } else if (p === 1) {\n        // bold text\n        attr.fg |= FgFlags.BOLD;\n      } else if (p === 3) {\n        // italic text\n        attr.bg |= BgFlags.ITALIC;\n      } else if (p === 4) {\n        // underlined text\n        attr.fg |= FgFlags.UNDERLINE;\n        this._processUnderline(params.hasSubParams(i) ? params.getSubParams(i)![0] : UnderlineStyle.SINGLE, attr);\n      } else if (p === 5) {\n        // blink\n        attr.fg |= FgFlags.BLINK;\n      } else if (p === 7) {\n        // inverse and positive\n        // test with: echo -e '\\e[31m\\e[42mhello\\e[7mworld\\e[27mhi\\e[m'\n        attr.fg |= FgFlags.INVERSE;\n      } else if (p === 8) {\n        // invisible\n        attr.fg |= FgFlags.INVISIBLE;\n      } else if (p === 9) {\n        // strikethrough\n        attr.fg |= FgFlags.STRIKETHROUGH;\n      } else if (p === 2) {\n        // dimmed text\n        attr.bg |= BgFlags.DIM;\n      } else if (p === 21) {\n        // double underline\n        this._processUnderline(UnderlineStyle.DOUBLE, attr);\n      } else if (p === 22) {\n        // not bold nor faint\n        attr.fg &= ~FgFlags.BOLD;\n        attr.bg &= ~BgFlags.DIM;\n      } else if (p === 23) {\n        // not italic\n        attr.bg &= ~BgFlags.ITALIC;\n      } else if (p === 24) {\n        // not underlined\n        attr.fg &= ~FgFlags.UNDERLINE;\n        this._processUnderline(UnderlineStyle.NONE, attr);\n      } else if (p === 25) {\n        // not blink\n        attr.fg &= ~FgFlags.BLINK;\n      } else if (p === 27) {\n        // not inverse\n        attr.fg &= ~FgFlags.INVERSE;\n      } else if (p === 28) {\n        // not invisible\n        attr.fg &= ~FgFlags.INVISIBLE;\n      } else if (p === 29) {\n        // not strikethrough\n        attr.fg &= ~FgFlags.STRIKETHROUGH;\n      } else if (p === 39) {\n        // reset fg\n        attr.fg &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n        attr.fg |= DEFAULT_ATTR_DATA.fg & (Attributes.PCOLOR_MASK | Attributes.RGB_MASK);\n      } else if (p === 49) {\n        // reset bg\n        attr.bg &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n        attr.bg |= DEFAULT_ATTR_DATA.bg & (Attributes.PCOLOR_MASK | Attributes.RGB_MASK);\n      } else if (p === 38 || p === 48 || p === 58) {\n        // fg color 256 and RGB\n        i += this._extractColor(params, i, attr);\n      } else if (p === 53) {\n        // overline\n        attr.bg |= BgFlags.OVERLINE;\n      } else if (p === 55) {\n        // not overline\n        attr.bg &= ~BgFlags.OVERLINE;\n      } else if (p === 59) {\n        attr.extended = attr.extended.clone();\n        attr.extended.underlineColor = -1;\n        attr.updateExtended();\n      } else if (p === 100) { // FIXME: dead branch, p=100 already handled above!\n        // reset fg/bg\n        attr.fg &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n        attr.fg |= DEFAULT_ATTR_DATA.fg & (Attributes.PCOLOR_MASK | Attributes.RGB_MASK);\n        attr.bg &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n        attr.bg |= DEFAULT_ATTR_DATA.bg & (Attributes.PCOLOR_MASK | Attributes.RGB_MASK);\n      } else {\n        this._logService.debug('Unknown SGR attribute: %d.', p);\n      }\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps n  Device Status Report (DSR).\n   *     Ps = 5  -> Status Report.  Result (``OK'') is\n   *   CSI 0 n\n   *     Ps = 6  -> Report Cursor Position (CPR) [row;column].\n   *   Result is\n   *   CSI r ; c R\n   * CSI ? Ps n\n   *   Device Status Report (DSR, DEC-specific).\n   *     Ps = 6  -> Report Cursor Position (CPR) [row;column] as CSI\n   *     ? r ; c R (assumes page is zero).\n   *     Ps = 1 5  -> Report Printer status as CSI ? 1 0  n  (ready).\n   *     or CSI ? 1 1  n  (not ready).\n   *     Ps = 2 5  -> Report UDK status as CSI ? 2 0  n  (unlocked)\n   *     or CSI ? 2 1  n  (locked).\n   *     Ps = 2 6  -> Report Keyboard status as\n   *   CSI ? 2 7  ;  1  ;  0  ;  0  n  (North American).\n   *   The last two parameters apply to VT400 & up, and denote key-\n   *   board ready and LK01 respectively.\n   *     Ps = 5 3  -> Report Locator status as\n   *   CSI ? 5 3  n  Locator available, if compiled-in, or\n   *   CSI ? 5 0  n  No Locator, if not.\n   *\n   * @vt: #Y CSI DSR   \"Device Status Report\"  \"CSI Ps n\"  \"Request cursor position (CPR) with `Ps` = 6.\"\n   */\n  public deviceStatus(params: IParams): boolean {\n    switch (params.params[0]) {\n      case 5:\n        // status report\n        this._coreService.triggerDataEvent(`${C0.ESC}[0n`);\n        break;\n      case 6:\n        // cursor position\n        const y = this._activeBuffer.y + 1;\n        const x = this._activeBuffer.x + 1;\n        this._coreService.triggerDataEvent(`${C0.ESC}[${y};${x}R`);\n        break;\n    }\n    return true;\n  }\n\n  // @vt: #P[Only CPR is supported.]  CSI DECDSR  \"DEC Device Status Report\"  \"CSI ? Ps n\"  \"Only CPR is supported (same as DSR).\"\n  public deviceStatusPrivate(params: IParams): boolean {\n    // modern xterm doesnt seem to\n    // respond to any of these except ?6, 6, and 5\n    switch (params.params[0]) {\n      case 6:\n        // cursor position\n        const y = this._activeBuffer.y + 1;\n        const x = this._activeBuffer.x + 1;\n        this._coreService.triggerDataEvent(`${C0.ESC}[?${y};${x}R`);\n        break;\n      case 15:\n        // no printer\n        // this.handler(C0.ESC + '[?11n');\n        break;\n      case 25:\n        // dont support user defined keys\n        // this.handler(C0.ESC + '[?21n');\n        break;\n      case 26:\n        // north american keyboard\n        // this.handler(C0.ESC + '[?27;1;0;0n');\n        break;\n      case 53:\n        // no dec locator/mouse\n        // this.handler(C0.ESC + '[?50n');\n        break;\n    }\n    return true;\n  }\n\n  /**\n   * CSI ! p   Soft terminal reset (DECSTR).\n   * http://vt100.net/docs/vt220-rm/table4-10.html\n   *\n   * @vt: #Y CSI DECSTR  \"Soft Terminal Reset\"   \"CSI ! p\"   \"Reset several terminal attributes to initial state.\"\n   * There are two terminal reset sequences - RIS and DECSTR. While RIS performs almost a full\n   * terminal bootstrap, DECSTR only resets certain attributes. For most needs DECSTR should be\n   * sufficient.\n   *\n   * The following terminal attributes are reset to default values:\n   * - IRM is reset (dafault = false)\n   * - scroll margins are reset (default = viewport size)\n   * - erase attributes are reset to default\n   * - charsets are reset\n   * - DECSC data is reset to initial values\n   * - DECOM is reset to absolute mode\n   *\n   *\n   * FIXME: there are several more attributes missing (see VT520 manual)\n   */\n  public softReset(params: IParams): boolean {\n    this._coreService.isCursorHidden = false;\n    this._onRequestSyncScrollBar.fire();\n    this._activeBuffer.scrollTop = 0;\n    this._activeBuffer.scrollBottom = this._bufferService.rows - 1;\n    this._curAttrData = DEFAULT_ATTR_DATA.clone();\n    this._coreService.reset();\n    this._charsetService.reset();\n\n    // reset DECSC data\n    this._activeBuffer.savedX = 0;\n    this._activeBuffer.savedY = this._activeBuffer.ybase;\n    this._activeBuffer.savedCurAttrData.fg = this._curAttrData.fg;\n    this._activeBuffer.savedCurAttrData.bg = this._curAttrData.bg;\n    this._activeBuffer.savedCharset = this._charsetService.charset;\n\n    // reset DECOM\n    this._coreService.decPrivateModes.origin = false;\n    return true;\n  }\n\n  /**\n   * CSI Ps SP q  Set cursor style (DECSCUSR, VT520).\n   *   Ps = 0  -> blinking block.\n   *   Ps = 1  -> blinking block (default).\n   *   Ps = 2  -> steady block.\n   *   Ps = 3  -> blinking underline.\n   *   Ps = 4  -> steady underline.\n   *   Ps = 5  -> blinking bar (xterm).\n   *   Ps = 6  -> steady bar (xterm).\n   *\n   * @vt: #Y CSI DECSCUSR  \"Set Cursor Style\"  \"CSI Ps SP q\"   \"Set cursor style.\"\n   * Supported cursor styles:\n   *  - empty, 0 or 1: steady block\n   *  - 2: blink block\n   *  - 3: steady underline\n   *  - 4: blink underline\n   *  - 5: steady bar\n   *  - 6: blink bar\n   */\n  public setCursorStyle(params: IParams): boolean {\n    const param = params.params[0] || 1;\n    switch (param) {\n      case 1:\n      case 2:\n        this._optionsService.options.cursorStyle = 'block';\n        break;\n      case 3:\n      case 4:\n        this._optionsService.options.cursorStyle = 'underline';\n        break;\n      case 5:\n      case 6:\n        this._optionsService.options.cursorStyle = 'bar';\n        break;\n    }\n    const isBlinking = param % 2 === 1;\n    this._optionsService.options.cursorBlink = isBlinking;\n    return true;\n  }\n\n  /**\n   * CSI Ps ; Ps r\n   *   Set Scrolling Region [top;bottom] (default = full size of win-\n   *   dow) (DECSTBM).\n   *\n   * @vt: #Y CSI DECSTBM \"Set Top and Bottom Margin\" \"CSI Ps ; Ps r\" \"Set top and bottom margins of the viewport [top;bottom] (default = viewport size).\"\n   */\n  public setScrollRegion(params: IParams): boolean {\n    const top = params.params[0] || 1;\n    let bottom: number;\n\n    if (params.length < 2 || (bottom = params.params[1]) > this._bufferService.rows || bottom === 0) {\n      bottom = this._bufferService.rows;\n    }\n\n    if (bottom > top) {\n      this._activeBuffer.scrollTop = top - 1;\n      this._activeBuffer.scrollBottom = bottom - 1;\n      this._setCursor(0, 0);\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps ; Ps ; Ps t - Various window manipulations and reports (xterm)\n   *\n   * Note: Only those listed below are supported. All others are left to integrators and\n   * need special treatment based on the embedding environment.\n   *\n   *    Ps = 1 4                                                          supported\n   *      Report xterm text area size in pixels.\n   *      Result is CSI 4 ; height ; width t\n   *    Ps = 14 ; 2                                                       not implemented\n   *    Ps = 16                                                           supported\n   *      Report xterm character cell size in pixels.\n   *      Result is CSI 6 ; height ; width t\n   *    Ps = 18                                                           supported\n   *      Report the size of the text area in characters.\n   *      Result is CSI 8 ; height ; width t\n   *    Ps = 20                                                           supported\n   *      Report xterm window's icon label.\n   *      Result is OSC L label ST\n   *    Ps = 21                                                           supported\n   *      Report xterm window's title.\n   *      Result is OSC l label ST\n   *    Ps = 22 ; 0  -> Save xterm icon and window title on stack.        supported\n   *    Ps = 22 ; 1  -> Save xterm icon title on stack.                   supported\n   *    Ps = 22 ; 2  -> Save xterm window title on stack.                 supported\n   *    Ps = 23 ; 0  -> Restore xterm icon and window title from stack.   supported\n   *    Ps = 23 ; 1  -> Restore xterm icon title from stack.              supported\n   *    Ps = 23 ; 2  -> Restore xterm window title from stack.            supported\n   *    Ps >= 24                                                          not implemented\n   */\n  public windowOptions(params: IParams): boolean {\n    if (!paramToWindowOption(params.params[0], this._optionsService.rawOptions.windowOptions)) {\n      return true;\n    }\n    const second = (params.length > 1) ? params.params[1] : 0;\n    switch (params.params[0]) {\n      case 14:  // GetWinSizePixels, returns CSI 4 ; height ; width t\n        if (second !== 2) {\n          this._onRequestWindowsOptionsReport.fire(WindowsOptionsReportType.GET_WIN_SIZE_PIXELS);\n        }\n        break;\n      case 16:  // GetCellSizePixels, returns CSI 6 ; height ; width t\n        this._onRequestWindowsOptionsReport.fire(WindowsOptionsReportType.GET_CELL_SIZE_PIXELS);\n        break;\n      case 18:  // GetWinSizeChars, returns CSI 8 ; height ; width t\n        if (this._bufferService) {\n          this._coreService.triggerDataEvent(`${C0.ESC}[8;${this._bufferService.rows};${this._bufferService.cols}t`);\n        }\n        break;\n      case 22:  // PushTitle\n        if (second === 0 || second === 2) {\n          this._windowTitleStack.push(this._windowTitle);\n          if (this._windowTitleStack.length > STACK_LIMIT) {\n            this._windowTitleStack.shift();\n          }\n        }\n        if (second === 0 || second === 1) {\n          this._iconNameStack.push(this._iconName);\n          if (this._iconNameStack.length > STACK_LIMIT) {\n            this._iconNameStack.shift();\n          }\n        }\n        break;\n      case 23:  // PopTitle\n        if (second === 0 || second === 2) {\n          if (this._windowTitleStack.length) {\n            this.setTitle(this._windowTitleStack.pop()!);\n          }\n        }\n        if (second === 0 || second === 1) {\n          if (this._iconNameStack.length) {\n            this.setIconName(this._iconNameStack.pop()!);\n          }\n        }\n        break;\n    }\n    return true;\n  }\n\n\n  /**\n   * CSI s\n   * ESC 7\n   *   Save cursor (ANSI.SYS).\n   *\n   * @vt: #P[TODO...]  CSI SCOSC   \"Save Cursor\"   \"CSI s\"   \"Save cursor position, charmap and text attributes.\"\n   * @vt: #Y ESC  SC   \"Save Cursor\"   \"ESC 7\"   \"Save cursor position, charmap and text attributes.\"\n   */\n  public saveCursor(params?: IParams): boolean {\n    this._activeBuffer.savedX = this._activeBuffer.x;\n    this._activeBuffer.savedY = this._activeBuffer.ybase + this._activeBuffer.y;\n    this._activeBuffer.savedCurAttrData.fg = this._curAttrData.fg;\n    this._activeBuffer.savedCurAttrData.bg = this._curAttrData.bg;\n    this._activeBuffer.savedCharset = this._charsetService.charset;\n    return true;\n  }\n\n\n  /**\n   * CSI u\n   * ESC 8\n   *   Restore cursor (ANSI.SYS).\n   *\n   * @vt: #P[TODO...]  CSI SCORC \"Restore Cursor\"  \"CSI u\"   \"Restore cursor position, charmap and text attributes.\"\n   * @vt: #Y ESC  RC \"Restore Cursor\"  \"ESC 8\"   \"Restore cursor position, charmap and text attributes.\"\n   */\n  public restoreCursor(params?: IParams): boolean {\n    this._activeBuffer.x = this._activeBuffer.savedX || 0;\n    this._activeBuffer.y = Math.max(this._activeBuffer.savedY - this._activeBuffer.ybase, 0);\n    this._curAttrData.fg = this._activeBuffer.savedCurAttrData.fg;\n    this._curAttrData.bg = this._activeBuffer.savedCurAttrData.bg;\n    this._charsetService.charset = (this as any)._savedCharset;\n    if (this._activeBuffer.savedCharset) {\n      this._charsetService.charset = this._activeBuffer.savedCharset;\n    }\n    this._restrictCursor();\n    return true;\n  }\n\n\n  /**\n   * OSC 2; <data> ST (set window title)\n   *   Proxy to set window title.\n   *\n   * @vt: #P[Icon name is not exposed.]   OSC    0   \"Set Windows Title and Icon Name\"  \"OSC 0 ; Pt BEL\"  \"Set window title and icon name.\"\n   * Icon name is not supported. For Window Title see below.\n   *\n   * @vt: #Y     OSC    2   \"Set Windows Title\"  \"OSC 2 ; Pt BEL\"  \"Set window title.\"\n   * xterm.js does not manipulate the title directly, instead exposes changes via the event\n   * `Terminal.onTitleChange`.\n   */\n  public setTitle(data: string): boolean {\n    this._windowTitle = data;\n    this._onTitleChange.fire(data);\n    return true;\n  }\n\n  /**\n   * OSC 1; <data> ST\n   * Note: Icon name is not exposed.\n   */\n  public setIconName(data: string): boolean {\n    this._iconName = data;\n    return true;\n  }\n\n  /**\n   * OSC 4; <num> ; <text> ST (set ANSI color <num> to <text>)\n   *\n   * @vt: #Y    OSC    4    \"Set ANSI color\"   \"OSC 4 ; c ; spec BEL\" \"Change color number `c` to the color specified by `spec`.\"\n   * `c` is the color index between 0 and 255. The color format of `spec` is derived from\n   * `XParseColor` (see OSC 10 for supported formats). There may be multipe `c ; spec` pairs present\n   * in the same instruction. If `spec` contains `?` the terminal returns a sequence with the\n   * currently set color.\n   */\n  public setOrReportIndexedColor(data: string): boolean {\n    const event: IColorEvent = [];\n    const slots = data.split(';');\n    while (slots.length > 1) {\n      const idx = slots.shift() as string;\n      const spec = slots.shift() as string;\n      if (/^\\d+$/.exec(idx)) {\n        const index = parseInt(idx);\n        if (isValidColorIndex(index)) {\n          if (spec === '?') {\n            event.push({ type: ColorRequestType.REPORT, index });\n          } else {\n            const color = parseColor(spec);\n            if (color) {\n              event.push({ type: ColorRequestType.SET, index, color });\n            }\n          }\n        }\n      }\n    }\n    if (event.length) {\n      this._onColor.fire(event);\n    }\n    return true;\n  }\n\n  /**\n   * OSC 8 ; <params> ; <uri> ST - create hyperlink\n   * OSC 8 ; ; ST - finish hyperlink\n   *\n   * Test case:\n   *\n   * ```sh\n   * printf '\\e]8;;http://example.com\\e\\\\This is a link\\e]8;;\\e\\\\\\n'\n   * ```\n   *\n   * @vt: #Y    OSC    8    \"Create hyperlink\"   \"OSC 8 ; params ; uri BEL\" \"Create a hyperlink to `uri` using `params`.\"\n   * `uri` is a hyperlink starting with `http://`, `https://`, `ftp://`, `file://` or `mailto://`. `params` is an\n   * optional list of key=value assignments, separated by the : character.\n   * Example: `id=xyz123:foo=bar:baz=quux`.\n   * Currently only the id key is defined. Cells that share the same ID and URI share hover\n   * feedback. Use `OSC 8 ; ; BEL` to finish the current hyperlink.\n   */\n  public setHyperlink(data: string): boolean {\n    const args = data.split(';');\n    if (args.length < 2) {\n      return false;\n    }\n    if (args[1]) {\n      return this._createHyperlink(args[0], args[1]);\n    }\n    if (args[0]) {\n      return false;\n    }\n    return this._finishHyperlink();\n  }\n\n  private _createHyperlink(params: string, uri: string): boolean {\n    // It's legal to open a new hyperlink without explicitly finishing the previous one\n    if (this._getCurrentLinkId()) {\n      this._finishHyperlink();\n    }\n    const parsedParams = params.split(':');\n    let id: string | undefined;\n    const idParamIndex = parsedParams.findIndex(e => e.startsWith('id='));\n    if (idParamIndex !== -1) {\n      id = parsedParams[idParamIndex].slice(3) || undefined;\n    }\n    this._curAttrData.extended = this._curAttrData.extended.clone();\n    this._curAttrData.extended.urlId = this._oscLinkService.registerLink({ id, uri });\n    this._curAttrData.updateExtended();\n    return true;\n  }\n\n  private _finishHyperlink(): boolean {\n    this._curAttrData.extended = this._curAttrData.extended.clone();\n    this._curAttrData.extended.urlId = 0;\n    this._curAttrData.updateExtended();\n    return true;\n  }\n\n  // special colors - OSC 10 | 11 | 12\n  private _specialColors = [SpecialColorIndex.FOREGROUND, SpecialColorIndex.BACKGROUND, SpecialColorIndex.CURSOR];\n\n  /**\n   * Apply colors requests for special colors in OSC 10 | 11 | 12.\n   * Since these commands are stacking from multiple parameters,\n   * we handle them in a loop with an entry offset to `_specialColors`.\n   */\n  private _setOrReportSpecialColor(data: string, offset: number): boolean {\n    const slots = data.split(';');\n    for (let i = 0; i < slots.length; ++i, ++offset) {\n      if (offset >= this._specialColors.length) break;\n      if (slots[i] === '?') {\n        this._onColor.fire([{ type: ColorRequestType.REPORT, index: this._specialColors[offset] }]);\n      } else {\n        const color = parseColor(slots[i]);\n        if (color) {\n          this._onColor.fire([{ type: ColorRequestType.SET, index: this._specialColors[offset], color }]);\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * OSC 10 ; <xcolor name>|<?> ST - set or query default foreground color\n   *\n   * @vt: #Y  OSC   10    \"Set or query default foreground color\"   \"OSC 10 ; Pt BEL\"  \"Set or query default foreground color.\"\n   * To set the color, the following color specification formats are supported:\n   * - `rgb:<red>/<green>/<blue>` for  `<red>, <green>, <blue>` in `h | hh | hhh | hhhh`, where\n   *   `h` is a single hexadecimal digit (case insignificant). The different widths scale\n   *   from 4 bit (`h`) to 16 bit (`hhhh`) and get converted to 8 bit (`hh`).\n   * - `#RGB` - 4 bits per channel, expanded to `#R0G0B0`\n   * - `#RRGGBB` - 8 bits per channel\n   * - `#RRRGGGBBB` - 12 bits per channel, truncated to `#RRGGBB`\n   * - `#RRRRGGGGBBBB` - 16 bits per channel, truncated to `#RRGGBB`\n   *\n   * **Note:** X11 named colors are currently unsupported.\n   *\n   * If `Pt` contains `?` instead of a color specification, the terminal\n   * returns a sequence with the current default foreground color\n   * (use that sequence to restore the color after changes).\n   *\n   * **Note:** Other than xterm, xterm.js does not support OSC 12 - 19.\n   * Therefore stacking multiple `Pt` separated by `;` only works for the first two entries.\n   */\n  public setOrReportFgColor(data: string): boolean {\n    return this._setOrReportSpecialColor(data, 0);\n  }\n\n  /**\n   * OSC 11 ; <xcolor name>|<?> ST - set or query default background color\n   *\n   * @vt: #Y  OSC   11    \"Set or query default background color\"   \"OSC 11 ; Pt BEL\"  \"Same as OSC 10, but for default background.\"\n   */\n  public setOrReportBgColor(data: string): boolean {\n    return this._setOrReportSpecialColor(data, 1);\n  }\n\n  /**\n   * OSC 12 ; <xcolor name>|<?> ST - set or query default cursor color\n   *\n   * @vt: #Y  OSC   12    \"Set or query default cursor color\"   \"OSC 12 ; Pt BEL\"  \"Same as OSC 10, but for default cursor color.\"\n   */\n  public setOrReportCursorColor(data: string): boolean {\n    return this._setOrReportSpecialColor(data, 2);\n  }\n\n  /**\n   * OSC 104 ; <num> ST - restore ANSI color <num>\n   *\n   * @vt: #Y  OSC   104    \"Reset ANSI color\"   \"OSC 104 ; c BEL\" \"Reset color number `c` to themed color.\"\n   * `c` is the color index between 0 and 255. This function restores the default color for `c` as\n   * specified by the loaded theme. Any number of `c` parameters may be given.\n   * If no parameters are given, the entire indexed color table will be reset.\n   */\n  public restoreIndexedColor(data: string): boolean {\n    if (!data) {\n      this._onColor.fire([{ type: ColorRequestType.RESTORE }]);\n      return true;\n    }\n    const event: IColorEvent = [];\n    const slots = data.split(';');\n    for (let i = 0; i < slots.length; ++i) {\n      if (/^\\d+$/.exec(slots[i])) {\n        const index = parseInt(slots[i]);\n        if (isValidColorIndex(index)) {\n          event.push({ type: ColorRequestType.RESTORE, index });\n        }\n      }\n    }\n    if (event.length) {\n      this._onColor.fire(event);\n    }\n    return true;\n  }\n\n  /**\n   * OSC 110 ST - restore default foreground color\n   *\n   * @vt: #Y  OSC   110    \"Restore default foreground color\"   \"OSC 110 BEL\"  \"Restore default foreground to themed color.\"\n   */\n  public restoreFgColor(data: string): boolean {\n    this._onColor.fire([{ type: ColorRequestType.RESTORE, index: SpecialColorIndex.FOREGROUND }]);\n    return true;\n  }\n\n  /**\n   * OSC 111 ST - restore default background color\n   *\n   * @vt: #Y  OSC   111    \"Restore default background color\"   \"OSC 111 BEL\"  \"Restore default background to themed color.\"\n   */\n  public restoreBgColor(data: string): boolean {\n    this._onColor.fire([{ type: ColorRequestType.RESTORE, index: SpecialColorIndex.BACKGROUND }]);\n    return true;\n  }\n\n  /**\n   * OSC 112 ST - restore default cursor color\n   *\n   * @vt: #Y  OSC   112    \"Restore default cursor color\"   \"OSC 112 BEL\"  \"Restore default cursor to themed color.\"\n   */\n  public restoreCursorColor(data: string): boolean {\n    this._onColor.fire([{ type: ColorRequestType.RESTORE, index: SpecialColorIndex.CURSOR }]);\n    return true;\n  }\n\n  /**\n   * ESC E\n   * C1.NEL\n   *   DEC mnemonic: NEL (https://vt100.net/docs/vt510-rm/NEL)\n   *   Moves cursor to first position on next line.\n   *\n   * @vt: #Y   C1    NEL   \"Next Line\"   \"\\x85\"    \"Move the cursor to the beginning of the next row.\"\n   * @vt: #Y   ESC   NEL   \"Next Line\"   \"ESC E\"   \"Move the cursor to the beginning of the next row.\"\n   */\n  public nextLine(): boolean {\n    this._activeBuffer.x = 0;\n    this.index();\n    return true;\n  }\n\n  /**\n   * ESC =\n   *   DEC mnemonic: DECKPAM (https://vt100.net/docs/vt510-rm/DECKPAM.html)\n   *   Enables the numeric keypad to send application sequences to the host.\n   */\n  public keypadApplicationMode(): boolean {\n    this._logService.debug('Serial port requested application keypad.');\n    this._coreService.decPrivateModes.applicationKeypad = true;\n    this._onRequestSyncScrollBar.fire();\n    return true;\n  }\n\n  /**\n   * ESC >\n   *   DEC mnemonic: DECKPNM (https://vt100.net/docs/vt510-rm/DECKPNM.html)\n   *   Enables the keypad to send numeric characters to the host.\n   */\n  public keypadNumericMode(): boolean {\n    this._logService.debug('Switching back to normal keypad.');\n    this._coreService.decPrivateModes.applicationKeypad = false;\n    this._onRequestSyncScrollBar.fire();\n    return true;\n  }\n\n  /**\n   * ESC % @\n   * ESC % G\n   *   Select default character set. UTF-8 is not supported (string are unicode anyways)\n   *   therefore ESC % G does the same.\n   */\n  public selectDefaultCharset(): boolean {\n    this._charsetService.setgLevel(0);\n    this._charsetService.setgCharset(0, DEFAULT_CHARSET); // US (default)\n    return true;\n  }\n\n  /**\n   * ESC ( C\n   *   Designate G0 Character Set, VT100, ISO 2022.\n   * ESC ) C\n   *   Designate G1 Character Set (ISO 2022, VT100).\n   * ESC * C\n   *   Designate G2 Character Set (ISO 2022, VT220).\n   * ESC + C\n   *   Designate G3 Character Set (ISO 2022, VT220).\n   * ESC - C\n   *   Designate G1 Character Set (VT300).\n   * ESC . C\n   *   Designate G2 Character Set (VT300).\n   * ESC / C\n   *   Designate G3 Character Set (VT300). C = A  -> ISO Latin-1 Supplemental. - Supported?\n   */\n  public selectCharset(collectAndFlag: string): boolean {\n    if (collectAndFlag.length !== 2) {\n      this.selectDefaultCharset();\n      return true;\n    }\n    if (collectAndFlag[0] === '/') {\n      return true;  // TODO: Is this supported?\n    }\n    this._charsetService.setgCharset(GLEVEL[collectAndFlag[0]], CHARSETS[collectAndFlag[1]] || DEFAULT_CHARSET);\n    return true;\n  }\n\n  /**\n   * ESC D\n   * C1.IND\n   *   DEC mnemonic: IND (https://vt100.net/docs/vt510-rm/IND.html)\n   *   Moves the cursor down one line in the same column.\n   *\n   * @vt: #Y   C1    IND   \"Index\"   \"\\x84\"    \"Move the cursor one line down scrolling if needed.\"\n   * @vt: #Y   ESC   IND   \"Index\"   \"ESC D\"   \"Move the cursor one line down scrolling if needed.\"\n   */\n  public index(): boolean {\n    this._restrictCursor();\n    this._activeBuffer.y++;\n    if (this._activeBuffer.y === this._activeBuffer.scrollBottom + 1) {\n      this._activeBuffer.y--;\n      this._bufferService.scroll(this._eraseAttrData());\n    } else if (this._activeBuffer.y >= this._bufferService.rows) {\n      this._activeBuffer.y = this._bufferService.rows - 1;\n    }\n    this._restrictCursor();\n    return true;\n  }\n\n  /**\n   * ESC H\n   * C1.HTS\n   *   DEC mnemonic: HTS (https://vt100.net/docs/vt510-rm/HTS.html)\n   *   Sets a horizontal tab stop at the column position indicated by\n   *   the value of the active column when the terminal receives an HTS.\n   *\n   * @vt: #Y   C1    HTS   \"Horizontal Tabulation Set\" \"\\x88\"    \"Places a tab stop at the current cursor position.\"\n   * @vt: #Y   ESC   HTS   \"Horizontal Tabulation Set\" \"ESC H\"   \"Places a tab stop at the current cursor position.\"\n   */\n  public tabSet(): boolean {\n    this._activeBuffer.tabs[this._activeBuffer.x] = true;\n    return true;\n  }\n\n  /**\n   * ESC M\n   * C1.RI\n   *   DEC mnemonic: HTS\n   *   Moves the cursor up one line in the same column. If the cursor is at the top margin,\n   *   the page scrolls down.\n   *\n   * @vt: #Y ESC  IR \"Reverse Index\" \"ESC M\"  \"Move the cursor one line up scrolling if needed.\"\n   */\n  public reverseIndex(): boolean {\n    this._restrictCursor();\n    if (this._activeBuffer.y === this._activeBuffer.scrollTop) {\n      // possibly move the code below to term.reverseScroll();\n      // test: echo -ne '\\e[1;1H\\e[44m\\eM\\e[0m'\n      // blankLine(true) is xterm/linux behavior\n      const scrollRegionHeight = this._activeBuffer.scrollBottom - this._activeBuffer.scrollTop;\n      this._activeBuffer.lines.shiftElements(this._activeBuffer.ybase + this._activeBuffer.y, scrollRegionHeight, 1);\n      this._activeBuffer.lines.set(this._activeBuffer.ybase + this._activeBuffer.y, this._activeBuffer.getBlankLine(this._eraseAttrData()));\n      this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    } else {\n      this._activeBuffer.y--;\n      this._restrictCursor(); // quickfix to not run out of bounds\n    }\n    return true;\n  }\n\n  /**\n   * ESC c\n   *   DEC mnemonic: RIS (https://vt100.net/docs/vt510-rm/RIS.html)\n   *   Reset to initial state.\n   */\n  public fullReset(): boolean {\n    this._parser.reset();\n    this._onRequestReset.fire();\n    return true;\n  }\n\n  public reset(): void {\n    this._curAttrData = DEFAULT_ATTR_DATA.clone();\n    this._eraseAttrDataInternal = DEFAULT_ATTR_DATA.clone();\n  }\n\n  /**\n   * back_color_erase feature for xterm.\n   */\n  private _eraseAttrData(): IAttributeData {\n    this._eraseAttrDataInternal.bg &= ~(Attributes.CM_MASK | 0xFFFFFF);\n    this._eraseAttrDataInternal.bg |= this._curAttrData.bg & ~0xFC000000;\n    return this._eraseAttrDataInternal;\n  }\n\n  /**\n   * ESC n\n   * ESC o\n   * ESC |\n   * ESC }\n   * ESC ~\n   *   DEC mnemonic: LS (https://vt100.net/docs/vt510-rm/LS.html)\n   *   When you use a locking shift, the character set remains in GL or GR until\n   *   you use another locking shift. (partly supported)\n   */\n  public setgLevel(level: number): boolean {\n    this._charsetService.setgLevel(level);\n    return true;\n  }\n\n  /**\n   * ESC # 8\n   *   DEC mnemonic: DECALN (https://vt100.net/docs/vt510-rm/DECALN.html)\n   *   This control function fills the complete screen area with\n   *   a test pattern (E) used for adjusting screen alignment.\n   *\n   * @vt: #Y   ESC   DECALN   \"Screen Alignment Pattern\"  \"ESC # 8\"  \"Fill viewport with a test pattern (E).\"\n   */\n  public screenAlignmentPattern(): boolean {\n    // prepare cell data\n    const cell = new CellData();\n    cell.content = 1 << Content.WIDTH_SHIFT | 'E'.charCodeAt(0);\n    cell.fg = this._curAttrData.fg;\n    cell.bg = this._curAttrData.bg;\n\n\n    this._setCursor(0, 0);\n    for (let yOffset = 0; yOffset < this._bufferService.rows; ++yOffset) {\n      const row = this._activeBuffer.ybase + this._activeBuffer.y + yOffset;\n      const line = this._activeBuffer.lines.get(row);\n      if (line) {\n        line.fill(cell);\n        line.isWrapped = false;\n      }\n    }\n    this._dirtyRowTracker.markAllDirty();\n    this._setCursor(0, 0);\n    return true;\n  }\n\n\n  /**\n   * DCS $ q Pt ST\n   *   DECRQSS (https://vt100.net/docs/vt510-rm/DECRQSS.html)\n   *   Request Status String (DECRQSS), VT420 and up.\n   *   Response: DECRPSS (https://vt100.net/docs/vt510-rm/DECRPSS.html)\n   *\n   * @vt: #P[Limited support, see below.]  DCS   DECRQSS   \"Request Selection or Setting\"  \"DCS $ q Pt ST\"   \"Request several terminal settings.\"\n   * Response is in the form `ESC P 1 $ r Pt ST` for valid requests, where `Pt` contains the\n   * corresponding CSI string, `ESC P 0 ST` for invalid requests.\n   *\n   * Supported requests and responses:\n   *\n   * | Type                             | Request           | Response (`Pt`)                                       |\n   * | -------------------------------- | ----------------- | ----------------------------------------------------- |\n   * | Graphic Rendition (SGR)          | `DCS $ q m ST`    | always reporting `0m` (currently broken)              |\n   * | Top and Bottom Margins (DECSTBM) | `DCS $ q r ST`    | `Ps ; Ps r`                                           |\n   * | Cursor Style (DECSCUSR)          | `DCS $ q SP q ST` | `Ps SP q`                                             |\n   * | Protection Attribute (DECSCA)    | `DCS $ q \" q ST`  | `Ps \" q` (DECSCA 2 is reported as Ps = 0)             |\n   * | Conformance Level (DECSCL)       | `DCS $ q \" p ST`  | always reporting `61 ; 1 \" p` (DECSCL is unsupported) |\n   *\n   *\n   * TODO:\n   * - fix SGR report\n   * - either check which conformance is better suited or remove the report completely\n   *   --> we are currently a mixture of all up to VT400 but dont follow anyone strictly\n   */\n  public requestStatusString(data: string, params: IParams): boolean {\n    const f = (s: string): boolean => {\n      this._coreService.triggerDataEvent(`${C0.ESC}${s}${C0.ESC}\\\\`);\n      return true;\n    };\n\n    // access helpers\n    const b = this._bufferService.buffer;\n    const opts = this._optionsService.rawOptions;\n    const STYLES: { [key: string]: number } = { 'block': 2, 'underline': 4, 'bar': 6 };\n\n    if (data === '\"q') return f(`P1$r${this._curAttrData.isProtected() ? 1 : 0}\"q`);\n    if (data === '\"p') return f(`P1$r61;1\"p`);\n    if (data === 'r') return f(`P1$r${b.scrollTop + 1};${b.scrollBottom + 1}r`);\n    // FIXME: report real SGR settings instead of 0m\n    if (data === 'm') return f(`P1$r0m`);\n    if (data === ' q') return f(`P1$r${STYLES[opts.cursorStyle] - (opts.cursorBlink ? 1 : 0)} q`);\n    return f(`P0$r`);\n  }\n\n  public markRangeDirty(y1: number, y2: number): void {\n    this._dirtyRowTracker.markRangeDirty(y1, y2);\n  }\n}\n\nexport interface IDirtyRowTracker {\n  readonly start: number;\n  readonly end: number;\n\n  clearRange(): void;\n  markDirty(y: number): void;\n  markRangeDirty(y1: number, y2: number): void;\n  markAllDirty(): void;\n}\n\nclass DirtyRowTracker implements IDirtyRowTracker {\n  public start!: number;\n  public end!: number;\n\n  constructor(\n    @IBufferService private readonly _bufferService: IBufferService\n  ) {\n    this.clearRange();\n  }\n\n  public clearRange(): void {\n    this.start = this._bufferService.buffer.y;\n    this.end = this._bufferService.buffer.y;\n  }\n\n  public markDirty(y: number): void {\n    if (y < this.start) {\n      this.start = y;\n    } else if (y > this.end) {\n      this.end = y;\n    }\n  }\n\n  public markRangeDirty(y1: number, y2: number): void {\n    if (y1 > y2) {\n      $temp = y1;\n      y1 = y2;\n      y2 = $temp;\n    }\n    if (y1 < this.start) {\n      this.start = y1;\n    }\n    if (y2 > this.end) {\n      this.end = y2;\n    }\n  }\n\n  public markAllDirty(): void {\n    this.markRangeDirty(0, this._bufferService.rows - 1);\n  }\n}\n\nfunction isValidColorIndex(value: number): value is ColorIndex {\n  return 0 <= value && value < 256;\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\n/**\n * A base class that can be extended to provide convenience methods for managing the lifecycle of an\n * object and its components.\n */\nexport abstract class Disposable implements IDisposable {\n  protected _disposables: IDisposable[] = [];\n  protected _isDisposed: boolean = false;\n\n  /**\n   * Disposes the object, triggering the `dispose` method on all registered IDisposables.\n   */\n  public dispose(): void {\n    this._isDisposed = true;\n    for (const d of this._disposables) {\n      d.dispose();\n    }\n    this._disposables.length = 0;\n  }\n\n  /**\n   * Registers a disposable object.\n   * @param d The disposable to register.\n   * @returns The disposable.\n   */\n  public register<T extends IDisposable>(d: T): T {\n    this._disposables.push(d);\n    return d;\n  }\n\n  /**\n   * Unregisters a disposable object if it has been registered, if not do\n   * nothing.\n   * @param d The disposable to unregister.\n   */\n  public unregister<T extends IDisposable>(d: T): void {\n    const index = this._disposables.indexOf(d);\n    if (index !== -1) {\n      this._disposables.splice(index, 1);\n    }\n  }\n}\n\nexport class MutableDisposable<T extends IDisposable> implements IDisposable {\n  private _value?: T;\n  private _isDisposed = false;\n\n  /**\n   * Gets the value if it exists.\n   */\n  public get value(): T | undefined {\n    return this._isDisposed ? undefined : this._value;\n  }\n\n  /**\n   * Sets the value, disposing of the old value if it exists.\n   */\n  public set value(value: T | undefined) {\n    if (this._isDisposed || value === this._value) {\n      return;\n    }\n    this._value?.dispose();\n    this._value = value;\n  }\n\n  /**\n   * Resets the stored value and disposes of the previously stored value.\n   */\n  public clear(): void {\n    this.value = undefined;\n  }\n\n  public dispose(): void {\n    this._isDisposed = true;\n    this._value?.dispose();\n    this._value = undefined;\n  }\n}\n\n/**\n * Wrap a function in a disposable.\n */\nexport function toDisposable(f: () => void): IDisposable {\n  return { dispose: f };\n}\n\n/**\n * Dispose of all disposables in an array and set its length to 0.\n */\nexport function disposeArray(disposables: IDisposable[]): void {\n  for (const d of disposables) {\n    d.dispose();\n  }\n  disposables.length = 0;\n}\n\n/**\n * Creates a disposable that will dispose of an array of disposables when disposed.\n */\nexport function getDisposeArrayDisposable(array: IDisposable[]): IDisposable {\n  return { dispose: () => disposeArray(array) };\n}\n", "/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport class TwoKeyMap<TFirst extends string | number, TSecond extends string | number, TValue> {\n  private _data: { [bg: string | number]: { [fg: string | number]: TValue | undefined } | undefined } = {};\n\n  public set(first: TFirst, second: TSecond, value: TValue): void {\n    if (!this._data[first]) {\n      this._data[first] = {};\n    }\n    this._data[first as string | number]![second] = value;\n  }\n\n  public get(first: TFirst, second: TSecond): TValue | undefined {\n    return this._data[first as string | number] ? this._data[first as string | number]![second] : undefined;\n  }\n\n  public clear(): void {\n    this._data = {};\n  }\n}\n\nexport class FourKeyMap<TFirst extends string | number, TSecond extends string | number, TThird extends string | number, TFourth extends string | number, TValue> {\n  private _data: TwoKeyMap<TFirst, TSecond, TwoKeyMap<TThird, TFourth, TValue>> = new TwoKeyMap();\n\n  public set(first: TFirst, second: TSecond, third: TThird, fourth: TFourth, value: TValue): void {\n    if (!this._data.get(first, second)) {\n      this._data.set(first, second, new TwoKeyMap());\n    }\n    this._data.get(first, second)!.set(third, fourth, value);\n  }\n\n  public get(first: TFirst, second: TSecond, third: TThird, fourth: TFourth): TValue | undefined {\n    return this._data.get(first, second)?.get(third, fourth);\n  }\n\n  public clear(): void {\n    this._data.clear();\n  }\n}\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\ninterface INavigator {\n  userAgent: string;\n  language: string;\n  platform: string;\n}\n\n// We're declaring a navigator global here as we expect it in all runtimes (node and browser), but\n// we want this module to live in common.\ndeclare const navigator: INavigator;\ndeclare const process: unknown;\n\nexport const isNode = (typeof process !== 'undefined' && 'title' in (process as any)) ? true : false;\nconst userAgent = (isNode) ? 'node' : navigator.userAgent;\nconst platform = (isNode) ? 'node' : navigator.platform;\n\nexport const isFirefox = userAgent.includes('Firefox');\nexport const isLegacyEdge = userAgent.includes('Edge');\nexport const isSafari = /^((?!chrome|android).)*safari/i.test(userAgent);\nexport function getSafariVersion(): number {\n  if (!isSafari) {\n    return 0;\n  }\n  const majorVersion = userAgent.match(/Version\\/(\\d+)/);\n  if (majorVersion === null || majorVersion.length < 2) {\n    return 0;\n  }\n  return parseInt(majorVersion[1]);\n}\n\n// Find the users platform. We use this to interpret the meta key\n// and ISO third level shifts.\n// http://stackoverflow.com/q/19877924/577598\nexport const isMac = ['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'].includes(platform);\nexport const isIpad = platform === 'iPad';\nexport const isIphone = platform === 'iPhone';\nexport const isWindows = ['Windows', 'Win16', 'Win32', 'WinCE'].includes(platform);\nexport const isLinux = platform.indexOf('Linux') >= 0;\n// Note that when this is true, isLinux will also be true.\nexport const isChromeOS = /\\bCrOS\\b/.test(userAgent);\n", "/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n// Work variables to avoid garbage collection.\nlet i = 0;\n\n/**\n * A generic list that is maintained in sorted order and allows values with duplicate keys. This\n * list is based on binary search and as such locating a key will take O(log n) amortized, this\n * includes the by key iterator.\n */\nexport class SortedList<T> {\n  private readonly _array: T[] = [];\n\n  constructor(\n    private readonly _getKey: (value: T) => number\n  ) {\n  }\n\n  public clear(): void {\n    this._array.length = 0;\n  }\n\n  public insert(value: T): void {\n    if (this._array.length === 0) {\n      this._array.push(value);\n      return;\n    }\n    i = this._search(this._getKey(value));\n    this._array.splice(i, 0, value);\n  }\n\n  public delete(value: T): boolean {\n    if (this._array.length === 0) {\n      return false;\n    }\n    const key = this._getKey(value);\n    if (key === undefined) {\n      return false;\n    }\n    i = this._search(key);\n    if (i === -1) {\n      return false;\n    }\n    if (this._getKey(this._array[i]) !== key) {\n      return false;\n    }\n    do {\n      if (this._array[i] === value) {\n        this._array.splice(i, 1);\n        return true;\n      }\n    } while (++i < this._array.length && this._getKey(this._array[i]) === key);\n    return false;\n  }\n\n  public *getKeyIterator(key: number): IterableIterator<T> {\n    if (this._array.length === 0) {\n      return;\n    }\n    i = this._search(key);\n    if (i < 0 || i >= this._array.length) {\n      return;\n    }\n    if (this._getKey(this._array[i]) !== key) {\n      return;\n    }\n    do {\n      yield this._array[i];\n    } while (++i < this._array.length && this._getKey(this._array[i]) === key);\n  }\n\n  public forEachByKey(key: number, callback: (value: T) => void): void {\n    if (this._array.length === 0) {\n      return;\n    }\n    i = this._search(key);\n    if (i < 0 || i >= this._array.length) {\n      return;\n    }\n    if (this._getKey(this._array[i]) !== key) {\n      return;\n    }\n    do {\n      callback(this._array[i]);\n    } while (++i < this._array.length && this._getKey(this._array[i]) === key);\n  }\n\n  public values(): IterableIterator<T> {\n    // Duplicate the array to avoid issues when _array changes while iterating\n    return [...this._array].values();\n  }\n\n  private _search(key: number): number {\n    let min = 0;\n    let max = this._array.length - 1;\n    while (max >= min) {\n      let mid = (min + max) >> 1;\n      const midKey = this._getKey(this._array[mid]);\n      if (midKey > key) {\n        max = mid - 1;\n      } else if (midKey < key) {\n        min = mid + 1;\n      } else {\n        // key in list, walk to lowest duplicate\n        while (mid > 0 && this._getKey(this._array[mid - 1]) === key) {\n          mid--;\n        }\n        return mid;\n      }\n    }\n    // key not in list\n    // still return closest min (also used as insert position)\n    return min;\n  }\n}\n", "/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { isNode } from 'common/Platform';\n\ninterface ITaskQueue {\n  /**\n   * Adds a task to the queue which will run in a future idle callback.\n   * To avoid perceivable stalls on the mainthread, tasks with heavy workload\n   * should split their work into smaller pieces and return `true` to get\n   * called again until the work is done (on falsy return value).\n   */\n  enqueue(task: () => boolean | void): void;\n\n  /**\n   * Flushes the queue, running all remaining tasks synchronously.\n   */\n  flush(): void;\n\n  /**\n   * Clears any remaining tasks from the queue, these will not be run.\n   */\n  clear(): void;\n}\n\ninterface ITaskDeadline {\n  timeRemaining(): number;\n}\ntype CallbackWithDeadline = (deadline: ITaskDeadline) => void;\n\nabstract class TaskQueue implements ITaskQueue {\n  private _tasks: (() => boolean | void)[] = [];\n  private _idleCallback?: number;\n  private _i = 0;\n\n  protected abstract _requestCallback(callback: CallbackWithDeadline): number;\n  protected abstract _cancelCallback(identifier: number): void;\n\n  public enqueue(task: () => boolean | void): void {\n    this._tasks.push(task);\n    this._start();\n  }\n\n  public flush(): void {\n    while (this._i < this._tasks.length) {\n      if (!this._tasks[this._i]()) {\n        this._i++;\n      }\n    }\n    this.clear();\n  }\n\n  public clear(): void {\n    if (this._idleCallback) {\n      this._cancelCallback(this._idleCallback);\n      this._idleCallback = undefined;\n    }\n    this._i = 0;\n    this._tasks.length = 0;\n  }\n\n  private _start(): void {\n    if (!this._idleCallback) {\n      this._idleCallback = this._requestCallback(this._process.bind(this));\n    }\n  }\n\n  private _process(deadline: ITaskDeadline): void {\n    this._idleCallback = undefined;\n    let taskDuration = 0;\n    let longestTask = 0;\n    let lastDeadlineRemaining = deadline.timeRemaining();\n    let deadlineRemaining = 0;\n    while (this._i < this._tasks.length) {\n      taskDuration = Date.now();\n      if (!this._tasks[this._i]()) {\n        this._i++;\n      }\n      // other than performance.now, Date.now might not be stable (changes on wall clock changes),\n      // this is not an issue here as a clock change during a short running task is very unlikely\n      // in case it still happened and leads to negative duration, simply assume 1 msec\n      taskDuration = Math.max(1, Date.now() - taskDuration);\n      longestTask = Math.max(taskDuration, longestTask);\n      // Guess the following task will take a similar time to the longest task in this batch, allow\n      // additional room to try avoid exceeding the deadline\n      deadlineRemaining = deadline.timeRemaining();\n      if (longestTask * 1.5 > deadlineRemaining) {\n        // Warn when the time exceeding the deadline is over 20ms, if this happens in practice the\n        // task should be split into sub-tasks to ensure the UI remains responsive.\n        if (lastDeadlineRemaining - taskDuration < -20) {\n          console.warn(`task queue exceeded allotted deadline by ${Math.abs(Math.round(lastDeadlineRemaining - taskDuration))}ms`);\n        }\n        this._start();\n        return;\n      }\n      lastDeadlineRemaining = deadlineRemaining;\n    }\n    this.clear();\n  }\n}\n\n/**\n * A queue of that runs tasks over several tasks via setTimeout, trying to maintain above 60 frames\n * per second. The tasks will run in the order they are enqueued, but they will run some time later,\n * and care should be taken to ensure they're non-urgent and will not introduce race conditions.\n */\nexport class PriorityTaskQueue extends TaskQueue {\n  protected _requestCallback(callback: CallbackWithDeadline): number {\n    return setTimeout(() => callback(this._createDeadline(16)));\n  }\n\n  protected _cancelCallback(identifier: number): void {\n    clearTimeout(identifier);\n  }\n\n  private _createDeadline(duration: number): ITaskDeadline {\n    const end = Date.now() + duration;\n    return {\n      timeRemaining: () => Math.max(0, end - Date.now())\n    };\n  }\n}\n\nclass IdleTaskQueueInternal extends TaskQueue {\n  protected _requestCallback(callback: IdleRequestCallback): number {\n    return requestIdleCallback(callback);\n  }\n\n  protected _cancelCallback(identifier: number): void {\n    cancelIdleCallback(identifier);\n  }\n}\n\n/**\n * A queue of that runs tasks over several idle callbacks, trying to respect the idle callback's\n * deadline given by the environment. The tasks will run in the order they are enqueued, but they\n * will run some time later, and care should be taken to ensure they're non-urgent and will not\n * introduce race conditions.\n *\n * This reverts to a {@link PriorityTaskQueue} if the environment does not support idle callbacks.\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const IdleTaskQueue = (!isNode && 'requestIdleCallback' in window) ? IdleTaskQueueInternal : PriorityTaskQueue;\n\n/**\n * An object that tracks a single debounced task that will run on the next idle frame. When called\n * multiple times, only the last set task will run.\n */\nexport class DebouncedIdleTask {\n  private _queue: ITaskQueue;\n\n  constructor() {\n    this._queue = new IdleTaskQueue();\n  }\n\n  public set(task: () => boolean | void): void {\n    this._queue.clear();\n    this._queue.enqueue(task);\n  }\n\n  public flush(): void {\n    this._queue.flush();\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CHAR_DATA_CODE_INDEX, NULL_CELL_CODE, WHITESPACE_CELL_CODE } from 'common/buffer/Constants';\nimport { IBufferService } from 'common/services/Services';\n\nexport function updateWindowsModeWrappedState(bufferService: IBufferService): void {\n  // Winpty does not support wraparound mode which means that lines will never\n  // be marked as wrapped. This causes issues for things like copying a line\n  // retaining the wrapped new line characters or if consumers are listening\n  // in on the data stream.\n  //\n  // The workaround for this is to listen to every incoming line feed and mark\n  // the line as wrapped if the last character in the previous line is not a\n  // space. This is certainly not without its problems, but generally on\n  // Windows when text reaches the end of the terminal it's likely going to be\n  // wrapped.\n  const line = bufferService.buffer.lines.get(bufferService.buffer.ybase + bufferService.buffer.y - 1);\n  const lastChar = line?.get(bufferService.cols - 1);\n\n  const nextLine = bufferService.buffer.lines.get(bufferService.buffer.ybase + bufferService.buffer.y);\n  if (nextLine && lastChar) {\n    nextLine.isWrapped = (lastChar[CHAR_DATA_CODE_INDEX] !== NULL_CELL_CODE && lastChar[CHAR_DATA_CODE_INDEX] !== WHITESPACE_CELL_CODE);\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IAttributeData, IColorRGB, IExtendedAttrs } from 'common/Types';\nimport { Attributes, FgFlags, BgFlags, UnderlineStyle, ExtFlags } from 'common/buffer/Constants';\n\nexport class AttributeData implements IAttributeData {\n  public static toColorRGB(value: number): IColorRGB {\n    return [\n      value >>> Attributes.RED_SHIFT & 255,\n      value >>> Attributes.GREEN_SHIFT & 255,\n      value & 255\n    ];\n  }\n\n  public static fromColorRGB(value: IColorRGB): number {\n    return (value[0] & 255) << Attributes.RED_SHIFT | (value[1] & 255) << Attributes.GREEN_SHIFT | value[2] & 255;\n  }\n\n  public clone(): IAttributeData {\n    const newObj = new AttributeData();\n    newObj.fg = this.fg;\n    newObj.bg = this.bg;\n    newObj.extended = this.extended.clone();\n    return newObj;\n  }\n\n  // data\n  public fg = 0;\n  public bg = 0;\n  public extended: IExtendedAttrs = new ExtendedAttrs();\n\n  // flags\n  public isInverse(): number       { return this.fg & FgFlags.INVERSE; }\n  public isBold(): number          { return this.fg & FgFlags.BOLD; }\n  public isUnderline(): number     {\n    if (this.hasExtendedAttrs() && this.extended.underlineStyle !== UnderlineStyle.NONE) {\n      return 1;\n    }\n    return this.fg & FgFlags.UNDERLINE;\n  }\n  public isBlink(): number         { return this.fg & FgFlags.BLINK; }\n  public isInvisible(): number     { return this.fg & FgFlags.INVISIBLE; }\n  public isItalic(): number        { return this.bg & BgFlags.ITALIC; }\n  public isDim(): number           { return this.bg & BgFlags.DIM; }\n  public isStrikethrough(): number { return this.fg & FgFlags.STRIKETHROUGH; }\n  public isProtected(): number     { return this.bg & BgFlags.PROTECTED; }\n  public isOverline(): number      { return this.bg & BgFlags.OVERLINE; }\n\n  // color modes\n  public getFgColorMode(): number { return this.fg & Attributes.CM_MASK; }\n  public getBgColorMode(): number { return this.bg & Attributes.CM_MASK; }\n  public isFgRGB(): boolean       { return (this.fg & Attributes.CM_MASK) === Attributes.CM_RGB; }\n  public isBgRGB(): boolean       { return (this.bg & Attributes.CM_MASK) === Attributes.CM_RGB; }\n  public isFgPalette(): boolean   { return (this.fg & Attributes.CM_MASK) === Attributes.CM_P16 || (this.fg & Attributes.CM_MASK) === Attributes.CM_P256; }\n  public isBgPalette(): boolean   { return (this.bg & Attributes.CM_MASK) === Attributes.CM_P16 || (this.bg & Attributes.CM_MASK) === Attributes.CM_P256; }\n  public isFgDefault(): boolean   { return (this.fg & Attributes.CM_MASK) === 0; }\n  public isBgDefault(): boolean   { return (this.bg & Attributes.CM_MASK) === 0; }\n  public isAttributeDefault(): boolean { return this.fg === 0 && this.bg === 0; }\n\n  // colors\n  public getFgColor(): number {\n    switch (this.fg & Attributes.CM_MASK) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:  return this.fg & Attributes.PCOLOR_MASK;\n      case Attributes.CM_RGB:   return this.fg & Attributes.RGB_MASK;\n      default:                  return -1;  // CM_DEFAULT defaults to -1\n    }\n  }\n  public getBgColor(): number {\n    switch (this.bg & Attributes.CM_MASK) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:  return this.bg & Attributes.PCOLOR_MASK;\n      case Attributes.CM_RGB:   return this.bg & Attributes.RGB_MASK;\n      default:                  return -1;  // CM_DEFAULT defaults to -1\n    }\n  }\n\n  // extended attrs\n  public hasExtendedAttrs(): number {\n    return this.bg & BgFlags.HAS_EXTENDED;\n  }\n  public updateExtended(): void {\n    if (this.extended.isEmpty()) {\n      this.bg &= ~BgFlags.HAS_EXTENDED;\n    } else {\n      this.bg |= BgFlags.HAS_EXTENDED;\n    }\n  }\n  public getUnderlineColor(): number {\n    if ((this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor) {\n      switch (this.extended.underlineColor & Attributes.CM_MASK) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:  return this.extended.underlineColor & Attributes.PCOLOR_MASK;\n        case Attributes.CM_RGB:   return this.extended.underlineColor & Attributes.RGB_MASK;\n        default:                  return this.getFgColor();\n      }\n    }\n    return this.getFgColor();\n  }\n  public getUnderlineColorMode(): number {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? this.extended.underlineColor & Attributes.CM_MASK\n      : this.getFgColorMode();\n  }\n  public isUnderlineColorRGB(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_RGB\n      : this.isFgRGB();\n  }\n  public isUnderlineColorPalette(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_P16\n          || (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_P256\n      : this.isFgPalette();\n  }\n  public isUnderlineColorDefault(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === 0\n      : this.isFgDefault();\n  }\n  public getUnderlineStyle(): UnderlineStyle {\n    return this.fg & FgFlags.UNDERLINE\n      ? (this.bg & BgFlags.HAS_EXTENDED ? this.extended.underlineStyle : UnderlineStyle.SINGLE)\n      : UnderlineStyle.NONE;\n  }\n  public getUnderlineVariantOffset(): number {\n    return this.extended.underlineVariantOffset;\n  }\n}\n\n\n/**\n * Extended attributes for a cell.\n * Holds information about different underline styles and color.\n */\nexport class ExtendedAttrs implements IExtendedAttrs {\n  private _ext: number = 0;\n  public get ext(): number {\n    if (this._urlId) {\n      return (\n        (this._ext & ~ExtFlags.UNDERLINE_STYLE) |\n        (this.underlineStyle << 26)\n      );\n    }\n    return this._ext;\n  }\n  public set ext(value: number) { this._ext = value; }\n\n  public get underlineStyle(): UnderlineStyle {\n    // Always return the URL style if it has one\n    if (this._urlId) {\n      return UnderlineStyle.DASHED;\n    }\n    return (this._ext & ExtFlags.UNDERLINE_STYLE) >> 26;\n  }\n  public set underlineStyle(value: UnderlineStyle) {\n    this._ext &= ~ExtFlags.UNDERLINE_STYLE;\n    this._ext |= (value << 26) & ExtFlags.UNDERLINE_STYLE;\n  }\n\n  public get underlineColor(): number {\n    return this._ext & (Attributes.CM_MASK | Attributes.RGB_MASK);\n  }\n  public set underlineColor(value: number) {\n    this._ext &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n    this._ext |= value & (Attributes.CM_MASK | Attributes.RGB_MASK);\n  }\n\n  private _urlId: number = 0;\n  public get urlId(): number {\n    return this._urlId;\n  }\n  public set urlId(value: number) {\n    this._urlId = value;\n  }\n\n  public get underlineVariantOffset(): number {\n    const val = (this._ext & ExtFlags.VARIANT_OFFSET) >> 29;\n    if (val < 0) {\n      return val ^ 0xFFFFFFF8;\n    }\n    return val;\n  }\n  public set underlineVariantOffset(value: number) {\n    this._ext &= ~ExtFlags.VARIANT_OFFSET;\n    this._ext |= (value << 29) & ExtFlags.VARIANT_OFFSET;\n  }\n\n  constructor(\n    ext: number = 0,\n    urlId: number = 0\n  ) {\n    this._ext = ext;\n    this._urlId = urlId;\n  }\n\n  public clone(): IExtendedAttrs {\n    return new ExtendedAttrs(this._ext, this._urlId);\n  }\n\n  /**\n   * Convenient method to indicate whether the object holds no additional information,\n   * that needs to be persistant in the buffer.\n   */\n  public isEmpty(): boolean {\n    return this.underlineStyle === UnderlineStyle.NONE && this._urlId === 0;\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CircularList, IInsertEvent } from 'common/CircularList';\nimport { IdleTaskQueue } from 'common/TaskQueue';\nimport { IAttributeData, IBufferLine, ICellData, ICharset } from 'common/Types';\nimport { ExtendedAttrs } from 'common/buffer/AttributeData';\nimport { BufferLine, DEFAULT_ATTR_DATA } from 'common/buffer/BufferLine';\nimport { getWrappedLineTrimmedLength, reflowLargerApplyNewLayout, reflowLargerCreateNewLayout, reflowLargerGetLinesToRemove, reflowSmallerGetNewLineLengths } from 'common/buffer/BufferReflow';\nimport { CellData } from 'common/buffer/CellData';\nimport { NULL_CELL_CHAR, NULL_CELL_CODE, NULL_CELL_WIDTH, WHITESPACE_CELL_CHAR, WHITESPACE_CELL_CODE, WHITESPACE_CELL_WIDTH } from 'common/buffer/Constants';\nimport { Marker } from 'common/buffer/Marker';\nimport { IBuffer } from 'common/buffer/Types';\nimport { DEFAULT_CHARSET } from 'common/data/Charsets';\nimport { IBufferService, IOptionsService } from 'common/services/Services';\n\nexport const MAX_BUFFER_SIZE = 4294967295; // 2^32 - 1\n\n/**\n * This class represents a terminal buffer (an internal state of the terminal), where the\n * following information is stored (in high-level):\n *   - text content of this particular buffer\n *   - cursor position\n *   - scroll position\n */\nexport class Buffer implements IBuffer {\n  public lines: CircularList<IBufferLine>;\n  public ydisp: number = 0;\n  public ybase: number = 0;\n  public y: number = 0;\n  public x: number = 0;\n  public scrollBottom: number;\n  public scrollTop: number;\n  public tabs: { [column: number]: boolean | undefined } = {};\n  public savedY: number = 0;\n  public savedX: number = 0;\n  public savedCurAttrData = DEFAULT_ATTR_DATA.clone();\n  public savedCharset: ICharset | undefined = DEFAULT_CHARSET;\n  public markers: Marker[] = [];\n  private _nullCell: ICellData = CellData.fromCharData([0, NULL_CELL_CHAR, NULL_CELL_WIDTH, NULL_CELL_CODE]);\n  private _whitespaceCell: ICellData = CellData.fromCharData([0, WHITESPACE_CELL_CHAR, WHITESPACE_CELL_WIDTH, WHITESPACE_CELL_CODE]);\n  private _cols: number;\n  private _rows: number;\n  private _isClearing: boolean = false;\n\n  constructor(\n    private _hasScrollback: boolean,\n    private _optionsService: IOptionsService,\n    private _bufferService: IBufferService\n  ) {\n    this._cols = this._bufferService.cols;\n    this._rows = this._bufferService.rows;\n    this.lines = new CircularList<IBufferLine>(this._getCorrectBufferLength(this._rows));\n    this.scrollTop = 0;\n    this.scrollBottom = this._rows - 1;\n    this.setupTabStops();\n  }\n\n  public getNullCell(attr?: IAttributeData): ICellData {\n    if (attr) {\n      this._nullCell.fg = attr.fg;\n      this._nullCell.bg = attr.bg;\n      this._nullCell.extended = attr.extended;\n    } else {\n      this._nullCell.fg = 0;\n      this._nullCell.bg = 0;\n      this._nullCell.extended = new ExtendedAttrs();\n    }\n    return this._nullCell;\n  }\n\n  public getWhitespaceCell(attr?: IAttributeData): ICellData {\n    if (attr) {\n      this._whitespaceCell.fg = attr.fg;\n      this._whitespaceCell.bg = attr.bg;\n      this._whitespaceCell.extended = attr.extended;\n    } else {\n      this._whitespaceCell.fg = 0;\n      this._whitespaceCell.bg = 0;\n      this._whitespaceCell.extended = new ExtendedAttrs();\n    }\n    return this._whitespaceCell;\n  }\n\n  public getBlankLine(attr: IAttributeData, isWrapped?: boolean): IBufferLine {\n    return new BufferLine(this._bufferService.cols, this.getNullCell(attr), isWrapped);\n  }\n\n  public get hasScrollback(): boolean {\n    return this._hasScrollback && this.lines.maxLength > this._rows;\n  }\n\n  public get isCursorInViewport(): boolean {\n    const absoluteY = this.ybase + this.y;\n    const relativeY = absoluteY - this.ydisp;\n    return (relativeY >= 0 && relativeY < this._rows);\n  }\n\n  /**\n   * Gets the correct buffer length based on the rows provided, the terminal's\n   * scrollback and whether this buffer is flagged to have scrollback or not.\n   * @param rows The terminal rows to use in the calculation.\n   */\n  private _getCorrectBufferLength(rows: number): number {\n    if (!this._hasScrollback) {\n      return rows;\n    }\n\n    const correctBufferLength = rows + this._optionsService.rawOptions.scrollback;\n\n    return correctBufferLength > MAX_BUFFER_SIZE ? MAX_BUFFER_SIZE : correctBufferLength;\n  }\n\n  /**\n   * Fills the buffer's viewport with blank lines.\n   */\n  public fillViewportRows(fillAttr?: IAttributeData): void {\n    if (this.lines.length === 0) {\n      if (fillAttr === undefined) {\n        fillAttr = DEFAULT_ATTR_DATA;\n      }\n      let i = this._rows;\n      while (i--) {\n        this.lines.push(this.getBlankLine(fillAttr));\n      }\n    }\n  }\n\n  /**\n   * Clears the buffer to it's initial state, discarding all previous data.\n   */\n  public clear(): void {\n    this.ydisp = 0;\n    this.ybase = 0;\n    this.y = 0;\n    this.x = 0;\n    this.lines = new CircularList<IBufferLine>(this._getCorrectBufferLength(this._rows));\n    this.scrollTop = 0;\n    this.scrollBottom = this._rows - 1;\n    this.setupTabStops();\n  }\n\n  /**\n   * Resizes the buffer, adjusting its data accordingly.\n   * @param newCols The new number of columns.\n   * @param newRows The new number of rows.\n   */\n  public resize(newCols: number, newRows: number): void {\n    // store reference to null cell with default attrs\n    const nullCell = this.getNullCell(DEFAULT_ATTR_DATA);\n\n    // count bufferlines with overly big memory to be cleaned afterwards\n    let dirtyMemoryLines = 0;\n\n    // Increase max length if needed before adjustments to allow space to fill\n    // as required.\n    const newMaxLength = this._getCorrectBufferLength(newRows);\n    if (newMaxLength > this.lines.maxLength) {\n      this.lines.maxLength = newMaxLength;\n    }\n\n    // The following adjustments should only happen if the buffer has been\n    // initialized/filled.\n    if (this.lines.length > 0) {\n      // Deal with columns increasing (reducing needs to happen after reflow)\n      if (this._cols < newCols) {\n        for (let i = 0; i < this.lines.length; i++) {\n          // +boolean for fast 0 or 1 conversion\n          dirtyMemoryLines += +this.lines.get(i)!.resize(newCols, nullCell);\n        }\n      }\n\n      // Resize rows in both directions as needed\n      let addToY = 0;\n      if (this._rows < newRows) {\n        for (let y = this._rows; y < newRows; y++) {\n          if (this.lines.length < newRows + this.ybase) {\n            if (this._optionsService.rawOptions.windowsMode || this._optionsService.rawOptions.windowsPty.backend !== undefined || this._optionsService.rawOptions.windowsPty.buildNumber !== undefined) {\n              // Just add the new missing rows on Windows as conpty reprints the screen with it's\n              // view of the world. Once a line enters scrollback for conpty it remains there\n              this.lines.push(new BufferLine(newCols, nullCell));\n            } else {\n              if (this.ybase > 0 && this.lines.length <= this.ybase + this.y + addToY + 1) {\n                // There is room above the buffer and there are no empty elements below the line,\n                // scroll up\n                this.ybase--;\n                addToY++;\n                if (this.ydisp > 0) {\n                  // Viewport is at the top of the buffer, must increase downwards\n                  this.ydisp--;\n                }\n              } else {\n                // Add a blank line if there is no buffer left at the top to scroll to, or if there\n                // are blank lines after the cursor\n                this.lines.push(new BufferLine(newCols, nullCell));\n              }\n            }\n          }\n        }\n      } else { // (this._rows >= newRows)\n        for (let y = this._rows; y > newRows; y--) {\n          if (this.lines.length > newRows + this.ybase) {\n            if (this.lines.length > this.ybase + this.y + 1) {\n              // The line is a blank line below the cursor, remove it\n              this.lines.pop();\n            } else {\n              // The line is the cursor, scroll down\n              this.ybase++;\n              this.ydisp++;\n            }\n          }\n        }\n      }\n\n      // Reduce max length if needed after adjustments, this is done after as it\n      // would otherwise cut data from the bottom of the buffer.\n      if (newMaxLength < this.lines.maxLength) {\n        // Trim from the top of the buffer and adjust ybase and ydisp.\n        const amountToTrim = this.lines.length - newMaxLength;\n        if (amountToTrim > 0) {\n          this.lines.trimStart(amountToTrim);\n          this.ybase = Math.max(this.ybase - amountToTrim, 0);\n          this.ydisp = Math.max(this.ydisp - amountToTrim, 0);\n          this.savedY = Math.max(this.savedY - amountToTrim, 0);\n        }\n        this.lines.maxLength = newMaxLength;\n      }\n\n      // Make sure that the cursor stays on screen\n      this.x = Math.min(this.x, newCols - 1);\n      this.y = Math.min(this.y, newRows - 1);\n      if (addToY) {\n        this.y += addToY;\n      }\n      this.savedX = Math.min(this.savedX, newCols - 1);\n\n      this.scrollTop = 0;\n    }\n\n    this.scrollBottom = newRows - 1;\n\n    if (this._isReflowEnabled) {\n      this._reflow(newCols, newRows);\n\n      // Trim the end of the line off if cols shrunk\n      if (this._cols > newCols) {\n        for (let i = 0; i < this.lines.length; i++) {\n          // +boolean for fast 0 or 1 conversion\n          dirtyMemoryLines += +this.lines.get(i)!.resize(newCols, nullCell);\n        }\n      }\n    }\n\n    this._cols = newCols;\n    this._rows = newRows;\n\n    this._memoryCleanupQueue.clear();\n    // schedule memory cleanup only, if more than 10% of the lines are affected\n    if (dirtyMemoryLines > 0.1 * this.lines.length) {\n      this._memoryCleanupPosition = 0;\n      this._memoryCleanupQueue.enqueue(() => this._batchedMemoryCleanup());\n    }\n  }\n\n  private _memoryCleanupQueue = new IdleTaskQueue();\n  private _memoryCleanupPosition = 0;\n\n  private _batchedMemoryCleanup(): boolean {\n    let normalRun = true;\n    if (this._memoryCleanupPosition >= this.lines.length) {\n      // cleanup made it once through all lines, thus rescan in loop below to also catch shifted\n      // lines, which should finish rather quick if there are no more cleanups pending\n      this._memoryCleanupPosition = 0;\n      normalRun = false;\n    }\n    let counted = 0;\n    while (this._memoryCleanupPosition < this.lines.length) {\n      counted += this.lines.get(this._memoryCleanupPosition++)!.cleanupMemory();\n      // cleanup max 100 lines per batch\n      if (counted > 100) {\n        return true;\n      }\n    }\n    // normal runs always need another rescan afterwards\n    // if we made it here with normalRun=false, we are in a final run\n    // and can end the cleanup task for sure\n    return normalRun;\n  }\n\n  private get _isReflowEnabled(): boolean {\n    const windowsPty = this._optionsService.rawOptions.windowsPty;\n    if (windowsPty && windowsPty.buildNumber) {\n      return this._hasScrollback && windowsPty.backend === 'conpty' && windowsPty.buildNumber >= 21376;\n    }\n    return this._hasScrollback && !this._optionsService.rawOptions.windowsMode;\n  }\n\n  private _reflow(newCols: number, newRows: number): void {\n    if (this._cols === newCols) {\n      return;\n    }\n\n    // Iterate through rows, ignore the last one as it cannot be wrapped\n    if (newCols > this._cols) {\n      this._reflowLarger(newCols, newRows);\n    } else {\n      this._reflowSmaller(newCols, newRows);\n    }\n  }\n\n  private _reflowLarger(newCols: number, newRows: number): void {\n    const toRemove: number[] = reflowLargerGetLinesToRemove(this.lines, this._cols, newCols, this.ybase + this.y, this.getNullCell(DEFAULT_ATTR_DATA));\n    if (toRemove.length > 0) {\n      const newLayoutResult = reflowLargerCreateNewLayout(this.lines, toRemove);\n      reflowLargerApplyNewLayout(this.lines, newLayoutResult.layout);\n      this._reflowLargerAdjustViewport(newCols, newRows, newLayoutResult.countRemoved);\n    }\n  }\n\n  private _reflowLargerAdjustViewport(newCols: number, newRows: number, countRemoved: number): void {\n    const nullCell = this.getNullCell(DEFAULT_ATTR_DATA);\n    // Adjust viewport based on number of items removed\n    let viewportAdjustments = countRemoved;\n    while (viewportAdjustments-- > 0) {\n      if (this.ybase === 0) {\n        if (this.y > 0) {\n          this.y--;\n        }\n        if (this.lines.length < newRows) {\n          // Add an extra row at the bottom of the viewport\n          this.lines.push(new BufferLine(newCols, nullCell));\n        }\n      } else {\n        if (this.ydisp === this.ybase) {\n          this.ydisp--;\n        }\n        this.ybase--;\n      }\n    }\n    this.savedY = Math.max(this.savedY - countRemoved, 0);\n  }\n\n  private _reflowSmaller(newCols: number, newRows: number): void {\n    const nullCell = this.getNullCell(DEFAULT_ATTR_DATA);\n    // Gather all BufferLines that need to be inserted into the Buffer here so that they can be\n    // batched up and only committed once\n    const toInsert = [];\n    let countToInsert = 0;\n    // Go backwards as many lines may be trimmed and this will avoid considering them\n    for (let y = this.lines.length - 1; y >= 0; y--) {\n      // Check whether this line is a problem\n      let nextLine = this.lines.get(y) as BufferLine;\n      if (!nextLine || !nextLine.isWrapped && nextLine.getTrimmedLength() <= newCols) {\n        continue;\n      }\n\n      // Gather wrapped lines and adjust y to be the starting line\n      const wrappedLines: BufferLine[] = [nextLine];\n      while (nextLine.isWrapped && y > 0) {\n        nextLine = this.lines.get(--y) as BufferLine;\n        wrappedLines.unshift(nextLine);\n      }\n\n      // If these lines contain the cursor don't touch them, the program will handle fixing up\n      // wrapped lines with the cursor\n      const absoluteY = this.ybase + this.y;\n      if (absoluteY >= y && absoluteY < y + wrappedLines.length) {\n        continue;\n      }\n\n      const lastLineLength = wrappedLines[wrappedLines.length - 1].getTrimmedLength();\n      const destLineLengths = reflowSmallerGetNewLineLengths(wrappedLines, this._cols, newCols);\n      const linesToAdd = destLineLengths.length - wrappedLines.length;\n      let trimmedLines: number;\n      if (this.ybase === 0 && this.y !== this.lines.length - 1) {\n        // If the top section of the buffer is not yet filled\n        trimmedLines = Math.max(0, this.y - this.lines.maxLength + linesToAdd);\n      } else {\n        trimmedLines = Math.max(0, this.lines.length - this.lines.maxLength + linesToAdd);\n      }\n\n      // Add the new lines\n      const newLines: BufferLine[] = [];\n      for (let i = 0; i < linesToAdd; i++) {\n        const newLine = this.getBlankLine(DEFAULT_ATTR_DATA, true) as BufferLine;\n        newLines.push(newLine);\n      }\n      if (newLines.length > 0) {\n        toInsert.push({\n          // countToInsert here gets the actual index, taking into account other inserted items.\n          // using this we can iterate through the list forwards\n          start: y + wrappedLines.length + countToInsert,\n          newLines\n        });\n        countToInsert += newLines.length;\n      }\n      wrappedLines.push(...newLines);\n\n      // Copy buffer data to new locations, this needs to happen backwards to do in-place\n      let destLineIndex = destLineLengths.length - 1; // Math.floor(cellsNeeded / newCols);\n      let destCol = destLineLengths[destLineIndex]; // cellsNeeded % newCols;\n      if (destCol === 0) {\n        destLineIndex--;\n        destCol = destLineLengths[destLineIndex];\n      }\n      let srcLineIndex = wrappedLines.length - linesToAdd - 1;\n      let srcCol = lastLineLength;\n      while (srcLineIndex >= 0) {\n        const cellsToCopy = Math.min(srcCol, destCol);\n        if (wrappedLines[destLineIndex] === undefined) {\n          // Sanity check that the line exists, this has been known to fail for an unknown reason\n          // which would stop the reflow from happening if an exception would throw.\n          break;\n        }\n        wrappedLines[destLineIndex].copyCellsFrom(wrappedLines[srcLineIndex], srcCol - cellsToCopy, destCol - cellsToCopy, cellsToCopy, true);\n        destCol -= cellsToCopy;\n        if (destCol === 0) {\n          destLineIndex--;\n          destCol = destLineLengths[destLineIndex];\n        }\n        srcCol -= cellsToCopy;\n        if (srcCol === 0) {\n          srcLineIndex--;\n          const wrappedLinesIndex = Math.max(srcLineIndex, 0);\n          srcCol = getWrappedLineTrimmedLength(wrappedLines, wrappedLinesIndex, this._cols);\n        }\n      }\n\n      // Null out the end of the line ends if a wide character wrapped to the following line\n      for (let i = 0; i < wrappedLines.length; i++) {\n        if (destLineLengths[i] < newCols) {\n          wrappedLines[i].setCell(destLineLengths[i], nullCell);\n        }\n      }\n\n      // Adjust viewport as needed\n      let viewportAdjustments = linesToAdd - trimmedLines;\n      while (viewportAdjustments-- > 0) {\n        if (this.ybase === 0) {\n          if (this.y < newRows - 1) {\n            this.y++;\n            this.lines.pop();\n          } else {\n            this.ybase++;\n            this.ydisp++;\n          }\n        } else {\n          // Ensure ybase does not exceed its maximum value\n          if (this.ybase < Math.min(this.lines.maxLength, this.lines.length + countToInsert) - newRows) {\n            if (this.ybase === this.ydisp) {\n              this.ydisp++;\n            }\n            this.ybase++;\n          }\n        }\n      }\n      this.savedY = Math.min(this.savedY + linesToAdd, this.ybase + newRows - 1);\n    }\n\n    // Rearrange lines in the buffer if there are any insertions, this is done at the end rather\n    // than earlier so that it's a single O(n) pass through the buffer, instead of O(n^2) from many\n    // costly calls to CircularList.splice.\n    if (toInsert.length > 0) {\n      // Record buffer insert events and then play them back backwards so that the indexes are\n      // correct\n      const insertEvents: IInsertEvent[] = [];\n\n      // Record original lines so they don't get overridden when we rearrange the list\n      const originalLines: BufferLine[] = [];\n      for (let i = 0; i < this.lines.length; i++) {\n        originalLines.push(this.lines.get(i) as BufferLine);\n      }\n      const originalLinesLength = this.lines.length;\n\n      let originalLineIndex = originalLinesLength - 1;\n      let nextToInsertIndex = 0;\n      let nextToInsert = toInsert[nextToInsertIndex];\n      this.lines.length = Math.min(this.lines.maxLength, this.lines.length + countToInsert);\n      let countInsertedSoFar = 0;\n      for (let i = Math.min(this.lines.maxLength - 1, originalLinesLength + countToInsert - 1); i >= 0; i--) {\n        if (nextToInsert && nextToInsert.start > originalLineIndex + countInsertedSoFar) {\n          // Insert extra lines here, adjusting i as needed\n          for (let nextI = nextToInsert.newLines.length - 1; nextI >= 0; nextI--) {\n            this.lines.set(i--, nextToInsert.newLines[nextI]);\n          }\n          i++;\n\n          // Create insert events for later\n          insertEvents.push({\n            index: originalLineIndex + 1,\n            amount: nextToInsert.newLines.length\n          });\n\n          countInsertedSoFar += nextToInsert.newLines.length;\n          nextToInsert = toInsert[++nextToInsertIndex];\n        } else {\n          this.lines.set(i, originalLines[originalLineIndex--]);\n        }\n      }\n\n      // Update markers\n      let insertCountEmitted = 0;\n      for (let i = insertEvents.length - 1; i >= 0; i--) {\n        insertEvents[i].index += insertCountEmitted;\n        this.lines.onInsertEmitter.fire(insertEvents[i]);\n        insertCountEmitted += insertEvents[i].amount;\n      }\n      const amountToTrim = Math.max(0, originalLinesLength + countToInsert - this.lines.maxLength);\n      if (amountToTrim > 0) {\n        this.lines.onTrimEmitter.fire(amountToTrim);\n      }\n    }\n  }\n\n  /**\n   * Translates a buffer line to a string, with optional start and end columns.\n   * Wide characters will count as two columns in the resulting string. This\n   * function is useful for getting the actual text underneath the raw selection\n   * position.\n   * @param lineIndex The absolute index of the line being translated.\n   * @param trimRight Whether to trim whitespace to the right.\n   * @param startCol The column to start at.\n   * @param endCol The column to end at.\n   */\n  public translateBufferLineToString(lineIndex: number, trimRight: boolean, startCol: number = 0, endCol?: number): string {\n    const line = this.lines.get(lineIndex);\n    if (!line) {\n      return '';\n    }\n    return line.translateToString(trimRight, startCol, endCol);\n  }\n\n  public getWrappedRangeForLine(y: number): { first: number, last: number } {\n    let first = y;\n    let last = y;\n    // Scan upwards for wrapped lines\n    while (first > 0 && this.lines.get(first)!.isWrapped) {\n      first--;\n    }\n    // Scan downwards for wrapped lines\n    while (last + 1 < this.lines.length && this.lines.get(last + 1)!.isWrapped) {\n      last++;\n    }\n    return { first, last };\n  }\n\n  /**\n   * Setup the tab stops.\n   * @param i The index to start setting up tab stops from.\n   */\n  public setupTabStops(i?: number): void {\n    if (i !== null && i !== undefined) {\n      if (!this.tabs[i]) {\n        i = this.prevStop(i);\n      }\n    } else {\n      this.tabs = {};\n      i = 0;\n    }\n\n    for (; i < this._cols; i += this._optionsService.rawOptions.tabStopWidth) {\n      this.tabs[i] = true;\n    }\n  }\n\n  /**\n   * Move the cursor to the previous tab stop from the given position (default is current).\n   * @param x The position to move the cursor to the previous tab stop.\n   */\n  public prevStop(x?: number): number {\n    if (x === null || x === undefined) {\n      x = this.x;\n    }\n    while (!this.tabs[--x] && x > 0);\n    return x >= this._cols ? this._cols - 1 : x < 0 ? 0 : x;\n  }\n\n  /**\n   * Move the cursor one tab stop forward from the given position (default is current).\n   * @param x The position to move the cursor one tab stop forward.\n   */\n  public nextStop(x?: number): number {\n    if (x === null || x === undefined) {\n      x = this.x;\n    }\n    while (!this.tabs[++x] && x < this._cols);\n    return x >= this._cols ? this._cols - 1 : x < 0 ? 0 : x;\n  }\n\n  /**\n   * Clears markers on single line.\n   * @param y The line to clear.\n   */\n  public clearMarkers(y: number): void {\n    this._isClearing = true;\n    for (let i = 0; i < this.markers.length; i++) {\n      if (this.markers[i].line === y) {\n        this.markers[i].dispose();\n        this.markers.splice(i--, 1);\n      }\n    }\n    this._isClearing = false;\n  }\n\n  /**\n   * Clears markers on all lines\n   */\n  public clearAllMarkers(): void {\n    this._isClearing = true;\n    for (let i = 0; i < this.markers.length; i++) {\n      this.markers[i].dispose();\n      this.markers.splice(i--, 1);\n    }\n    this._isClearing = false;\n  }\n\n  public addMarker(y: number): Marker {\n    const marker = new Marker(y);\n    this.markers.push(marker);\n    marker.register(this.lines.onTrim(amount => {\n      marker.line -= amount;\n      // The marker should be disposed when the line is trimmed from the buffer\n      if (marker.line < 0) {\n        marker.dispose();\n      }\n    }));\n    marker.register(this.lines.onInsert(event => {\n      if (marker.line >= event.index) {\n        marker.line += event.amount;\n      }\n    }));\n    marker.register(this.lines.onDelete(event => {\n      // Delete the marker if it's within the range\n      if (marker.line >= event.index && marker.line < event.index + event.amount) {\n        marker.dispose();\n      }\n\n      // Shift the marker if it's after the deleted range\n      if (marker.line > event.index) {\n        marker.line -= event.amount;\n      }\n    }));\n    marker.register(marker.onDispose(() => this._removeMarker(marker)));\n    return marker;\n  }\n\n  private _removeMarker(marker: Marker): void {\n    if (!this._isClearing) {\n      this.markers.splice(this.markers.indexOf(marker), 1);\n    }\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CharData, IAttributeData, IBufferLine, ICellData, IExtendedAttrs } from 'common/Types';\nimport { AttributeData } from 'common/buffer/AttributeData';\nimport { CellData } from 'common/buffer/CellData';\nimport { Attributes, BgFlags, CHAR_DATA_ATTR_INDEX, CHAR_DATA_CHAR_INDEX, CHAR_DATA_WIDTH_INDEX, Content, NULL_CELL_CHAR, NULL_CELL_CODE, NULL_CELL_WIDTH, WHITESPACE_CELL_CHAR } from 'common/buffer/Constants';\nimport { stringFromCodePoint } from 'common/input/TextDecoder';\n\n/**\n * buffer memory layout:\n *\n *   |             uint32_t             |        uint32_t         |        uint32_t         |\n *   |             `content`            |          `FG`           |          `BG`           |\n *   | wcwidth(2) comb(1) codepoint(21) | flags(8) R(8) G(8) B(8) | flags(8) R(8) G(8) B(8) |\n */\n\n\n/** typed array slots taken by one cell */\nconst CELL_SIZE = 3;\n\n/**\n * Cell member indices.\n *\n * Direct access:\n *    `content = data[column * CELL_SIZE + Cell.CONTENT];`\n *    `fg = data[column * CELL_SIZE + Cell.FG];`\n *    `bg = data[column * CELL_SIZE + Cell.BG];`\n */\nconst enum Cell {\n  CONTENT = 0,\n  FG = 1, // currently simply holds all known attrs\n  BG = 2  // currently unused\n}\n\nexport const DEFAULT_ATTR_DATA = Object.freeze(new AttributeData());\n\n// Work variables to avoid garbage collection\nlet $startIndex = 0;\n\n/** Factor when to cleanup underlying array buffer after shrinking. */\nconst CLEANUP_THRESHOLD = 2;\n\n/**\n * Typed array based bufferline implementation.\n *\n * There are 2 ways to insert data into the cell buffer:\n * - `setCellFromCodepoint` + `addCodepointToCell`\n *   Use these for data that is already UTF32.\n *   Used during normal input in `InputHandler` for faster buffer access.\n * - `setCell`\n *   This method takes a CellData object and stores the data in the buffer.\n *   Use `CellData.fromCharData` to create the CellData object (e.g. from JS string).\n *\n * To retrieve data from the buffer use either one of the primitive methods\n * (if only one particular value is needed) or `loadCell`. For `loadCell` in a loop\n * memory allocs / GC pressure can be greatly reduced by reusing the CellData object.\n */\nexport class BufferLine implements IBufferLine {\n  protected _data: Uint32Array;\n  protected _combined: {[index: number]: string} = {};\n  protected _extendedAttrs: {[index: number]: IExtendedAttrs | undefined} = {};\n  public length: number;\n\n  constructor(cols: number, fillCellData?: ICellData, public isWrapped: boolean = false) {\n    this._data = new Uint32Array(cols * CELL_SIZE);\n    const cell = fillCellData || CellData.fromCharData([0, NULL_CELL_CHAR, NULL_CELL_WIDTH, NULL_CELL_CODE]);\n    for (let i = 0; i < cols; ++i) {\n      this.setCell(i, cell);\n    }\n    this.length = cols;\n  }\n\n  /**\n   * Get cell data CharData.\n   * @deprecated\n   */\n  public get(index: number): CharData {\n    const content = this._data[index * CELL_SIZE + Cell.CONTENT];\n    const cp = content & Content.CODEPOINT_MASK;\n    return [\n      this._data[index * CELL_SIZE + Cell.FG],\n      (content & Content.IS_COMBINED_MASK)\n        ? this._combined[index]\n        : (cp) ? stringFromCodePoint(cp) : '',\n      content >> Content.WIDTH_SHIFT,\n      (content & Content.IS_COMBINED_MASK)\n        ? this._combined[index].charCodeAt(this._combined[index].length - 1)\n        : cp\n    ];\n  }\n\n  /**\n   * Set cell data from CharData.\n   * @deprecated\n   */\n  public set(index: number, value: CharData): void {\n    this._data[index * CELL_SIZE + Cell.FG] = value[CHAR_DATA_ATTR_INDEX];\n    if (value[CHAR_DATA_CHAR_INDEX].length > 1) {\n      this._combined[index] = value[1];\n      this._data[index * CELL_SIZE + Cell.CONTENT] = index | Content.IS_COMBINED_MASK | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    } else {\n      this._data[index * CELL_SIZE + Cell.CONTENT] = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n  }\n\n  /**\n   * primitive getters\n   * use these when only one value is needed, otherwise use `loadCell`\n   */\n  public getWidth(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.CONTENT] >> Content.WIDTH_SHIFT;\n  }\n\n  /** Test whether content has width. */\n  public hasWidth(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.CONTENT] & Content.WIDTH_MASK;\n  }\n\n  /** Get FG cell component. */\n  public getFg(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.FG];\n  }\n\n  /** Get BG cell component. */\n  public getBg(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.BG];\n  }\n\n  /**\n   * Test whether contains any chars.\n   * Basically an empty has no content, but other cells might differ in FG/BG\n   * from real empty cells.\n   */\n  public hasContent(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.CONTENT] & Content.HAS_CONTENT_MASK;\n  }\n\n  /**\n   * Get codepoint of the cell.\n   * To be in line with `code` in CharData this either returns\n   * a single UTF32 codepoint or the last codepoint of a combined string.\n   */\n  public getCodePoint(index: number): number {\n    const content = this._data[index * CELL_SIZE + Cell.CONTENT];\n    if (content & Content.IS_COMBINED_MASK) {\n      return this._combined[index].charCodeAt(this._combined[index].length - 1);\n    }\n    return content & Content.CODEPOINT_MASK;\n  }\n\n  /** Test whether the cell contains a combined string. */\n  public isCombined(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.CONTENT] & Content.IS_COMBINED_MASK;\n  }\n\n  /** Returns the string content of the cell. */\n  public getString(index: number): string {\n    const content = this._data[index * CELL_SIZE + Cell.CONTENT];\n    if (content & Content.IS_COMBINED_MASK) {\n      return this._combined[index];\n    }\n    if (content & Content.CODEPOINT_MASK) {\n      return stringFromCodePoint(content & Content.CODEPOINT_MASK);\n    }\n    // return empty string for empty cells\n    return '';\n  }\n\n  /** Get state of protected flag. */\n  public isProtected(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.BG] & BgFlags.PROTECTED;\n  }\n\n  /**\n   * Load data at `index` into `cell`. This is used to access cells in a way that's more friendly\n   * to GC as it significantly reduced the amount of new objects/references needed.\n   */\n  public loadCell(index: number, cell: ICellData): ICellData {\n    $startIndex = index * CELL_SIZE;\n    cell.content = this._data[$startIndex + Cell.CONTENT];\n    cell.fg = this._data[$startIndex + Cell.FG];\n    cell.bg = this._data[$startIndex + Cell.BG];\n    if (cell.content & Content.IS_COMBINED_MASK) {\n      cell.combinedData = this._combined[index];\n    }\n    if (cell.bg & BgFlags.HAS_EXTENDED) {\n      cell.extended = this._extendedAttrs[index]!;\n    }\n    return cell;\n  }\n\n  /**\n   * Set data at `index` to `cell`.\n   */\n  public setCell(index: number, cell: ICellData): void {\n    if (cell.content & Content.IS_COMBINED_MASK) {\n      this._combined[index] = cell.combinedData;\n    }\n    if (cell.bg & BgFlags.HAS_EXTENDED) {\n      this._extendedAttrs[index] = cell.extended;\n    }\n    this._data[index * CELL_SIZE + Cell.CONTENT] = cell.content;\n    this._data[index * CELL_SIZE + Cell.FG] = cell.fg;\n    this._data[index * CELL_SIZE + Cell.BG] = cell.bg;\n  }\n\n  /**\n   * Set cell data from input handler.\n   * Since the input handler see the incoming chars as UTF32 codepoints,\n   * it gets an optimized access method.\n   */\n  public setCellFromCodepoint(index: number, codePoint: number, width: number, attrs: IAttributeData): void {\n    if (attrs.bg & BgFlags.HAS_EXTENDED) {\n      this._extendedAttrs[index] = attrs.extended;\n    }\n    this._data[index * CELL_SIZE + Cell.CONTENT] = codePoint | (width << Content.WIDTH_SHIFT);\n    this._data[index * CELL_SIZE + Cell.FG] = attrs.fg;\n    this._data[index * CELL_SIZE + Cell.BG] = attrs.bg;\n  }\n\n  /**\n   * Add a codepoint to a cell from input handler.\n   * During input stage combining chars with a width of 0 follow and stack\n   * onto a leading char. Since we already set the attrs\n   * by the previous `setDataFromCodePoint` call, we can omit it here.\n   */\n  public addCodepointToCell(index: number, codePoint: number, width: number): void {\n    let content = this._data[index * CELL_SIZE + Cell.CONTENT];\n    if (content & Content.IS_COMBINED_MASK) {\n      // we already have a combined string, simply add\n      this._combined[index] += stringFromCodePoint(codePoint);\n    } else {\n      if (content & Content.CODEPOINT_MASK) {\n        // normal case for combining chars:\n        //  - move current leading char + new one into combined string\n        //  - set combined flag\n        this._combined[index] = stringFromCodePoint(content & Content.CODEPOINT_MASK) + stringFromCodePoint(codePoint);\n        content &= ~Content.CODEPOINT_MASK; // set codepoint in buffer to 0\n        content |= Content.IS_COMBINED_MASK;\n      } else {\n        // should not happen - we actually have no data in the cell yet\n        // simply set the data in the cell buffer with a width of 1\n        content = codePoint | (1 << Content.WIDTH_SHIFT);\n      }\n    }\n    if (width) {\n      content &= ~Content.WIDTH_MASK;\n      content |= width << Content.WIDTH_SHIFT;\n    }\n    this._data[index * CELL_SIZE + Cell.CONTENT] = content;\n  }\n\n  public insertCells(pos: number, n: number, fillCellData: ICellData): void {\n    pos %= this.length;\n\n    // handle fullwidth at pos: reset cell one to the left if pos is second cell of a wide char\n    if (pos && this.getWidth(pos - 1) === 2) {\n      this.setCellFromCodepoint(pos - 1, 0, 1, fillCellData);\n    }\n\n    if (n < this.length - pos) {\n      const cell = new CellData();\n      for (let i = this.length - pos - n - 1; i >= 0; --i) {\n        this.setCell(pos + n + i, this.loadCell(pos + i, cell));\n      }\n      for (let i = 0; i < n; ++i) {\n        this.setCell(pos + i, fillCellData);\n      }\n    } else {\n      for (let i = pos; i < this.length; ++i) {\n        this.setCell(i, fillCellData);\n      }\n    }\n\n    // handle fullwidth at line end: reset last cell if it is first cell of a wide char\n    if (this.getWidth(this.length - 1) === 2) {\n      this.setCellFromCodepoint(this.length - 1, 0, 1, fillCellData);\n    }\n  }\n\n  public deleteCells(pos: number, n: number, fillCellData: ICellData): void {\n    pos %= this.length;\n    if (n < this.length - pos) {\n      const cell = new CellData();\n      for (let i = 0; i < this.length - pos - n; ++i) {\n        this.setCell(pos + i, this.loadCell(pos + n + i, cell));\n      }\n      for (let i = this.length - n; i < this.length; ++i) {\n        this.setCell(i, fillCellData);\n      }\n    } else {\n      for (let i = pos; i < this.length; ++i) {\n        this.setCell(i, fillCellData);\n      }\n    }\n\n    // handle fullwidth at pos:\n    // - reset pos-1 if wide char\n    // - reset pos if width==0 (previous second cell of a wide char)\n    if (pos && this.getWidth(pos - 1) === 2) {\n      this.setCellFromCodepoint(pos - 1, 0, 1, fillCellData);\n    }\n    if (this.getWidth(pos) === 0 && !this.hasContent(pos)) {\n      this.setCellFromCodepoint(pos, 0, 1, fillCellData);\n    }\n  }\n\n  public replaceCells(start: number, end: number, fillCellData: ICellData, respectProtect: boolean = false): void {\n    // full branching on respectProtect==true, hopefully getting fast JIT for standard case\n    if (respectProtect) {\n      if (start && this.getWidth(start - 1) === 2 && !this.isProtected(start - 1)) {\n        this.setCellFromCodepoint(start - 1, 0, 1, fillCellData);\n      }\n      if (end < this.length && this.getWidth(end - 1) === 2 && !this.isProtected(end)) {\n        this.setCellFromCodepoint(end, 0, 1, fillCellData);\n      }\n      while (start < end  && start < this.length) {\n        if (!this.isProtected(start)) {\n          this.setCell(start, fillCellData);\n        }\n        start++;\n      }\n      return;\n    }\n\n    // handle fullwidth at start: reset cell one to the left if start is second cell of a wide char\n    if (start && this.getWidth(start - 1) === 2) {\n      this.setCellFromCodepoint(start - 1, 0, 1, fillCellData);\n    }\n    // handle fullwidth at last cell + 1: reset to empty cell if it is second part of a wide char\n    if (end < this.length && this.getWidth(end - 1) === 2) {\n      this.setCellFromCodepoint(end, 0, 1, fillCellData);\n    }\n\n    while (start < end  && start < this.length) {\n      this.setCell(start++, fillCellData);\n    }\n  }\n\n  /**\n   * Resize BufferLine to `cols` filling excess cells with `fillCellData`.\n   * The underlying array buffer will not change if there is still enough space\n   * to hold the new buffer line data.\n   * Returns a boolean indicating, whether a `cleanupMemory` call would free\n   * excess memory (true after shrinking > CLEANUP_THRESHOLD).\n   */\n  public resize(cols: number, fillCellData: ICellData): boolean {\n    if (cols === this.length) {\n      return this._data.length * 4 * CLEANUP_THRESHOLD < this._data.buffer.byteLength;\n    }\n    const uint32Cells = cols * CELL_SIZE;\n    if (cols > this.length) {\n      if (this._data.buffer.byteLength >= uint32Cells * 4) {\n        // optimization: avoid alloc and data copy if buffer has enough room\n        this._data = new Uint32Array(this._data.buffer, 0, uint32Cells);\n      } else {\n        // slow path: new alloc and full data copy\n        const data = new Uint32Array(uint32Cells);\n        data.set(this._data);\n        this._data = data;\n      }\n      for (let i = this.length; i < cols; ++i) {\n        this.setCell(i, fillCellData);\n      }\n    } else {\n      // optimization: just shrink the view on existing buffer\n      this._data = this._data.subarray(0, uint32Cells);\n      // Remove any cut off combined data\n      const keys = Object.keys(this._combined);\n      for (let i = 0; i < keys.length; i++) {\n        const key = parseInt(keys[i], 10);\n        if (key >= cols) {\n          delete this._combined[key];\n        }\n      }\n      // remove any cut off extended attributes\n      const extKeys = Object.keys(this._extendedAttrs);\n      for (let i = 0; i < extKeys.length; i++) {\n        const key = parseInt(extKeys[i], 10);\n        if (key >= cols) {\n          delete this._extendedAttrs[key];\n        }\n      }\n    }\n    this.length = cols;\n    return uint32Cells * 4 * CLEANUP_THRESHOLD < this._data.buffer.byteLength;\n  }\n\n  /**\n   * Cleanup underlying array buffer.\n   * A cleanup will be triggered if the array buffer exceeds the actual used\n   * memory by a factor of CLEANUP_THRESHOLD.\n   * Returns 0 or 1 indicating whether a cleanup happened.\n   */\n  public cleanupMemory(): number {\n    if (this._data.length * 4 * CLEANUP_THRESHOLD < this._data.buffer.byteLength) {\n      const data = new Uint32Array(this._data.length);\n      data.set(this._data);\n      this._data = data;\n      return 1;\n    }\n    return 0;\n  }\n\n  /** fill a line with fillCharData */\n  public fill(fillCellData: ICellData, respectProtect: boolean = false): void {\n    // full branching on respectProtect==true, hopefully getting fast JIT for standard case\n    if (respectProtect) {\n      for (let i = 0; i < this.length; ++i) {\n        if (!this.isProtected(i)) {\n          this.setCell(i, fillCellData);\n        }\n      }\n      return;\n    }\n    this._combined = {};\n    this._extendedAttrs = {};\n    for (let i = 0; i < this.length; ++i) {\n      this.setCell(i, fillCellData);\n    }\n  }\n\n  /** alter to a full copy of line  */\n  public copyFrom(line: BufferLine): void {\n    if (this.length !== line.length) {\n      this._data = new Uint32Array(line._data);\n    } else {\n      // use high speed copy if lengths are equal\n      this._data.set(line._data);\n    }\n    this.length = line.length;\n    this._combined = {};\n    for (const el in line._combined) {\n      this._combined[el] = line._combined[el];\n    }\n    this._extendedAttrs = {};\n    for (const el in line._extendedAttrs) {\n      this._extendedAttrs[el] = line._extendedAttrs[el];\n    }\n    this.isWrapped = line.isWrapped;\n  }\n\n  /** create a new clone */\n  public clone(): IBufferLine {\n    const newLine = new BufferLine(0);\n    newLine._data = new Uint32Array(this._data);\n    newLine.length = this.length;\n    for (const el in this._combined) {\n      newLine._combined[el] = this._combined[el];\n    }\n    for (const el in this._extendedAttrs) {\n      newLine._extendedAttrs[el] = this._extendedAttrs[el];\n    }\n    newLine.isWrapped = this.isWrapped;\n    return newLine;\n  }\n\n  public getTrimmedLength(): number {\n    for (let i = this.length - 1; i >= 0; --i) {\n      if ((this._data[i * CELL_SIZE + Cell.CONTENT] & Content.HAS_CONTENT_MASK)) {\n        return i + (this._data[i * CELL_SIZE + Cell.CONTENT] >> Content.WIDTH_SHIFT);\n      }\n    }\n    return 0;\n  }\n\n  public getNoBgTrimmedLength(): number {\n    for (let i = this.length - 1; i >= 0; --i) {\n      if ((this._data[i * CELL_SIZE + Cell.CONTENT] & Content.HAS_CONTENT_MASK) || (this._data[i * CELL_SIZE + Cell.BG] & Attributes.CM_MASK)) {\n        return i + (this._data[i * CELL_SIZE + Cell.CONTENT] >> Content.WIDTH_SHIFT);\n      }\n    }\n    return 0;\n  }\n\n  public copyCellsFrom(src: BufferLine, srcCol: number, destCol: number, length: number, applyInReverse: boolean): void {\n    const srcData = src._data;\n    if (applyInReverse) {\n      for (let cell = length - 1; cell >= 0; cell--) {\n        for (let i = 0; i < CELL_SIZE; i++) {\n          this._data[(destCol + cell) * CELL_SIZE + i] = srcData[(srcCol + cell) * CELL_SIZE + i];\n        }\n        if (srcData[(srcCol + cell) * CELL_SIZE + Cell.BG] & BgFlags.HAS_EXTENDED) {\n          this._extendedAttrs[destCol + cell] = src._extendedAttrs[srcCol + cell];\n        }\n      }\n    } else {\n      for (let cell = 0; cell < length; cell++) {\n        for (let i = 0; i < CELL_SIZE; i++) {\n          this._data[(destCol + cell) * CELL_SIZE + i] = srcData[(srcCol + cell) * CELL_SIZE + i];\n        }\n        if (srcData[(srcCol + cell) * CELL_SIZE + Cell.BG] & BgFlags.HAS_EXTENDED) {\n          this._extendedAttrs[destCol + cell] = src._extendedAttrs[srcCol + cell];\n        }\n      }\n    }\n\n    // Move any combined data over as needed, FIXME: repeat for extended attrs\n    const srcCombinedKeys = Object.keys(src._combined);\n    for (let i = 0; i < srcCombinedKeys.length; i++) {\n      const key = parseInt(srcCombinedKeys[i], 10);\n      if (key >= srcCol) {\n        this._combined[key - srcCol + destCol] = src._combined[key];\n      }\n    }\n  }\n\n  /**\n   * Translates the buffer line to a string.\n   *\n   * @param trimRight Whether to trim any empty cells on the right.\n   * @param startCol The column to start the string (0-based inclusive).\n   * @param endCol The column to end the string (0-based exclusive).\n   * @param outColumns if specified, this array will be filled with column numbers such that\n   * `returnedString[i]` is displayed at `outColumns[i]` column. `outColumns[returnedString.length]`\n   * is where the character following `returnedString` will be displayed.\n   *\n   * When a single cell is translated to multiple UTF-16 code units (e.g. surrogate pair) in the\n   * returned string, the corresponding entries in `outColumns` will have the same column number.\n   */\n  public translateToString(trimRight?: boolean, startCol?: number, endCol?: number, outColumns?: number[]): string {\n    startCol = startCol ?? 0;\n    endCol = endCol ?? this.length;\n    if (trimRight) {\n      endCol = Math.min(endCol, this.getTrimmedLength());\n    }\n    if (outColumns) {\n      outColumns.length = 0;\n    }\n    let result = '';\n    while (startCol < endCol) {\n      const content = this._data[startCol * CELL_SIZE + Cell.CONTENT];\n      const cp = content & Content.CODEPOINT_MASK;\n      const chars = (content & Content.IS_COMBINED_MASK) ? this._combined[startCol] : (cp) ? stringFromCodePoint(cp) : WHITESPACE_CELL_CHAR;\n      result += chars;\n      if (outColumns) {\n        for (let i = 0; i < chars.length; ++i) {\n          outColumns.push(startCol);\n        }\n      }\n      startCol += (content >> Content.WIDTH_SHIFT) || 1; // always advance by at least 1\n    }\n    if (outColumns) {\n      outColumns.push(startCol);\n    }\n    return result;\n  }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferRange } from '@xterm/xterm';\n\nexport function getRangeLength(range: IBufferRange, bufferCols: number): number {\n  if (range.start.y > range.end.y) {\n    throw new Error(`Buffer range end (${range.end.x}, ${range.end.y}) cannot be before start (${range.start.x}, ${range.start.y})`);\n  }\n  return bufferCols * (range.end.y - range.start.y) + (range.end.x - range.start.x + 1);\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { BufferLine } from 'common/buffer/BufferLine';\nimport { CircularList } from 'common/CircularList';\nimport { IBufferLine, ICellData } from 'common/Types';\n\nexport interface INewLayoutResult {\n  layout: number[];\n  countRemoved: number;\n}\n\n/**\n * Evaluates and returns indexes to be removed after a reflow larger occurs. Lines will be removed\n * when a wrapped line unwraps.\n * @param lines The buffer lines.\n * @param oldCols The columns before resize\n * @param newCols The columns after resize.\n * @param bufferAbsoluteY The absolute y position of the cursor (baseY + cursorY).\n * @param nullCell The cell data to use when filling in empty cells.\n */\nexport function reflowLargerGetLinesToRemove(lines: CircularList<IBufferLine>, oldCols: number, newCols: number, bufferAbsoluteY: number, nullCell: ICellData): number[] {\n  // Gather all BufferLines that need to be removed from the Buffer here so that they can be\n  // batched up and only committed once\n  const toRemove: number[] = [];\n\n  for (let y = 0; y < lines.length - 1; y++) {\n    // Check if this row is wrapped\n    let i = y;\n    let nextLine = lines.get(++i) as BufferLine;\n    if (!nextLine.isWrapped) {\n      continue;\n    }\n\n    // Check how many lines it's wrapped for\n    const wrappedLines: BufferLine[] = [lines.get(y) as BufferLine];\n    while (i < lines.length && nextLine.isWrapped) {\n      wrappedLines.push(nextLine);\n      nextLine = lines.get(++i) as BufferLine;\n    }\n\n    // If these lines contain the cursor don't touch them, the program will handle fixing up wrapped\n    // lines with the cursor\n    if (bufferAbsoluteY >= y && bufferAbsoluteY < i) {\n      y += wrappedLines.length - 1;\n      continue;\n    }\n\n    // Copy buffer data to new locations\n    let destLineIndex = 0;\n    let destCol = getWrappedLineTrimmedLength(wrappedLines, destLineIndex, oldCols);\n    let srcLineIndex = 1;\n    let srcCol = 0;\n    while (srcLineIndex < wrappedLines.length) {\n      const srcTrimmedTineLength = getWrappedLineTrimmedLength(wrappedLines, srcLineIndex, oldCols);\n      const srcRemainingCells = srcTrimmedTineLength - srcCol;\n      const destRemainingCells = newCols - destCol;\n      const cellsToCopy = Math.min(srcRemainingCells, destRemainingCells);\n\n      wrappedLines[destLineIndex].copyCellsFrom(wrappedLines[srcLineIndex], srcCol, destCol, cellsToCopy, false);\n\n      destCol += cellsToCopy;\n      if (destCol === newCols) {\n        destLineIndex++;\n        destCol = 0;\n      }\n      srcCol += cellsToCopy;\n      if (srcCol === srcTrimmedTineLength) {\n        srcLineIndex++;\n        srcCol = 0;\n      }\n\n      // Make sure the last cell isn't wide, if it is copy it to the current dest\n      if (destCol === 0 && destLineIndex !== 0) {\n        if (wrappedLines[destLineIndex - 1].getWidth(newCols - 1) === 2) {\n          wrappedLines[destLineIndex].copyCellsFrom(wrappedLines[destLineIndex - 1], newCols - 1, destCol++, 1, false);\n          // Null out the end of the last row\n          wrappedLines[destLineIndex - 1].setCell(newCols - 1, nullCell);\n        }\n      }\n    }\n\n    // Clear out remaining cells or fragments could remain;\n    wrappedLines[destLineIndex].replaceCells(destCol, newCols, nullCell);\n\n    // Work backwards and remove any rows at the end that only contain null cells\n    let countToRemove = 0;\n    for (let i = wrappedLines.length - 1; i > 0; i--) {\n      if (i > destLineIndex || wrappedLines[i].getTrimmedLength() === 0) {\n        countToRemove++;\n      } else {\n        break;\n      }\n    }\n\n    if (countToRemove > 0) {\n      toRemove.push(y + wrappedLines.length - countToRemove); // index\n      toRemove.push(countToRemove);\n    }\n\n    y += wrappedLines.length - 1;\n  }\n  return toRemove;\n}\n\n/**\n * Creates and return the new layout for lines given an array of indexes to be removed.\n * @param lines The buffer lines.\n * @param toRemove The indexes to remove.\n */\nexport function reflowLargerCreateNewLayout(lines: CircularList<IBufferLine>, toRemove: number[]): INewLayoutResult {\n  const layout: number[] = [];\n  // First iterate through the list and get the actual indexes to use for rows\n  let nextToRemoveIndex = 0;\n  let nextToRemoveStart = toRemove[nextToRemoveIndex];\n  let countRemovedSoFar = 0;\n  for (let i = 0; i < lines.length; i++) {\n    if (nextToRemoveStart === i) {\n      const countToRemove = toRemove[++nextToRemoveIndex];\n\n      // Tell markers that there was a deletion\n      lines.onDeleteEmitter.fire({\n        index: i - countRemovedSoFar,\n        amount: countToRemove\n      });\n\n      i += countToRemove - 1;\n      countRemovedSoFar += countToRemove;\n      nextToRemoveStart = toRemove[++nextToRemoveIndex];\n    } else {\n      layout.push(i);\n    }\n  }\n  return {\n    layout,\n    countRemoved: countRemovedSoFar\n  };\n}\n\n/**\n * Applies a new layout to the buffer. This essentially does the same as many splice calls but it's\n * done all at once in a single iteration through the list since splice is very expensive.\n * @param lines The buffer lines.\n * @param newLayout The new layout to apply.\n */\nexport function reflowLargerApplyNewLayout(lines: CircularList<IBufferLine>, newLayout: number[]): void {\n  // Record original lines so they don't get overridden when we rearrange the list\n  const newLayoutLines: BufferLine[] = [];\n  for (let i = 0; i < newLayout.length; i++) {\n    newLayoutLines.push(lines.get(newLayout[i]) as BufferLine);\n  }\n\n  // Rearrange the list\n  for (let i = 0; i < newLayoutLines.length; i++) {\n    lines.set(i, newLayoutLines[i]);\n  }\n  lines.length = newLayout.length;\n}\n\n/**\n * Gets the new line lengths for a given wrapped line. The purpose of this function it to pre-\n * compute the wrapping points since wide characters may need to be wrapped onto the following line.\n * This function will return an array of numbers of where each line wraps to, the resulting array\n * will only contain the values `newCols` (when the line does not end with a wide character) and\n * `newCols - 1` (when the line does end with a wide character), except for the last value which\n * will contain the remaining items to fill the line.\n *\n * Calling this with a `newCols` value of `1` will lock up.\n *\n * @param wrappedLines The wrapped lines to evaluate.\n * @param oldCols The columns before resize.\n * @param newCols The columns after resize.\n */\nexport function reflowSmallerGetNewLineLengths(wrappedLines: BufferLine[], oldCols: number, newCols: number): number[] {\n  const newLineLengths: number[] = [];\n  const cellsNeeded = wrappedLines.map((l, i) => getWrappedLineTrimmedLength(wrappedLines, i, oldCols)).reduce((p, c) => p + c);\n\n  // Use srcCol and srcLine to find the new wrapping point, use that to get the cellsAvailable and\n  // linesNeeded\n  let srcCol = 0;\n  let srcLine = 0;\n  let cellsAvailable = 0;\n  while (cellsAvailable < cellsNeeded) {\n    if (cellsNeeded - cellsAvailable < newCols) {\n      // Add the final line and exit the loop\n      newLineLengths.push(cellsNeeded - cellsAvailable);\n      break;\n    }\n    srcCol += newCols;\n    const oldTrimmedLength = getWrappedLineTrimmedLength(wrappedLines, srcLine, oldCols);\n    if (srcCol > oldTrimmedLength) {\n      srcCol -= oldTrimmedLength;\n      srcLine++;\n    }\n    const endsWithWide = wrappedLines[srcLine].getWidth(srcCol - 1) === 2;\n    if (endsWithWide) {\n      srcCol--;\n    }\n    const lineLength = endsWithWide ? newCols - 1 : newCols;\n    newLineLengths.push(lineLength);\n    cellsAvailable += lineLength;\n  }\n\n  return newLineLengths;\n}\n\nexport function getWrappedLineTrimmedLength(lines: BufferLine[], i: number, cols: number): number {\n  // If this is the last row in the wrapped line, get the actual trimmed length\n  if (i === lines.length - 1) {\n    return lines[i].getTrimmedLength();\n  }\n  // Detect whether the following line starts with a wide character and the end of the current line\n  // is null, if so then we can be pretty sure the null character should be excluded from the line\n  // length]\n  const endsInNull = !(lines[i].hasContent(cols - 1)) && lines[i].getWidth(cols - 1) === 1;\n  const followingLineStartsWithWide = lines[i + 1].getWidth(0) === 2;\n  if (endsInNull && followingLineStartsWithWide) {\n    return cols - 1;\n  }\n  return cols;\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { EventEmitter } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\nimport { IAttributeData } from 'common/Types';\nimport { Buffer } from 'common/buffer/Buffer';\nimport { IBuffer, IBufferSet } from 'common/buffer/Types';\nimport { IBufferService, IOptionsService } from 'common/services/Services';\n\n/**\n * The BufferSet represents the set of two buffers used by xterm terminals (normal and alt) and\n * provides also utilities for working with them.\n */\nexport class BufferSet extends Disposable implements IBufferSet {\n  private _normal!: Buffer;\n  private _alt!: Buffer;\n  private _activeBuffer!: Buffer;\n\n  private readonly _onBufferActivate = this.register(new EventEmitter<{activeBuffer: IBuffer, inactiveBuffer: IBuffer}>());\n  public readonly onBufferActivate = this._onBufferActivate.event;\n\n  /**\n   * Create a new BufferSet for the given terminal.\n   */\n  constructor(\n    private readonly _optionsService: IOptionsService,\n    private readonly _bufferService: IBufferService\n  ) {\n    super();\n    this.reset();\n    this.register(this._optionsService.onSpecificOptionChange('scrollback', () => this.resize(this._bufferService.cols, this._bufferService.rows)));\n    this.register(this._optionsService.onSpecificOptionChange('tabStopWidth', () => this.setupTabStops()));\n  }\n\n  public reset(): void {\n    this._normal = new Buffer(true, this._optionsService, this._bufferService);\n    this._normal.fillViewportRows();\n\n    // The alt buffer should never have scrollback.\n    // See http://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h2-The-Alternate-Screen-Buffer\n    this._alt = new Buffer(false, this._optionsService, this._bufferService);\n    this._activeBuffer = this._normal;\n    this._onBufferActivate.fire({\n      activeBuffer: this._normal,\n      inactiveBuffer: this._alt\n    });\n\n    this.setupTabStops();\n  }\n\n  /**\n   * Returns the alt Buffer of the BufferSet\n   */\n  public get alt(): Buffer {\n    return this._alt;\n  }\n\n  /**\n   * Returns the currently active Buffer of the BufferSet\n   */\n  public get active(): Buffer {\n    return this._activeBuffer;\n  }\n\n  /**\n   * Returns the normal Buffer of the BufferSet\n   */\n  public get normal(): Buffer {\n    return this._normal;\n  }\n\n  /**\n   * Sets the normal Buffer of the BufferSet as its currently active Buffer\n   */\n  public activateNormalBuffer(): void {\n    if (this._activeBuffer === this._normal) {\n      return;\n    }\n    this._normal.x = this._alt.x;\n    this._normal.y = this._alt.y;\n    // The alt buffer should always be cleared when we switch to the normal\n    // buffer. This frees up memory since the alt buffer should always be new\n    // when activated.\n    this._alt.clearAllMarkers();\n    this._alt.clear();\n    this._activeBuffer = this._normal;\n    this._onBufferActivate.fire({\n      activeBuffer: this._normal,\n      inactiveBuffer: this._alt\n    });\n  }\n\n  /**\n   * Sets the alt Buffer of the BufferSet as its currently active Buffer\n   */\n  public activateAltBuffer(fillAttr?: IAttributeData): void {\n    if (this._activeBuffer === this._alt) {\n      return;\n    }\n    // Since the alt buffer is always cleared when the normal buffer is\n    // activated, we want to fill it when switching to it.\n    this._alt.fillViewportRows(fillAttr);\n    this._alt.x = this._normal.x;\n    this._alt.y = this._normal.y;\n    this._activeBuffer = this._alt;\n    this._onBufferActivate.fire({\n      activeBuffer: this._alt,\n      inactiveBuffer: this._normal\n    });\n  }\n\n  /**\n   * Resizes both normal and alt buffers, adjusting their data accordingly.\n   * @param newCols The new number of columns.\n   * @param newRows The new number of rows.\n   */\n  public resize(newCols: number, newRows: number): void {\n    this._normal.resize(newCols, newRows);\n    this._alt.resize(newCols, newRows);\n    this.setupTabStops(newCols);\n  }\n\n  /**\n   * Setup the tab stops.\n   * @param i The index to start setting up tab stops from.\n   */\n  public setupTabStops(i?: number): void {\n    this._normal.setupTabStops(i);\n    this._alt.setupTabStops(i);\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CharData, ICellData, IExtendedAttrs } from 'common/Types';\nimport { stringFromCodePoint } from 'common/input/TextDecoder';\nimport { CHAR_DATA_CHAR_INDEX, CHAR_DATA_WIDTH_INDEX, CHAR_DATA_ATTR_INDEX, Content } from 'common/buffer/Constants';\nimport { AttributeData, ExtendedAttrs } from 'common/buffer/AttributeData';\n\n/**\n * CellData - represents a single Cell in the terminal buffer.\n */\nexport class CellData extends AttributeData implements ICellData {\n  /** Helper to create CellData from CharData. */\n  public static fromCharData(value: CharData): CellData {\n    const obj = new CellData();\n    obj.setFromCharData(value);\n    return obj;\n  }\n  /** Primitives from terminal buffer. */\n  public content = 0;\n  public fg = 0;\n  public bg = 0;\n  public extended: IExtendedAttrs = new ExtendedAttrs();\n  public combinedData = '';\n  /** Whether cell contains a combined string. */\n  public isCombined(): number {\n    return this.content & Content.IS_COMBINED_MASK;\n  }\n  /** Width of the cell. */\n  public getWidth(): number {\n    return this.content >> Content.WIDTH_SHIFT;\n  }\n  /** JS string of the content. */\n  public getChars(): string {\n    if (this.content & Content.IS_COMBINED_MASK) {\n      return this.combinedData;\n    }\n    if (this.content & Content.CODEPOINT_MASK) {\n      return stringFromCodePoint(this.content & Content.CODEPOINT_MASK);\n    }\n    return '';\n  }\n  /**\n   * Codepoint of cell\n   * Note this returns the UTF32 codepoint of single chars,\n   * if content is a combined string it returns the codepoint\n   * of the last char in string to be in line with code in CharData.\n   */\n  public getCode(): number {\n    return (this.isCombined())\n      ? this.combinedData.charCodeAt(this.combinedData.length - 1)\n      : this.content & Content.CODEPOINT_MASK;\n  }\n  /** Set data from CharData */\n  public setFromCharData(value: CharData): void {\n    this.fg = value[CHAR_DATA_ATTR_INDEX];\n    this.bg = 0;\n    let combined = false;\n    // surrogates and combined strings need special treatment\n    if (value[CHAR_DATA_CHAR_INDEX].length > 2) {\n      combined = true;\n    }\n    else if (value[CHAR_DATA_CHAR_INDEX].length === 2) {\n      const code = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0);\n      // if the 2-char string is a surrogate create single codepoint\n      // everything else is combined\n      if (0xD800 <= code && code <= 0xDBFF) {\n        const second = value[CHAR_DATA_CHAR_INDEX].charCodeAt(1);\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          this.content = ((code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n        }\n        else {\n          combined = true;\n        }\n      }\n      else {\n        combined = true;\n      }\n    }\n    else {\n      this.content = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n    if (combined) {\n      this.combinedData = value[CHAR_DATA_CHAR_INDEX];\n      this.content = Content.IS_COMBINED_MASK | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n  }\n  /** Get data as CharData. */\n  public getAsCharData(): CharData {\n    return [this.fg, this.getChars(), this.getWidth(), this.getCode()];\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport const DEFAULT_COLOR = 0;\nexport const DEFAULT_ATTR = (0 << 18) | (DEFAULT_COLOR << 9) | (256 << 0);\nexport const DEFAULT_EXT = 0;\n\nexport const CHAR_DATA_ATTR_INDEX = 0;\nexport const CHAR_DATA_CHAR_INDEX = 1;\nexport const CHAR_DATA_WIDTH_INDEX = 2;\nexport const CHAR_DATA_CODE_INDEX = 3;\n\n/**\n * Null cell - a real empty cell (containing nothing).\n * Note that code should always be 0 for a null cell as\n * several test condition of the buffer line rely on this.\n */\nexport const NULL_CELL_CHAR = '';\nexport const NULL_CELL_WIDTH = 1;\nexport const NULL_CELL_CODE = 0;\n\n/**\n * Whitespace cell.\n * This is meant as a replacement for empty cells when needed\n * during rendering lines to preserve correct aligment.\n */\nexport const WHITESPACE_CELL_CHAR = ' ';\nexport const WHITESPACE_CELL_WIDTH = 1;\nexport const WHITESPACE_CELL_CODE = 32;\n\n/**\n * Bitmasks for accessing data in `content`.\n */\nexport const enum Content {\n  /**\n   * bit 1..21    codepoint, max allowed in UTF32 is 0x10FFFF (21 bits taken)\n   *              read:   `codepoint = content & Content.codepointMask;`\n   *              write:  `content |= codepoint & Content.codepointMask;`\n   *                      shortcut if precondition `codepoint <= 0x10FFFF` is met:\n   *                      `content |= codepoint;`\n   */\n  CODEPOINT_MASK = 0x1FFFFF,\n\n  /**\n   * bit 22       flag indication whether a cell contains combined content\n   *              read:   `isCombined = content & Content.isCombined;`\n   *              set:    `content |= Content.isCombined;`\n   *              clear:  `content &= ~Content.isCombined;`\n   */\n  IS_COMBINED_MASK = 0x200000,  // 1 << 21\n\n  /**\n   * bit 1..22    mask to check whether a cell contains any string data\n   *              we need to check for codepoint and isCombined bits to see\n   *              whether a cell contains anything\n   *              read:   `isEmpty = !(content & Content.hasContent)`\n   */\n  HAS_CONTENT_MASK = 0x3FFFFF,\n\n  /**\n   * bit 23..24   wcwidth value of cell, takes 2 bits (ranges from 0..2)\n   *              read:   `width = (content & Content.widthMask) >> Content.widthShift;`\n   *                      `hasWidth = content & Content.widthMask;`\n   *                      as long as wcwidth is highest value in `content`:\n   *                      `width = content >> Content.widthShift;`\n   *              write:  `content |= (width << Content.widthShift) & Content.widthMask;`\n   *                      shortcut if precondition `0 <= width <= 3` is met:\n   *                      `content |= width << Content.widthShift;`\n   */\n  WIDTH_MASK = 0xC00000,   // 3 << 22\n  WIDTH_SHIFT = 22\n}\n\nexport const enum Attributes {\n  /**\n   * bit 1..8     blue in RGB, color in P256 and P16\n   */\n  BLUE_MASK = 0xFF,\n  BLUE_SHIFT = 0,\n  PCOLOR_MASK = 0xFF,\n  PCOLOR_SHIFT = 0,\n\n  /**\n   * bit 9..16    green in RGB\n   */\n  GREEN_MASK = 0xFF00,\n  GREEN_SHIFT = 8,\n\n  /**\n   * bit 17..24   red in RGB\n   */\n  RED_MASK = 0xFF0000,\n  RED_SHIFT = 16,\n\n  /**\n   * bit 25..26   color mode: DEFAULT (0) | P16 (1) | P256 (2) | RGB (3)\n   */\n  CM_MASK = 0x3000000,\n  CM_DEFAULT = 0,\n  CM_P16 = 0x1000000,\n  CM_P256 = 0x2000000,\n  CM_RGB = 0x3000000,\n\n  /**\n   * bit 1..24  RGB room\n   */\n  RGB_MASK = 0xFFFFFF\n}\n\nexport const enum FgFlags {\n  /**\n   * bit 27..32\n   */\n  INVERSE = 0x4000000,\n  BOLD = 0x8000000,\n  UNDERLINE = 0x10000000,\n  BLINK = 0x20000000,\n  INVISIBLE = 0x40000000,\n  STRIKETHROUGH = 0x80000000,\n}\n\nexport const enum BgFlags {\n  /**\n   * bit 27..32 (upper 2 unused)\n   */\n  ITALIC = 0x4000000,\n  DIM = 0x8000000,\n  HAS_EXTENDED = 0x10000000,\n  PROTECTED = 0x20000000,\n  OVERLINE = 0x40000000\n}\n\nexport const enum ExtFlags {\n  /**\n   * bit 27..29\n   */\n  UNDERLINE_STYLE = 0x1C000000,\n\n  /**\n   * bit 30..32\n   *\n   * An optional variant for the glyph, this can be used for example to offset underlines by a\n   * number of pixels to create a perfect pattern.\n   */\n  VARIANT_OFFSET = 0xE0000000\n}\n\nexport const enum UnderlineStyle {\n  NONE = 0,\n  SINGLE = 1,\n  DOUBLE = 2,\n  CURLY = 3,\n  DOTTED = 4,\n  DASHED = 5\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { EventEmitter } from 'common/EventEmitter';\nimport { disposeArray } from 'common/Lifecycle';\nimport { IDisposable, IMarker } from 'common/Types';\n\nexport class Marker implements IMarker {\n  private static _nextId = 1;\n\n  public isDisposed: boolean = false;\n  private readonly _disposables: IDisposable[] = [];\n\n  private readonly _id: number = Marker._nextId++;\n  public get id(): number { return this._id; }\n\n  private readonly _onDispose = this.register(new EventEmitter<void>());\n  public readonly onDispose = this._onDispose.event;\n\n  constructor(\n    public line: number\n  ) {\n  }\n\n  public dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    this.isDisposed = true;\n    this.line = -1;\n    // Emit before super.dispose such that dispose listeners get a change to react\n    this._onDispose.fire();\n    disposeArray(this._disposables);\n    this._disposables.length = 0;\n  }\n\n  public register<T extends IDisposable>(disposable: T): T {\n    this._disposables.push(disposable);\n    return disposable;\n  }\n}\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharset } from 'common/Types';\n\n/**\n * The character sets supported by the terminal. These enable several languages\n * to be represented within the terminal with only 8-bit encoding. See ISO 2022\n * for a discussion on character sets. Only VT100 character sets are supported.\n */\nexport const CHARSETS: { [key: string]: ICharset | undefined } = {};\n\n/**\n * The default character set, US.\n */\nexport const DEFAULT_CHARSET: ICharset | undefined = CHARSETS['B'];\n\n/**\n * DEC Special Character and Line Drawing Set.\n * Reference: http://vt100.net/docs/vt102-ug/table5-13.html\n * A lot of curses apps use this if they see TERM=xterm.\n * testing: echo -e '\\e(0a\\e(B'\n * The xterm output sometimes seems to conflict with the\n * reference above. xterm seems in line with the reference\n * when running vttest however.\n * The table below now uses xterm's output from vttest.\n */\nCHARSETS['0'] = {\n  '`': '\\u25c6', // '◆'\n  'a': '\\u2592', // '▒'\n  'b': '\\u2409', // '␉' (HT)\n  'c': '\\u240c', // '␌' (FF)\n  'd': '\\u240d', // '␍' (CR)\n  'e': '\\u240a', // '␊' (LF)\n  'f': '\\u00b0', // '°'\n  'g': '\\u00b1', // '±'\n  'h': '\\u2424', // '␤' (NL)\n  'i': '\\u240b', // '␋' (VT)\n  'j': '\\u2518', // '┘'\n  'k': '\\u2510', // '┐'\n  'l': '\\u250c', // '┌'\n  'm': '\\u2514', // '└'\n  'n': '\\u253c', // '┼'\n  'o': '\\u23ba', // '⎺'\n  'p': '\\u23bb', // '⎻'\n  'q': '\\u2500', // '─'\n  'r': '\\u23bc', // '⎼'\n  's': '\\u23bd', // '⎽'\n  't': '\\u251c', // '├'\n  'u': '\\u2524', // '┤'\n  'v': '\\u2534', // '┴'\n  'w': '\\u252c', // '┬'\n  'x': '\\u2502', // '│'\n  'y': '\\u2264', // '≤'\n  'z': '\\u2265', // '≥'\n  '{': '\\u03c0', // 'π'\n  '|': '\\u2260', // '≠'\n  '}': '\\u00a3', // '£'\n  '~': '\\u00b7'  // '·'\n};\n\n/**\n * British character set\n * ESC (A\n * Reference: http://vt100.net/docs/vt220-rm/table2-5.html\n */\nCHARSETS['A'] = {\n  '#': '£'\n};\n\n/**\n * United States character set\n * ESC (B\n */\nCHARSETS['B'] = undefined;\n\n/**\n * Dutch character set\n * ESC (4\n * Reference: http://vt100.net/docs/vt220-rm/table2-6.html\n */\nCHARSETS['4'] = {\n  '#': '£',\n  '@': '¾',\n  '[': 'ij',\n  '\\\\': '½',\n  ']': '|',\n  '{': '¨',\n  '|': 'f',\n  '}': '¼',\n  '~': '´'\n};\n\n/**\n * Finnish character set\n * ESC (C or ESC (5\n * Reference: http://vt100.net/docs/vt220-rm/table2-7.html\n */\nCHARSETS['C'] =\nCHARSETS['5'] = {\n  '[': 'Ä',\n  '\\\\': 'Ö',\n  ']': 'Å',\n  '^': 'Ü',\n  '`': 'é',\n  '{': 'ä',\n  '|': 'ö',\n  '}': 'å',\n  '~': 'ü'\n};\n\n/**\n * French character set\n * ESC (R\n * Reference: http://vt100.net/docs/vt220-rm/table2-8.html\n */\nCHARSETS['R'] = {\n  '#': '£',\n  '@': 'à',\n  '[': '°',\n  '\\\\': 'ç',\n  ']': '§',\n  '{': 'é',\n  '|': 'ù',\n  '}': 'è',\n  '~': '¨'\n};\n\n/**\n * French Canadian character set\n * ESC (Q\n * Reference: http://vt100.net/docs/vt220-rm/table2-9.html\n */\nCHARSETS['Q'] = {\n  '@': 'à',\n  '[': 'â',\n  '\\\\': 'ç',\n  ']': 'ê',\n  '^': 'î',\n  '`': 'ô',\n  '{': 'é',\n  '|': 'ù',\n  '}': 'è',\n  '~': 'û'\n};\n\n/**\n * German character set\n * ESC (K\n * Reference: http://vt100.net/docs/vt220-rm/table2-10.html\n */\nCHARSETS['K'] = {\n  '@': '§',\n  '[': 'Ä',\n  '\\\\': 'Ö',\n  ']': 'Ü',\n  '{': 'ä',\n  '|': 'ö',\n  '}': 'ü',\n  '~': 'ß'\n};\n\n/**\n * Italian character set\n * ESC (Y\n * Reference: http://vt100.net/docs/vt220-rm/table2-11.html\n */\nCHARSETS['Y'] = {\n  '#': '£',\n  '@': '§',\n  '[': '°',\n  '\\\\': 'ç',\n  ']': 'é',\n  '`': 'ù',\n  '{': 'à',\n  '|': 'ò',\n  '}': 'è',\n  '~': 'ì'\n};\n\n/**\n * Norwegian/Danish character set\n * ESC (E or ESC (6\n * Reference: http://vt100.net/docs/vt220-rm/table2-12.html\n */\nCHARSETS['E'] =\nCHARSETS['6'] = {\n  '@': 'Ä',\n  '[': 'Æ',\n  '\\\\': 'Ø',\n  ']': 'Å',\n  '^': 'Ü',\n  '`': 'ä',\n  '{': 'æ',\n  '|': 'ø',\n  '}': 'å',\n  '~': 'ü'\n};\n\n/**\n * Spanish character set\n * ESC (Z\n * Reference: http://vt100.net/docs/vt220-rm/table2-13.html\n */\nCHARSETS['Z'] = {\n  '#': '£',\n  '@': '§',\n  '[': '¡',\n  '\\\\': 'Ñ',\n  ']': '¿',\n  '{': '°',\n  '|': 'ñ',\n  '}': 'ç'\n};\n\n/**\n * Swedish character set\n * ESC (H or ESC (7\n * Reference: http://vt100.net/docs/vt220-rm/table2-14.html\n */\nCHARSETS['H'] =\nCHARSETS['7'] = {\n  '@': 'É',\n  '[': 'Ä',\n  '\\\\': 'Ö',\n  ']': 'Å',\n  '^': 'Ü',\n  '`': 'é',\n  '{': 'ä',\n  '|': 'ö',\n  '}': 'å',\n  '~': 'ü'\n};\n\n/**\n * Swiss character set\n * ESC (=\n * Reference: http://vt100.net/docs/vt220-rm/table2-15.html\n */\nCHARSETS['='] = {\n  '#': 'ù',\n  '@': 'à',\n  '[': 'é',\n  '\\\\': 'ç',\n  ']': 'ê',\n  '^': 'î',\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  '_': 'è',\n  '`': 'ô',\n  '{': 'ä',\n  '|': 'ö',\n  '}': 'ü',\n  '~': 'û'\n};\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * C0 control codes\n * See = https://en.wikipedia.org/wiki/C0_and_C1_control_codes\n */\nexport namespace C0 {\n  /** Null (Caret = ^@, C = \\0) */\n  export const NUL = '\\x00';\n  /** Start of Heading (Caret = ^A) */\n  export const SOH = '\\x01';\n  /** Start of Text (Caret = ^B) */\n  export const STX = '\\x02';\n  /** End of Text (Caret = ^C) */\n  export const ETX = '\\x03';\n  /** End of Transmission (Caret = ^D) */\n  export const EOT = '\\x04';\n  /** Enquiry (Caret = ^E) */\n  export const ENQ = '\\x05';\n  /** Acknowledge (Caret = ^F) */\n  export const ACK = '\\x06';\n  /** Bell (Caret = ^G, C = \\a) */\n  export const BEL = '\\x07';\n  /** Backspace (Caret = ^H, C = \\b) */\n  export const BS  = '\\x08';\n  /** Character Tabulation, Horizontal Tabulation (Caret = ^I, C = \\t) */\n  export const HT  = '\\x09';\n  /** Line Feed (Caret = ^J, C = \\n) */\n  export const LF  = '\\x0a';\n  /** Line Tabulation, Vertical Tabulation (Caret = ^K, C = \\v) */\n  export const VT  = '\\x0b';\n  /** Form Feed (Caret = ^L, C = \\f) */\n  export const FF  = '\\x0c';\n  /** Carriage Return (Caret = ^M, C = \\r) */\n  export const CR  = '\\x0d';\n  /** Shift Out (Caret = ^N) */\n  export const SO  = '\\x0e';\n  /** Shift In (Caret = ^O) */\n  export const SI  = '\\x0f';\n  /** Data Link Escape (Caret = ^P) */\n  export const DLE = '\\x10';\n  /** Device Control One (XON) (Caret = ^Q) */\n  export const DC1 = '\\x11';\n  /** Device Control Two (Caret = ^R) */\n  export const DC2 = '\\x12';\n  /** Device Control Three (XOFF) (Caret = ^S) */\n  export const DC3 = '\\x13';\n  /** Device Control Four (Caret = ^T) */\n  export const DC4 = '\\x14';\n  /** Negative Acknowledge (Caret = ^U) */\n  export const NAK = '\\x15';\n  /** Synchronous Idle (Caret = ^V) */\n  export const SYN = '\\x16';\n  /** End of Transmission Block (Caret = ^W) */\n  export const ETB = '\\x17';\n  /** Cancel (Caret = ^X) */\n  export const CAN = '\\x18';\n  /** End of Medium (Caret = ^Y) */\n  export const EM  = '\\x19';\n  /** Substitute (Caret = ^Z) */\n  export const SUB = '\\x1a';\n  /** Escape (Caret = ^[, C = \\e) */\n  export const ESC = '\\x1b';\n  /** File Separator (Caret = ^\\) */\n  export const FS  = '\\x1c';\n  /** Group Separator (Caret = ^]) */\n  export const GS  = '\\x1d';\n  /** Record Separator (Caret = ^^) */\n  export const RS  = '\\x1e';\n  /** Unit Separator (Caret = ^_) */\n  export const US  = '\\x1f';\n  /** Space */\n  export const SP  = '\\x20';\n  /** Delete (Caret = ^?) */\n  export const DEL = '\\x7f';\n}\n\n/**\n * C1 control codes\n * See = https://en.wikipedia.org/wiki/C0_and_C1_control_codes\n */\nexport namespace C1 {\n  /** padding character */\n  export const PAD = '\\x80';\n  /** High Octet Preset */\n  export const HOP = '\\x81';\n  /** Break Permitted Here */\n  export const BPH = '\\x82';\n  /** No Break Here */\n  export const NBH = '\\x83';\n  /** Index */\n  export const IND = '\\x84';\n  /** Next Line */\n  export const NEL = '\\x85';\n  /** Start of Selected Area */\n  export const SSA = '\\x86';\n  /** End of Selected Area */\n  export const ESA = '\\x87';\n  /** Horizontal Tabulation Set */\n  export const HTS = '\\x88';\n  /** Horizontal Tabulation With Justification */\n  export const HTJ = '\\x89';\n  /** Vertical Tabulation Set */\n  export const VTS = '\\x8a';\n  /** Partial Line Down */\n  export const PLD = '\\x8b';\n  /** Partial Line Up */\n  export const PLU = '\\x8c';\n  /** Reverse Index */\n  export const RI = '\\x8d';\n  /** Single-Shift 2 */\n  export const SS2 = '\\x8e';\n  /** Single-Shift 3 */\n  export const SS3 = '\\x8f';\n  /** Device Control String */\n  export const DCS = '\\x90';\n  /** Private Use 1 */\n  export const PU1 = '\\x91';\n  /** Private Use 2 */\n  export const PU2 = '\\x92';\n  /** Set Transmit State */\n  export const STS = '\\x93';\n  /** Destructive backspace, intended to eliminate ambiguity about meaning of BS. */\n  export const CCH = '\\x94';\n  /** Message Waiting */\n  export const MW = '\\x95';\n  /** Start of Protected Area */\n  export const SPA = '\\x96';\n  /** End of Protected Area */\n  export const EPA = '\\x97';\n  /** Start of String */\n  export const SOS = '\\x98';\n  /** Single Graphic Character Introducer */\n  export const SGCI = '\\x99';\n  /** Single Character Introducer */\n  export const SCI = '\\x9a';\n  /** Control Sequence Introducer */\n  export const CSI = '\\x9b';\n  /** String Terminator */\n  export const ST = '\\x9c';\n  /** Operating System Command */\n  export const OSC = '\\x9d';\n  /** Privacy Message */\n  export const PM = '\\x9e';\n  /** Application Program Command */\n  export const APC = '\\x9f';\n}\nexport namespace C1_ESCAPED {\n  export const ST = `${C0.ESC}\\\\`;\n}\n", "/**\n * Copyright (c) 2014 The xterm.js authors. All rights reserved.\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\n * @license MIT\n */\n\nimport { IKeyboardEvent, IKeyboardResult, KeyboardResultType } from 'common/Types';\nimport { C0 } from 'common/data/EscapeSequences';\n\n// reg + shift key mappings for digits and special chars\nconst KEYCODE_KEY_MAPPINGS: { [key: number]: [string, string]} = {\n  // digits 0-9\n  48: ['0', ')'],\n  49: ['1', '!'],\n  50: ['2', '@'],\n  51: ['3', '#'],\n  52: ['4', '$'],\n  53: ['5', '%'],\n  54: ['6', '^'],\n  55: ['7', '&'],\n  56: ['8', '*'],\n  57: ['9', '('],\n\n  // special chars\n  186: [';', ':'],\n  187: ['=', '+'],\n  188: [',', '<'],\n  189: ['-', '_'],\n  190: ['.', '>'],\n  191: ['/', '?'],\n  192: ['`', '~'],\n  219: ['[', '{'],\n  220: ['\\\\', '|'],\n  221: [']', '}'],\n  222: ['\\'', '\"']\n};\n\nexport function evaluateKeyboardEvent(\n  ev: IKeyboardEvent,\n  applicationCursorMode: boolean,\n  isMac: boolean,\n  macOptionIsMeta: boolean\n): IKeyboardResult {\n  const result: IKeyboardResult = {\n    type: KeyboardResultType.SEND_KEY,\n    // Whether to cancel event propagation (NOTE: this may not be needed since the event is\n    // canceled at the end of keyDown\n    cancel: false,\n    // The new key even to emit\n    key: undefined\n  };\n  const modifiers = (ev.shiftKey ? 1 : 0) | (ev.altKey ? 2 : 0) | (ev.ctrlKey ? 4 : 0) | (ev.metaKey ? 8 : 0);\n  switch (ev.keyCode) {\n    case 0:\n      if (ev.key === 'UIKeyInputUpArrow') {\n        if (applicationCursorMode) {\n          result.key = C0.ESC + 'OA';\n        } else {\n          result.key = C0.ESC + '[A';\n        }\n      }\n      else if (ev.key === 'UIKeyInputLeftArrow') {\n        if (applicationCursorMode) {\n          result.key = C0.ESC + 'OD';\n        } else {\n          result.key = C0.ESC + '[D';\n        }\n      }\n      else if (ev.key === 'UIKeyInputRightArrow') {\n        if (applicationCursorMode) {\n          result.key = C0.ESC + 'OC';\n        } else {\n          result.key = C0.ESC + '[C';\n        }\n      }\n      else if (ev.key === 'UIKeyInputDownArrow') {\n        if (applicationCursorMode) {\n          result.key = C0.ESC + 'OB';\n        } else {\n          result.key = C0.ESC + '[B';\n        }\n      }\n      break;\n    case 8:\n      // backspace\n      result.key = ev.ctrlKey ? '\\b' : C0.DEL; // ^H or ^?\n      if (ev.altKey) {\n        result.key = C0.ESC + result.key;\n      }\n      break;\n    case 9:\n      // tab\n      if (ev.shiftKey) {\n        result.key = C0.ESC + '[Z';\n        break;\n      }\n      result.key = C0.HT;\n      result.cancel = true;\n      break;\n    case 13:\n      // return/enter\n      result.key = ev.altKey ? C0.ESC + C0.CR : C0.CR;\n      result.cancel = true;\n      break;\n    case 27:\n      // escape\n      result.key = C0.ESC;\n      if (ev.altKey) {\n        result.key = C0.ESC + C0.ESC;\n      }\n      result.cancel = true;\n      break;\n    case 37:\n      // left-arrow\n      if (ev.metaKey) {\n        break;\n      }\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'D';\n        // HACK: Make Alt + left-arrow behave like Ctrl + left-arrow: move one word backwards\n        // http://unix.stackexchange.com/a/108106\n        // macOS uses different escape sequences than linux\n        if (result.key === C0.ESC + '[1;3D') {\n          result.key = C0.ESC + (isMac ? 'b' : '[1;5D');\n        }\n      } else if (applicationCursorMode) {\n        result.key = C0.ESC + 'OD';\n      } else {\n        result.key = C0.ESC + '[D';\n      }\n      break;\n    case 39:\n      // right-arrow\n      if (ev.metaKey) {\n        break;\n      }\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'C';\n        // HACK: Make Alt + right-arrow behave like Ctrl + right-arrow: move one word forward\n        // http://unix.stackexchange.com/a/108106\n        // macOS uses different escape sequences than linux\n        if (result.key === C0.ESC + '[1;3C') {\n          result.key = C0.ESC + (isMac ? 'f' : '[1;5C');\n        }\n      } else if (applicationCursorMode) {\n        result.key = C0.ESC + 'OC';\n      } else {\n        result.key = C0.ESC + '[C';\n      }\n      break;\n    case 38:\n      // up-arrow\n      if (ev.metaKey) {\n        break;\n      }\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'A';\n        // HACK: Make Alt + up-arrow behave like Ctrl + up-arrow\n        // http://unix.stackexchange.com/a/108106\n        // macOS uses different escape sequences than linux\n        if (!isMac && result.key === C0.ESC + '[1;3A') {\n          result.key = C0.ESC + '[1;5A';\n        }\n      } else if (applicationCursorMode) {\n        result.key = C0.ESC + 'OA';\n      } else {\n        result.key = C0.ESC + '[A';\n      }\n      break;\n    case 40:\n      // down-arrow\n      if (ev.metaKey) {\n        break;\n      }\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'B';\n        // HACK: Make Alt + down-arrow behave like Ctrl + down-arrow\n        // http://unix.stackexchange.com/a/108106\n        // macOS uses different escape sequences than linux\n        if (!isMac && result.key === C0.ESC + '[1;3B') {\n          result.key = C0.ESC + '[1;5B';\n        }\n      } else if (applicationCursorMode) {\n        result.key = C0.ESC + 'OB';\n      } else {\n        result.key = C0.ESC + '[B';\n      }\n      break;\n    case 45:\n      // insert\n      if (!ev.shiftKey && !ev.ctrlKey) {\n        // <Ctrl> or <Shift> + <Insert> are used to\n        // copy-paste on some systems.\n        result.key = C0.ESC + '[2~';\n      }\n      break;\n    case 46:\n      // delete\n      if (modifiers) {\n        result.key = C0.ESC + '[3;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[3~';\n      }\n      break;\n    case 36:\n      // home\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'H';\n      } else if (applicationCursorMode) {\n        result.key = C0.ESC + 'OH';\n      } else {\n        result.key = C0.ESC + '[H';\n      }\n      break;\n    case 35:\n      // end\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'F';\n      } else if (applicationCursorMode) {\n        result.key = C0.ESC + 'OF';\n      } else {\n        result.key = C0.ESC + '[F';\n      }\n      break;\n    case 33:\n      // page up\n      if (ev.shiftKey) {\n        result.type = KeyboardResultType.PAGE_UP;\n      } else if (ev.ctrlKey) {\n        result.key = C0.ESC + '[5;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[5~';\n      }\n      break;\n    case 34:\n      // page down\n      if (ev.shiftKey) {\n        result.type = KeyboardResultType.PAGE_DOWN;\n      } else if (ev.ctrlKey) {\n        result.key = C0.ESC + '[6;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[6~';\n      }\n      break;\n    case 112:\n      // F1-F12\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'P';\n      } else {\n        result.key = C0.ESC + 'OP';\n      }\n      break;\n    case 113:\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'Q';\n      } else {\n        result.key = C0.ESC + 'OQ';\n      }\n      break;\n    case 114:\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'R';\n      } else {\n        result.key = C0.ESC + 'OR';\n      }\n      break;\n    case 115:\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'S';\n      } else {\n        result.key = C0.ESC + 'OS';\n      }\n      break;\n    case 116:\n      if (modifiers) {\n        result.key = C0.ESC + '[15;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[15~';\n      }\n      break;\n    case 117:\n      if (modifiers) {\n        result.key = C0.ESC + '[17;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[17~';\n      }\n      break;\n    case 118:\n      if (modifiers) {\n        result.key = C0.ESC + '[18;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[18~';\n      }\n      break;\n    case 119:\n      if (modifiers) {\n        result.key = C0.ESC + '[19;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[19~';\n      }\n      break;\n    case 120:\n      if (modifiers) {\n        result.key = C0.ESC + '[20;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[20~';\n      }\n      break;\n    case 121:\n      if (modifiers) {\n        result.key = C0.ESC + '[21;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[21~';\n      }\n      break;\n    case 122:\n      if (modifiers) {\n        result.key = C0.ESC + '[23;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[23~';\n      }\n      break;\n    case 123:\n      if (modifiers) {\n        result.key = C0.ESC + '[24;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[24~';\n      }\n      break;\n    default:\n      // a-z and space\n      if (ev.ctrlKey && !ev.shiftKey && !ev.altKey && !ev.metaKey) {\n        if (ev.keyCode >= 65 && ev.keyCode <= 90) {\n          result.key = String.fromCharCode(ev.keyCode - 64);\n        } else if (ev.keyCode === 32) {\n          result.key = C0.NUL;\n        } else if (ev.keyCode >= 51 && ev.keyCode <= 55) {\n          // escape, file sep, group sep, record sep, unit sep\n          result.key = String.fromCharCode(ev.keyCode - 51 + 27);\n        } else if (ev.keyCode === 56) {\n          result.key = C0.DEL;\n        } else if (ev.keyCode === 219) {\n          result.key = C0.ESC;\n        } else if (ev.keyCode === 220) {\n          result.key = C0.FS;\n        } else if (ev.keyCode === 221) {\n          result.key = C0.GS;\n        }\n      } else if ((!isMac || macOptionIsMeta) && ev.altKey && !ev.metaKey) {\n        // On macOS this is a third level shift when !macOptionIsMeta. Use <Esc> instead.\n        const keyMapping = KEYCODE_KEY_MAPPINGS[ev.keyCode];\n        const key = keyMapping?.[!ev.shiftKey ? 0 : 1];\n        if (key) {\n          result.key = C0.ESC + key;\n        } else if (ev.keyCode >= 65 && ev.keyCode <= 90) {\n          const keyCode = ev.ctrlKey ? ev.keyCode - 64 : ev.keyCode + 32;\n          let keyString = String.fromCharCode(keyCode);\n          if (ev.shiftKey) {\n            keyString = keyString.toUpperCase();\n          }\n          result.key = C0.ESC + keyString;\n        } else if (ev.keyCode === 32) {\n          result.key = C0.ESC + (ev.ctrlKey ? C0.NUL : ' ');\n        } else if (ev.key === 'Dead' && ev.code.startsWith('Key')) {\n          // Reference: https://github.com/xtermjs/xterm.js/issues/3725\n          // Alt will produce a \"dead key\" (initate composition) with some\n          // of the letters in US layout (e.g. N/E/U).\n          // It's safe to match against Key* since no other `code` values begin with \"Key\".\n          // https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code/code_values#code_values_on_mac\n          let keyString = ev.code.slice(3, 4);\n          if (!ev.shiftKey) {\n            keyString = keyString.toLowerCase();\n          }\n          result.key = C0.ESC + keyString;\n          result.cancel = true;\n        }\n      } else if (isMac && !ev.altKey && !ev.ctrlKey && !ev.shiftKey && ev.metaKey) {\n        if (ev.keyCode === 65) { // cmd + a\n          result.type = KeyboardResultType.SELECT_ALL;\n        }\n      } else if (ev.key && !ev.ctrlKey && !ev.altKey && !ev.metaKey && ev.keyCode >= 48 && ev.key.length === 1) {\n        // Include only keys that that result in a _single_ character; don't include num lock,\n        // volume up, etc.\n        result.key = ev.key;\n      } else if (ev.key && ev.ctrlKey) {\n        if (ev.key === '_') { // ^_\n          result.key = C0.US;\n        }\n        if (ev.key === '@') { // ^ + shift + 2 = ^ + @\n          result.key = C0.NUL;\n        }\n      }\n      break;\n  }\n\n  return result;\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * Polyfill - Convert UTF32 codepoint into JS string.\n * Note: The built-in String.fromCodePoint happens to be much slower\n *       due to additional sanity checks. We can avoid them since\n *       we always operate on legal UTF32 (granted by the input decoders)\n *       and use this faster version instead.\n */\nexport function stringFromCodePoint(codePoint: number): string {\n  if (codePoint > 0xFFFF) {\n    codePoint -= 0x10000;\n    return String.fromCharCode((codePoint >> 10) + 0xD800) + String.fromCharCode((codePoint % 0x400) + 0xDC00);\n  }\n  return String.fromCharCode(codePoint);\n}\n\n/**\n * Convert UTF32 char codes into JS string.\n * Basically the same as `stringFromCodePoint` but for multiple codepoints\n * in a loop (which is a lot faster).\n */\nexport function utf32ToString(data: Uint32Array, start: number = 0, end: number = data.length): string {\n  let result = '';\n  for (let i = start; i < end; ++i) {\n    let codepoint = data[i];\n    if (codepoint > 0xFFFF) {\n      // JS strings are encoded as UTF16, thus a non BMP codepoint gets converted into a surrogate\n      // pair conversion rules:\n      //  - subtract 0x10000 from code point, leaving a 20 bit number\n      //  - add high 10 bits to 0xD800  --> first surrogate\n      //  - add low 10 bits to 0xDC00   --> second surrogate\n      codepoint -= 0x10000;\n      result += String.fromCharCode((codepoint >> 10) + 0xD800) + String.fromCharCode((codepoint % 0x400) + 0xDC00);\n    } else {\n      result += String.fromCharCode(codepoint);\n    }\n  }\n  return result;\n}\n\n/**\n * StringToUtf32 - decodes UTF16 sequences into UTF32 codepoints.\n * To keep the decoder in line with JS strings it handles single surrogates as UCS2.\n */\nexport class StringToUtf32 {\n  private _interim: number = 0;\n\n  /**\n   * Clears interim and resets decoder to clean state.\n   */\n  public clear(): void {\n    this._interim = 0;\n  }\n\n  /**\n   * Decode JS string to UTF32 codepoints.\n   * The methods assumes stream input and will store partly transmitted\n   * surrogate pairs and decode them with the next data chunk.\n   * Note: The method does no bound checks for target, therefore make sure\n   * the provided input data does not exceed the size of `target`.\n   * Returns the number of written codepoints in `target`.\n   */\n  public decode(input: string, target: Uint32Array): number {\n    const length = input.length;\n\n    if (!length) {\n      return 0;\n    }\n\n    let size = 0;\n    let startPos = 0;\n\n    // handle leftover surrogate high\n    if (this._interim) {\n      const second = input.charCodeAt(startPos++);\n      if (0xDC00 <= second && second <= 0xDFFF) {\n        target[size++] = (this._interim - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n      } else {\n        // illegal codepoint (USC2 handling)\n        target[size++] = this._interim;\n        target[size++] = second;\n      }\n      this._interim = 0;\n    }\n\n    for (let i = startPos; i < length; ++i) {\n      const code = input.charCodeAt(i);\n      // surrogate pair first\n      if (0xD800 <= code && code <= 0xDBFF) {\n        if (++i >= length) {\n          this._interim = code;\n          return size;\n        }\n        const second = input.charCodeAt(i);\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          target[size++] = (code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n        } else {\n          // illegal codepoint (USC2 handling)\n          target[size++] = code;\n          target[size++] = second;\n        }\n        continue;\n      }\n      if (code === 0xFEFF) {\n        // BOM\n        continue;\n      }\n      target[size++] = code;\n    }\n    return size;\n  }\n}\n\n/**\n * Utf8Decoder - decodes UTF8 byte sequences into UTF32 codepoints.\n */\nexport class Utf8ToUtf32 {\n  public interim: Uint8Array = new Uint8Array(3);\n\n  /**\n   * Clears interim bytes and resets decoder to clean state.\n   */\n  public clear(): void {\n    this.interim.fill(0);\n  }\n\n  /**\n   * Decodes UTF8 byte sequences in `input` to UTF32 codepoints in `target`.\n   * The methods assumes stream input and will store partly transmitted bytes\n   * and decode them with the next data chunk.\n   * Note: The method does no bound checks for target, therefore make sure\n   * the provided data chunk does not exceed the size of `target`.\n   * Returns the number of written codepoints in `target`.\n   */\n  public decode(input: Uint8Array, target: Uint32Array): number {\n    const length = input.length;\n\n    if (!length) {\n      return 0;\n    }\n\n    let size = 0;\n    let byte1: number;\n    let byte2: number;\n    let byte3: number;\n    let byte4: number;\n    let codepoint = 0;\n    let startPos = 0;\n\n    // handle leftover bytes\n    if (this.interim[0]) {\n      let discardInterim = false;\n      let cp = this.interim[0];\n      cp &= ((((cp & 0xE0) === 0xC0)) ? 0x1F : (((cp & 0xF0) === 0xE0)) ? 0x0F : 0x07);\n      let pos = 0;\n      let tmp: number;\n      while ((tmp = this.interim[++pos] & 0x3F) && pos < 4) {\n        cp <<= 6;\n        cp |= tmp;\n      }\n      // missing bytes - read ahead from input\n      const type = (((this.interim[0] & 0xE0) === 0xC0)) ? 2 : (((this.interim[0] & 0xF0) === 0xE0)) ? 3 : 4;\n      const missing = type - pos;\n      while (startPos < missing) {\n        if (startPos >= length) {\n          return 0;\n        }\n        tmp = input[startPos++];\n        if ((tmp & 0xC0) !== 0x80) {\n          // wrong continuation, discard interim bytes completely\n          startPos--;\n          discardInterim = true;\n          break;\n        } else {\n          // need to save so we can continue short inputs in next call\n          this.interim[pos++] = tmp;\n          cp <<= 6;\n          cp |= tmp & 0x3F;\n        }\n      }\n      if (!discardInterim) {\n        // final test is type dependent\n        if (type === 2) {\n          if (cp < 0x80) {\n            // wrong starter byte\n            startPos--;\n          } else {\n            target[size++] = cp;\n          }\n        } else if (type === 3) {\n          if (cp < 0x0800 || (cp >= 0xD800 && cp <= 0xDFFF) || cp === 0xFEFF) {\n            // illegal codepoint or BOM\n          } else {\n            target[size++] = cp;\n          }\n        } else {\n          if (cp < 0x010000 || cp > 0x10FFFF) {\n            // illegal codepoint\n          } else {\n            target[size++] = cp;\n          }\n        }\n      }\n      this.interim.fill(0);\n    }\n\n    // loop through input\n    const fourStop = length - 4;\n    let i = startPos;\n    while (i < length) {\n      /**\n       * ASCII shortcut with loop unrolled to 4 consecutive ASCII chars.\n       * This is a compromise between speed gain for ASCII\n       * and penalty for non ASCII:\n       * For best ASCII performance the char should be stored directly into target,\n       * but even a single attempt to write to target and compare afterwards\n       * penalizes non ASCII really bad (-50%), thus we load the char into byteX first,\n       * which reduces ASCII performance by ~15%.\n       * This trial for ASCII reduces non ASCII performance by ~10% which seems acceptible\n       * compared to the gains.\n       * Note that this optimization only takes place for 4 consecutive ASCII chars,\n       * for any shorter it bails out. Worst case - all 4 bytes being read but\n       * thrown away due to the last being a non ASCII char (-10% performance).\n       */\n      while (i < fourStop\n        && !((byte1 = input[i]) & 0x80)\n        && !((byte2 = input[i + 1]) & 0x80)\n        && !((byte3 = input[i + 2]) & 0x80)\n        && !((byte4 = input[i + 3]) & 0x80))\n      {\n        target[size++] = byte1;\n        target[size++] = byte2;\n        target[size++] = byte3;\n        target[size++] = byte4;\n        i += 4;\n      }\n\n      // reread byte1\n      byte1 = input[i++];\n\n      // 1 byte\n      if (byte1 < 0x80) {\n        target[size++] = byte1;\n\n        // 2 bytes\n      } else if ((byte1 & 0xE0) === 0xC0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x1F) << 6 | (byte2 & 0x3F);\n        if (codepoint < 0x80) {\n          // wrong starter byte\n          i--;\n          continue;\n        }\n        target[size++] = codepoint;\n\n        // 3 bytes\n      } else if ((byte1 & 0xF0) === 0xE0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          return size;\n        }\n        byte3 = input[i++];\n        if ((byte3 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x0F) << 12 | (byte2 & 0x3F) << 6 | (byte3 & 0x3F);\n        if (codepoint < 0x0800 || (codepoint >= 0xD800 && codepoint <= 0xDFFF) || codepoint === 0xFEFF) {\n          // illegal codepoint or BOM, no i-- here\n          continue;\n        }\n        target[size++] = codepoint;\n\n        // 4 bytes\n      } else if ((byte1 & 0xF8) === 0xF0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          return size;\n        }\n        byte3 = input[i++];\n        if ((byte3 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          this.interim[2] = byte3;\n          return size;\n        }\n        byte4 = input[i++];\n        if ((byte4 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x07) << 18 | (byte2 & 0x3F) << 12 | (byte3 & 0x3F) << 6 | (byte4 & 0x3F);\n        if (codepoint < 0x010000 || codepoint > 0x10FFFF) {\n          // illegal codepoint, no i-- here\n          continue;\n        }\n        target[size++] = codepoint;\n      } else {\n        // illegal byte, just skip\n      }\n    }\n    return size;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\nimport { IUnicodeVersionProvider, UnicodeCharProperties, UnicodeCharWidth } from 'common/services/Services';\nimport { UnicodeService } from 'common/services/UnicodeService';\n\nconst BMP_COMBINING = [\n  [0x0300, 0x036F], [0x0483, 0x0486], [0x0488, 0x0489],\n  [0x0591, 0x05BD], [0x05BF, 0x05BF], [0x05C1, 0x05C2],\n  [0x05C4, 0x05C5], [0x05C7, 0x05C7], [0x0600, 0x0603],\n  [0x0610, 0x0615], [0x064B, 0x065E], [0x0670, 0x0670],\n  [0x06D6, 0x06E4], [0x06E7, 0x06E8], [0x06EA, 0x06ED],\n  [0x070F, 0x070F], [0x0711, 0x0711], [0x0730, 0x074A],\n  [0x07A6, 0x07B0], [0x07EB, 0x07F3], [0x0901, 0x0902],\n  [0x093C, 0x093C], [0x0941, 0x0948], [0x094D, 0x094D],\n  [0x0951, 0x0954], [0x0962, 0x0963], [0x0981, 0x0981],\n  [0x09BC, 0x09BC], [0x09C1, 0x09C4], [0x09CD, 0x09CD],\n  [0x09E2, 0x09E3], [0x0A01, 0x0A02], [0x0A3C, 0x0A3C],\n  [0x0A41, 0x0A42], [0x0A47, 0x0A48], [0x0A4B, 0x0A4D],\n  [0x0A70, 0x0A71], [0x0A81, 0x0A82], [0x0ABC, 0x0ABC],\n  [0x0AC1, 0x0AC5], [0x0AC7, 0x0AC8], [0x0ACD, 0x0ACD],\n  [0x0AE2, 0x0AE3], [0x0B01, 0x0B01], [0x0B3C, 0x0B3C],\n  [0x0B3F, 0x0B3F], [0x0B41, 0x0B43], [0x0B4D, 0x0B4D],\n  [0x0B56, 0x0B56], [0x0B82, 0x0B82], [0x0BC0, 0x0BC0],\n  [0x0BCD, 0x0BCD], [0x0C3E, 0x0C40], [0x0C46, 0x0C48],\n  [0x0C4A, 0x0C4D], [0x0C55, 0x0C56], [0x0CBC, 0x0CBC],\n  [0x0CBF, 0x0CBF], [0x0CC6, 0x0CC6], [0x0CCC, 0x0CCD],\n  [0x0CE2, 0x0CE3], [0x0D41, 0x0D43], [0x0D4D, 0x0D4D],\n  [0x0DCA, 0x0DCA], [0x0DD2, 0x0DD4], [0x0DD6, 0x0DD6],\n  [0x0E31, 0x0E31], [0x0E34, 0x0E3A], [0x0E47, 0x0E4E],\n  [0x0EB1, 0x0EB1], [0x0EB4, 0x0EB9], [0x0EBB, 0x0EBC],\n  [0x0EC8, 0x0ECD], [0x0F18, 0x0F19], [0x0F35, 0x0F35],\n  [0x0F37, 0x0F37], [0x0F39, 0x0F39], [0x0F71, 0x0F7E],\n  [0x0F80, 0x0F84], [0x0F86, 0x0F87], [0x0F90, 0x0F97],\n  [0x0F99, 0x0FBC], [0x0FC6, 0x0FC6], [0x102D, 0x1030],\n  [0x1032, 0x1032], [0x1036, 0x1037], [0x1039, 0x1039],\n  [0x1058, 0x1059], [0x1160, 0x11FF], [0x135F, 0x135F],\n  [0x1712, 0x1714], [0x1732, 0x1734], [0x1752, 0x1753],\n  [0x1772, 0x1773], [0x17B4, 0x17B5], [0x17B7, 0x17BD],\n  [0x17C6, 0x17C6], [0x17C9, 0x17D3], [0x17DD, 0x17DD],\n  [0x180B, 0x180D], [0x18A9, 0x18A9], [0x1920, 0x1922],\n  [0x1927, 0x1928], [0x1932, 0x1932], [0x1939, 0x193B],\n  [0x1A17, 0x1A18], [0x1B00, 0x1B03], [0x1B34, 0x1B34],\n  [0x1B36, 0x1B3A], [0x1B3C, 0x1B3C], [0x1B42, 0x1B42],\n  [0x1B6B, 0x1B73], [0x1DC0, 0x1DCA], [0x1DFE, 0x1DFF],\n  [0x200B, 0x200F], [0x202A, 0x202E], [0x2060, 0x2063],\n  [0x206A, 0x206F], [0x20D0, 0x20EF], [0x302A, 0x302F],\n  [0x3099, 0x309A], [0xA806, 0xA806], [0xA80B, 0xA80B],\n  [0xA825, 0xA826], [0xFB1E, 0xFB1E], [0xFE00, 0xFE0F],\n  [0xFE20, 0xFE23], [0xFEFF, 0xFEFF], [0xFFF9, 0xFFFB]\n];\nconst HIGH_COMBINING = [\n  [0x10A01, 0x10A03], [0x10A05, 0x10A06], [0x10A0C, 0x10A0F],\n  [0x10A38, 0x10A3A], [0x10A3F, 0x10A3F], [0x1D167, 0x1D169],\n  [0x1D173, 0x1D182], [0x1D185, 0x1D18B], [0x1D1AA, 0x1D1AD],\n  [0x1D242, 0x1D244], [0xE0001, 0xE0001], [0xE0020, 0xE007F],\n  [0xE0100, 0xE01EF]\n];\n\n// BMP lookup table, lazy initialized during first addon loading\nlet table: Uint8Array;\n\nfunction bisearch(ucs: number, data: number[][]): boolean {\n  let min = 0;\n  let max = data.length - 1;\n  let mid;\n  if (ucs < data[0][0] || ucs > data[max][1]) {\n    return false;\n  }\n  while (max >= min) {\n    mid = (min + max) >> 1;\n    if (ucs > data[mid][1]) {\n      min = mid + 1;\n    } else if (ucs < data[mid][0]) {\n      max = mid - 1;\n    } else {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport class UnicodeV6 implements IUnicodeVersionProvider {\n  public readonly version = '6';\n\n  constructor() {\n    // init lookup table once\n    if (!table) {\n      table = new Uint8Array(65536);\n      table.fill(1);\n      table[0] = 0;\n      // control chars\n      table.fill(0, 1, 32);\n      table.fill(0, 0x7f, 0xa0);\n\n      // apply wide char rules first\n      // wide chars\n      table.fill(2, 0x1100, 0x1160);\n      table[0x2329] = 2;\n      table[0x232a] = 2;\n      table.fill(2, 0x2e80, 0xa4d0);\n      table[0x303f] = 1;  // wrongly in last line\n\n      table.fill(2, 0xac00, 0xd7a4);\n      table.fill(2, 0xf900, 0xfb00);\n      table.fill(2, 0xfe10, 0xfe1a);\n      table.fill(2, 0xfe30, 0xfe70);\n      table.fill(2, 0xff00, 0xff61);\n      table.fill(2, 0xffe0, 0xffe7);\n\n      // apply combining last to ensure we overwrite\n      // wrongly wide set chars:\n      //    the original algo evals combining first and falls\n      //    through to wide check so we simply do here the opposite\n      // combining 0\n      for (let r = 0; r < BMP_COMBINING.length; ++r) {\n        table.fill(0, BMP_COMBINING[r][0], BMP_COMBINING[r][1] + 1);\n      }\n    }\n  }\n\n  public wcwidth(num: number): UnicodeCharWidth {\n    if (num < 32) return 0;\n    if (num < 127) return 1;\n    if (num < 65536) return table[num] as UnicodeCharWidth;\n    if (bisearch(num, HIGH_COMBINING)) return 0;\n    if ((num >= 0x20000 && num <= 0x2fffd) || (num >= 0x30000 && num <= 0x3fffd)) return 2;\n    return 1;\n  }\n\n  public charProperties(codepoint: number, preceding: UnicodeCharProperties): UnicodeCharProperties {\n    let width = this.wcwidth(codepoint);\n    let shouldJoin = width === 0 && preceding !== 0;\n    if (shouldJoin) {\n      const oldWidth = UnicodeService.extractWidth(preceding);\n      if (oldWidth === 0) {\n        shouldJoin = false;\n      } else if (oldWidth > width) {\n        width = oldWidth;\n      }\n    }\n    return UnicodeService.createPropertyValue(0, width, shouldJoin);\n  }\n}\n", "\n/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { EventEmitter } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\n\ndeclare const setTimeout: (handler: () => void, timeout?: number) => void;\n\n/**\n * Safety watermark to avoid memory exhaustion and browser engine crash on fast data input.\n * Enable flow control to avoid this limit and make sure that your backend correctly\n * propagates this to the underlying pty. (see docs for further instructions)\n * Since this limit is meant as a safety parachute to prevent browser crashs,\n * it is set to a very high number. Typically xterm.js gets unresponsive with\n * a 100 times lower number (>500 kB).\n */\nconst DISCARD_WATERMARK = 50000000; // ~50 MB\n\n/**\n * The max number of ms to spend on writes before allowing the renderer to\n * catch up with a 0ms setTimeout. A value of < 33 to keep us close to\n * 30fps, and a value of < 16 to try to run at 60fps. Of course, the real FPS\n * depends on the time it takes for the renderer to draw the frame.\n */\nconst WRITE_TIMEOUT_MS = 12;\n\n/**\n * Threshold of max held chunks in the write buffer, that were already processed.\n * This is a tradeoff between extensive write buffer shifts (bad runtime) and high\n * memory consumption by data thats not used anymore.\n */\nconst WRITE_BUFFER_LENGTH_THRESHOLD = 50;\n\nexport class WriteBuffer extends Disposable {\n  private _writeBuffer: (string | Uint8Array)[] = [];\n  private _callbacks: ((() => void) | undefined)[] = [];\n  private _pendingData = 0;\n  private _bufferOffset = 0;\n  private _isSyncWriting = false;\n  private _syncCalls = 0;\n  private _didUserInput = false;\n\n  private readonly _onWriteParsed = this.register(new EventEmitter<void>());\n  public readonly onWriteParsed = this._onWriteParsed.event;\n\n  constructor(private _action: (data: string | Uint8Array, promiseResult?: boolean) => void | Promise<boolean>) {\n    super();\n  }\n\n  public handleUserInput(): void {\n    this._didUserInput = true;\n  }\n\n  /**\n   * @deprecated Unreliable, to be removed soon.\n   */\n  public writeSync(data: string | Uint8Array, maxSubsequentCalls?: number): void {\n    // stop writeSync recursions with maxSubsequentCalls argument\n    // This is dangerous to use as it will lose the current data chunk\n    // and return immediately.\n    if (maxSubsequentCalls !== undefined && this._syncCalls > maxSubsequentCalls) {\n      // comment next line if a whole loop block should only contain x `writeSync` calls\n      // (total flat vs. deep nested limit)\n      this._syncCalls = 0;\n      return;\n    }\n    // append chunk to buffer\n    this._pendingData += data.length;\n    this._writeBuffer.push(data);\n    this._callbacks.push(undefined);\n\n    // increase recursion counter\n    this._syncCalls++;\n    // exit early if another writeSync loop is active\n    if (this._isSyncWriting) {\n      return;\n    }\n    this._isSyncWriting = true;\n\n    // force sync processing on pending data chunks to avoid in-band data scrambling\n    // does the same as innerWrite but without event loop\n    // we have to do it here as single loop steps to not corrupt loop subject\n    // by another writeSync call triggered from _action\n    let chunk: string | Uint8Array | undefined;\n    while (chunk = this._writeBuffer.shift()) {\n      this._action(chunk);\n      const cb = this._callbacks.shift();\n      if (cb) cb();\n    }\n    // reset to avoid reprocessing of chunks with scheduled innerWrite call\n    // stopping scheduled innerWrite by offset > length condition\n    this._pendingData = 0;\n    this._bufferOffset = 0x7FFFFFFF;\n\n    // allow another writeSync to loop\n    this._isSyncWriting = false;\n    this._syncCalls = 0;\n  }\n\n  public write(data: string | Uint8Array, callback?: () => void): void {\n    if (this._pendingData > DISCARD_WATERMARK) {\n      throw new Error('write data discarded, use flow control to avoid losing data');\n    }\n\n    // schedule chunk processing for next event loop run\n    if (!this._writeBuffer.length) {\n      this._bufferOffset = 0;\n\n      // If this is the first write call after the user has done some input,\n      // parse it immediately to minimize input latency,\n      // otherwise schedule for the next event\n      if (this._didUserInput) {\n        this._didUserInput = false;\n        this._pendingData += data.length;\n        this._writeBuffer.push(data);\n        this._callbacks.push(callback);\n        this._innerWrite();\n        return;\n      }\n\n      setTimeout(() => this._innerWrite());\n    }\n\n    this._pendingData += data.length;\n    this._writeBuffer.push(data);\n    this._callbacks.push(callback);\n  }\n\n  /**\n   * Inner write call, that enters the sliced chunk processing by timing.\n   *\n   * `lastTime` indicates, when the last _innerWrite call had started.\n   * It is used to aggregate async handler execution under a timeout constraint\n   * effectively lowering the redrawing needs, schematically:\n   *\n   *   macroTask _innerWrite:\n   *     if (Date.now() - (lastTime | 0) < WRITE_TIMEOUT_MS):\n   *        schedule microTask _innerWrite(lastTime)\n   *     else:\n   *        schedule macroTask _innerWrite(0)\n   *\n   *   overall execution order on task queues:\n   *\n   *   macrotasks:  [...]  -->  _innerWrite(0)  -->  [...]  -->  screenUpdate  -->  [...]\n   *         m  t:                    |\n   *         i  a:                  [...]\n   *         c  s:                    |\n   *         r  k:              while < timeout:\n   *         o  s:                _innerWrite(timeout)\n   *\n   * `promiseResult` depicts the promise resolve value of an async handler.\n   * This value gets carried forward through all saved stack states of the\n   * paused parser for proper continuation.\n   *\n   * Note, for pure sync code `lastTime` and `promiseResult` have no meaning.\n   */\n  protected _innerWrite(lastTime: number = 0, promiseResult: boolean = true): void {\n    const startTime = lastTime || Date.now();\n    while (this._writeBuffer.length > this._bufferOffset) {\n      const data = this._writeBuffer[this._bufferOffset];\n      const result = this._action(data, promiseResult);\n      if (result) {\n        /**\n         * If we get a promise as return value, we re-schedule the continuation\n         * as thenable on the promise and exit right away.\n         *\n         * The exit here means, that we block input processing at the current active chunk,\n         * the exact execution position within the chunk is preserved by the saved\n         * stack content in InputHandler and EscapeSequenceParser.\n         *\n         * Resuming happens automatically from that saved stack state.\n         * Also the resolved promise value is passed along the callstack to\n         * `EscapeSequenceParser.parse` to correctly resume the stopped handler loop.\n         *\n         * Exceptions on async handlers will be logged to console async, but do not interrupt\n         * the input processing (continues with next handler at the current input position).\n         */\n\n        /**\n         * If a promise takes long to resolve, we should schedule continuation behind setTimeout.\n         * This might already be too late, if our .then enters really late (executor + prev thens\n         * took very long). This cannot be solved here for the handler itself (it is the handlers\n         * responsibility to slice hard work), but we can at least schedule a screen update as we\n         * gain control.\n         */\n        const continuation: (r: boolean) => void = (r: boolean) => Date.now() - startTime >= WRITE_TIMEOUT_MS\n          ? setTimeout(() => this._innerWrite(0, r))\n          : this._innerWrite(startTime, r);\n\n        /**\n         * Optimization considerations:\n         * The continuation above favors FPS over throughput by eval'ing `startTime` on resolve.\n         * This might schedule too many screen updates with bad throughput drops (in case a slow\n         * resolving handler sliced its work properly behind setTimeout calls). We cannot spot\n         * this condition here, also the renderer has no way to spot nonsense updates either.\n         * FIXME: A proper fix for this would track the FPS at the renderer entry level separately.\n         *\n         * If favoring of FPS shows bad throughtput impact, use the following instead. It favors\n         * throughput by eval'ing `startTime` upfront pulling at least one more chunk into the\n         * current microtask queue (executed before setTimeout).\n         */\n        // const continuation: (r: boolean) => void = Date.now() - startTime >= WRITE_TIMEOUT_MS\n        //   ? r => setTimeout(() => this._innerWrite(0, r))\n        //   : r => this._innerWrite(startTime, r);\n\n        // Handle exceptions synchronously to current band position, idea:\n        // 1. spawn a single microtask which we allow to throw hard\n        // 2. spawn a promise immediately resolving to `true`\n        // (executed on the same queue, thus properly aligned before continuation happens)\n        result.catch(err => {\n          queueMicrotask(() => {throw err;});\n          return Promise.resolve(false);\n        }).then(continuation);\n        return;\n      }\n\n      const cb = this._callbacks[this._bufferOffset];\n      if (cb) cb();\n      this._bufferOffset++;\n      this._pendingData -= data.length;\n\n      if (Date.now() - startTime >= WRITE_TIMEOUT_MS) {\n        break;\n      }\n    }\n    if (this._writeBuffer.length > this._bufferOffset) {\n      // Allow renderer to catch up before processing the next batch\n      // trim already processed chunks if we are above threshold\n      if (this._bufferOffset > WRITE_BUFFER_LENGTH_THRESHOLD) {\n        this._writeBuffer = this._writeBuffer.slice(this._bufferOffset);\n        this._callbacks = this._callbacks.slice(this._bufferOffset);\n        this._bufferOffset = 0;\n      }\n      setTimeout(() => this._innerWrite());\n    } else {\n      this._writeBuffer.length = 0;\n      this._callbacks.length = 0;\n      this._pendingData = 0;\n      this._bufferOffset = 0;\n    }\n    this._onWriteParsed.fire();\n  }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n\n// 'rgb:' rule - matching: r/g/b | rr/gg/bb | rrr/ggg/bbb | rrrr/gggg/bbbb (hex digits)\nconst RGB_REX = /^([\\da-f])\\/([\\da-f])\\/([\\da-f])$|^([\\da-f]{2})\\/([\\da-f]{2})\\/([\\da-f]{2})$|^([\\da-f]{3})\\/([\\da-f]{3})\\/([\\da-f]{3})$|^([\\da-f]{4})\\/([\\da-f]{4})\\/([\\da-f]{4})$/;\n// '#...' rule - matching any hex digits\nconst HASH_REX = /^[\\da-f]+$/;\n\n/**\n * Parse color spec to RGB values (8 bit per channel).\n * See `man xparsecolor` for details about certain format specifications.\n *\n * Supported formats:\n * - rgb:<red>/<green>/<blue> with <red>, <green>, <blue> in h | hh | hhh | hhhh\n * - #RGB, #RRGGBB, #RRRGGGBBB, #RRRRGGGGBBBB\n *\n * All other formats like rgbi: or device-independent string specifications\n * with float numbering are not supported.\n */\nexport function parseColor(data: string): [number, number, number] | undefined {\n  if (!data) return;\n  // also handle uppercases\n  let low = data.toLowerCase();\n  if (low.indexOf('rgb:') === 0) {\n    // 'rgb:' specifier\n    low = low.slice(4);\n    const m = RGB_REX.exec(low);\n    if (m) {\n      const base = m[1] ? 15 : m[4] ? 255 : m[7] ? 4095 : 65535;\n      return [\n        Math.round(parseInt(m[1] || m[4] || m[7] || m[10], 16) / base * 255),\n        Math.round(parseInt(m[2] || m[5] || m[8] || m[11], 16) / base * 255),\n        Math.round(parseInt(m[3] || m[6] || m[9] || m[12], 16) / base * 255)\n      ];\n    }\n  } else if (low.indexOf('#') === 0) {\n    // '#' specifier\n    low = low.slice(1);\n    if (HASH_REX.exec(low) && [3, 6, 9, 12].includes(low.length)) {\n      const adv = low.length / 3;\n      const result: [number, number, number] = [0, 0, 0];\n      for (let i = 0; i < 3; ++i) {\n        const c = parseInt(low.slice(adv * i, adv * i + adv), 16);\n        result[i] = adv === 1 ? c << 4 : adv === 2 ? c : adv === 3 ? c >> 4 : c >> 8;\n      }\n      return result;\n    }\n  }\n\n  // Named colors are currently not supported due to the large addition to the xterm.js bundle size\n  // they would add. In order to support named colors, we would need some way of optionally loading\n  // additional payloads so startup/download time is not bloated (see #3530).\n}\n\n// pad hex output to requested bit width\nfunction pad(n: number, bits: number): string {\n  const s = n.toString(16);\n  const s2 = s.length < 2 ? '0' + s : s;\n  switch (bits) {\n    case 4:\n      return s[0];\n    case 8:\n      return s2;\n    case 12:\n      return (s2 + s2).slice(0, 3);\n    default:\n      return s2 + s2;\n  }\n}\n\n/**\n * Convert a given color to rgb:../../.. string of `bits` depth.\n */\nexport function toRgbString(color: [number, number, number], bits: number = 16): string {\n  const [r, g, b] = color;\n  return `rgb:${pad(r, bits)}/${pad(g, bits)}/${pad(b, bits)}`;\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * Internal states of EscapeSequenceParser.\n */\nexport const enum ParserState {\n  GROUND = 0,\n  ESCAPE = 1,\n  ESCAPE_INTERMEDIATE = 2,\n  CSI_ENTRY = 3,\n  CSI_PARAM = 4,\n  CSI_INTERMEDIATE = 5,\n  CSI_IGNORE = 6,\n  SOS_PM_APC_STRING = 7,\n  OSC_STRING = 8,\n  DCS_ENTRY = 9,\n  DCS_PARAM = 10,\n  DCS_IGNORE = 11,\n  DCS_INTERMEDIATE = 12,\n  DCS_PASSTHROUGH = 13\n}\n\n/**\n * Internal actions of EscapeSequenceParser.\n */\nexport const enum ParserAction {\n  IGNORE = 0,\n  ERROR = 1,\n  PRINT = 2,\n  EXECUTE = 3,\n  OSC_START = 4,\n  OSC_PUT = 5,\n  OSC_END = 6,\n  CSI_DISPATCH = 7,\n  PARAM = 8,\n  COLLECT = 9,\n  ESC_DISPATCH = 10,\n  CLEAR = 11,\n  DCS_HOOK = 12,\n  DCS_PUT = 13,\n  DCS_UNHOOK = 14\n}\n\n/**\n * Internal states of OscParser.\n */\nexport const enum OscState {\n  START = 0,\n  ID = 1,\n  PAYLOAD = 2,\n  ABORT = 3\n}\n\n// payload limit for OSC and DCS\nexport const PAYLOAD_LIMIT = 10000000;\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\nimport { IDcsHandler, IParams, IHandlerCollection, IDcsParser, DcsFallbackHandlerType, ISubParserStackState } from 'common/parser/Types';\nimport { utf32ToString } from 'common/input/TextDecoder';\nimport { Params } from 'common/parser/Params';\nimport { PAYLOAD_LIMIT } from 'common/parser/Constants';\n\nconst EMPTY_HANDLERS: IDcsHandler[] = [];\n\nexport class DcsParser implements IDcsParser {\n  private _handlers: IHandlerCollection<IDcsHandler> = Object.create(null);\n  private _active: IDcsHandler[] = EMPTY_HANDLERS;\n  private _ident: number = 0;\n  private _handlerFb: DcsFallbackHandlerType = () => { };\n  private _stack: ISubParserStackState = {\n    paused: false,\n    loopPosition: 0,\n    fallThrough: false\n  };\n\n  public dispose(): void {\n    this._handlers = Object.create(null);\n    this._handlerFb = () => { };\n    this._active = EMPTY_HANDLERS;\n  }\n\n  public registerHandler(ident: number, handler: IDcsHandler): IDisposable {\n    if (this._handlers[ident] === undefined) {\n      this._handlers[ident] = [];\n    }\n    const handlerList = this._handlers[ident];\n    handlerList.push(handler);\n    return {\n      dispose: () => {\n        const handlerIndex = handlerList.indexOf(handler);\n        if (handlerIndex !== -1) {\n          handlerList.splice(handlerIndex, 1);\n        }\n      }\n    };\n  }\n\n  public clearHandler(ident: number): void {\n    if (this._handlers[ident]) delete this._handlers[ident];\n  }\n\n  public setHandlerFallback(handler: DcsFallbackHandlerType): void {\n    this._handlerFb = handler;\n  }\n\n  public reset(): void {\n    // force cleanup leftover handlers\n    if (this._active.length) {\n      for (let j = this._stack.paused ? this._stack.loopPosition - 1 : this._active.length - 1; j >= 0; --j) {\n        this._active[j].unhook(false);\n      }\n    }\n    this._stack.paused = false;\n    this._active = EMPTY_HANDLERS;\n    this._ident = 0;\n  }\n\n  public hook(ident: number, params: IParams): void {\n    // always reset leftover handlers\n    this.reset();\n    this._ident = ident;\n    this._active = this._handlers[ident] || EMPTY_HANDLERS;\n    if (!this._active.length) {\n      this._handlerFb(this._ident, 'HOOK', params);\n    } else {\n      for (let j = this._active.length - 1; j >= 0; j--) {\n        this._active[j].hook(params);\n      }\n    }\n  }\n\n  public put(data: Uint32Array, start: number, end: number): void {\n    if (!this._active.length) {\n      this._handlerFb(this._ident, 'PUT', utf32ToString(data, start, end));\n    } else {\n      for (let j = this._active.length - 1; j >= 0; j--) {\n        this._active[j].put(data, start, end);\n      }\n    }\n  }\n\n  public unhook(success: boolean, promiseResult: boolean = true): void | Promise<boolean> {\n    if (!this._active.length) {\n      this._handlerFb(this._ident, 'UNHOOK', success);\n    } else {\n      let handlerResult: boolean | Promise<boolean> = false;\n      let j = this._active.length - 1;\n      let fallThrough = false;\n      if (this._stack.paused) {\n        j = this._stack.loopPosition - 1;\n        handlerResult = promiseResult;\n        fallThrough = this._stack.fallThrough;\n        this._stack.paused = false;\n      }\n      if (!fallThrough && handlerResult === false) {\n        for (; j >= 0; j--) {\n          handlerResult = this._active[j].unhook(success);\n          if (handlerResult === true) {\n            break;\n          } else if (handlerResult instanceof Promise) {\n            this._stack.paused = true;\n            this._stack.loopPosition = j;\n            this._stack.fallThrough = false;\n            return handlerResult;\n          }\n        }\n        j--;\n      }\n      // cleanup left over handlers (fallThrough for async)\n      for (; j >= 0; j--) {\n        handlerResult = this._active[j].unhook(false);\n        if (handlerResult instanceof Promise) {\n          this._stack.paused = true;\n          this._stack.loopPosition = j;\n          this._stack.fallThrough = true;\n          return handlerResult;\n        }\n      }\n    }\n    this._active = EMPTY_HANDLERS;\n    this._ident = 0;\n  }\n}\n\n// predefine empty params as [0] (ZDM)\nconst EMPTY_PARAMS = new Params();\nEMPTY_PARAMS.addParam(0);\n\n/**\n * Convenient class to create a DCS handler from a single callback function.\n * Note: The payload is currently limited to 50 MB (hardcoded).\n */\nexport class DcsHandler implements IDcsHandler {\n  private _data = '';\n  private _params: IParams = EMPTY_PARAMS;\n  private _hitLimit: boolean = false;\n\n  constructor(private _handler: (data: string, params: IParams) => boolean | Promise<boolean>) { }\n\n  public hook(params: IParams): void {\n    // since we need to preserve params until `unhook`, we have to clone it\n    // (only borrowed from parser and spans multiple parser states)\n    // perf optimization:\n    // clone only, if we have non empty params, otherwise stick with default\n    this._params = (params.length > 1 || params.params[0]) ? params.clone() : EMPTY_PARAMS;\n    this._data = '';\n    this._hitLimit = false;\n  }\n\n  public put(data: Uint32Array, start: number, end: number): void {\n    if (this._hitLimit) {\n      return;\n    }\n    this._data += utf32ToString(data, start, end);\n    if (this._data.length > PAYLOAD_LIMIT) {\n      this._data = '';\n      this._hitLimit = true;\n    }\n  }\n\n  public unhook(success: boolean): boolean | Promise<boolean> {\n    let ret: boolean | Promise<boolean> = false;\n    if (this._hitLimit) {\n      ret = false;\n    } else if (success) {\n      ret = this._handler(this._data, this._params);\n      if (ret instanceof Promise) {\n        // need to hold data and params until `ret` got resolved\n        // dont care for errors, data will be freed anyway on next start\n        return ret.then(res => {\n          this._params = EMPTY_PARAMS;\n          this._data = '';\n          this._hitLimit = false;\n          return res;\n        });\n      }\n    }\n    this._params = EMPTY_PARAMS;\n    this._data = '';\n    this._hitLimit = false;\n    return ret;\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IParsingState, IDcsHandler, IEscapeSequenceParser, IParams, IOscHandler, IHandlerCollection, CsiHandlerType, OscFallbackHandlerType, IOscParser, EscHandlerType, IDcsParser, DcsFallbackHandlerType, IFunctionIdentifier, ExecuteFallbackHandlerType, CsiFallbackHandlerType, EscFallbackHandlerType, PrintHandlerType, PrintFallbackHandlerType, ExecuteHandlerType, IParserStackState, ParserStackType, ResumableHandlersType } from 'common/parser/Types';\nimport { ParserState, ParserAction } from 'common/parser/Constants';\nimport { Disposable, toDisposable } from 'common/Lifecycle';\nimport { IDisposable } from 'common/Types';\nimport { Params } from 'common/parser/Params';\nimport { OscParser } from 'common/parser/OscParser';\nimport { DcsParser } from 'common/parser/DcsParser';\n\n/**\n * Table values are generated like this:\n *    index:  currentState << TableValue.INDEX_STATE_SHIFT | charCode\n *    value:  action << TableValue.TRANSITION_ACTION_SHIFT | nextState\n */\nconst enum TableAccess {\n  TRANSITION_ACTION_SHIFT = 4,\n  TRANSITION_STATE_MASK = 15,\n  INDEX_STATE_SHIFT = 8\n}\n\n/**\n * Transition table for EscapeSequenceParser.\n */\nexport class TransitionTable {\n  public table: Uint8Array;\n\n  constructor(length: number) {\n    this.table = new Uint8Array(length);\n  }\n\n  /**\n   * Set default transition.\n   * @param action default action\n   * @param next default next state\n   */\n  public setDefault(action: ParserAction, next: ParserState): void {\n    this.table.fill(action << TableAccess.TRANSITION_ACTION_SHIFT | next);\n  }\n\n  /**\n   * Add a transition to the transition table.\n   * @param code input character code\n   * @param state current parser state\n   * @param action parser action to be done\n   * @param next next parser state\n   */\n  public add(code: number, state: ParserState, action: ParserAction, next: ParserState): void {\n    this.table[state << TableAccess.INDEX_STATE_SHIFT | code] = action << TableAccess.TRANSITION_ACTION_SHIFT | next;\n  }\n\n  /**\n   * Add transitions for multiple input character codes.\n   * @param codes input character code array\n   * @param state current parser state\n   * @param action parser action to be done\n   * @param next next parser state\n   */\n  public addMany(codes: number[], state: ParserState, action: ParserAction, next: ParserState): void {\n    for (let i = 0; i < codes.length; i++) {\n      this.table[state << TableAccess.INDEX_STATE_SHIFT | codes[i]] = action << TableAccess.TRANSITION_ACTION_SHIFT | next;\n    }\n  }\n}\n\n\n// Pseudo-character placeholder for printable non-ascii characters (unicode).\nconst NON_ASCII_PRINTABLE = 0xA0;\n\n\n/**\n * VT500 compatible transition table.\n * Taken from https://vt100.net/emu/dec_ansi_parser.\n */\nexport const VT500_TRANSITION_TABLE = (function (): TransitionTable {\n  const table: TransitionTable = new TransitionTable(4095);\n\n  // range macro for byte\n  const BYTE_VALUES = 256;\n  const blueprint = Array.apply(null, Array(BYTE_VALUES)).map((unused: any, i: number) => i);\n  const r = (start: number, end: number): number[] => blueprint.slice(start, end);\n\n  // Default definitions.\n  const PRINTABLES = r(0x20, 0x7f); // 0x20 (SP) included, 0x7F (DEL) excluded\n  const EXECUTABLES = r(0x00, 0x18);\n  EXECUTABLES.push(0x19);\n  EXECUTABLES.push.apply(EXECUTABLES, r(0x1c, 0x20));\n\n  const states: number[] = r(ParserState.GROUND, ParserState.DCS_PASSTHROUGH + 1);\n  let state: any;\n\n  // set default transition\n  table.setDefault(ParserAction.ERROR, ParserState.GROUND);\n  // printables\n  table.addMany(PRINTABLES, ParserState.GROUND, ParserAction.PRINT, ParserState.GROUND);\n  // global anywhere rules\n  for (state in states) {\n    table.addMany([0x18, 0x1a, 0x99, 0x9a], state, ParserAction.EXECUTE, ParserState.GROUND);\n    table.addMany(r(0x80, 0x90), state, ParserAction.EXECUTE, ParserState.GROUND);\n    table.addMany(r(0x90, 0x98), state, ParserAction.EXECUTE, ParserState.GROUND);\n    table.add(0x9c, state, ParserAction.IGNORE, ParserState.GROUND); // ST as terminator\n    table.add(0x1b, state, ParserAction.CLEAR, ParserState.ESCAPE);  // ESC\n    table.add(0x9d, state, ParserAction.OSC_START, ParserState.OSC_STRING);  // OSC\n    table.addMany([0x98, 0x9e, 0x9f], state, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\n    table.add(0x9b, state, ParserAction.CLEAR, ParserState.CSI_ENTRY);  // CSI\n    table.add(0x90, state, ParserAction.CLEAR, ParserState.DCS_ENTRY);  // DCS\n  }\n  // rules for executables and 7f\n  table.addMany(EXECUTABLES, ParserState.GROUND, ParserAction.EXECUTE, ParserState.GROUND);\n  table.addMany(EXECUTABLES, ParserState.ESCAPE, ParserAction.EXECUTE, ParserState.ESCAPE);\n  table.add(0x7f, ParserState.ESCAPE, ParserAction.IGNORE, ParserState.ESCAPE);\n  table.addMany(EXECUTABLES, ParserState.OSC_STRING, ParserAction.IGNORE, ParserState.OSC_STRING);\n  table.addMany(EXECUTABLES, ParserState.CSI_ENTRY, ParserAction.EXECUTE, ParserState.CSI_ENTRY);\n  table.add(0x7f, ParserState.CSI_ENTRY, ParserAction.IGNORE, ParserState.CSI_ENTRY);\n  table.addMany(EXECUTABLES, ParserState.CSI_PARAM, ParserAction.EXECUTE, ParserState.CSI_PARAM);\n  table.add(0x7f, ParserState.CSI_PARAM, ParserAction.IGNORE, ParserState.CSI_PARAM);\n  table.addMany(EXECUTABLES, ParserState.CSI_IGNORE, ParserAction.EXECUTE, ParserState.CSI_IGNORE);\n  table.addMany(EXECUTABLES, ParserState.CSI_INTERMEDIATE, ParserAction.EXECUTE, ParserState.CSI_INTERMEDIATE);\n  table.add(0x7f, ParserState.CSI_INTERMEDIATE, ParserAction.IGNORE, ParserState.CSI_INTERMEDIATE);\n  table.addMany(EXECUTABLES, ParserState.ESCAPE_INTERMEDIATE, ParserAction.EXECUTE, ParserState.ESCAPE_INTERMEDIATE);\n  table.add(0x7f, ParserState.ESCAPE_INTERMEDIATE, ParserAction.IGNORE, ParserState.ESCAPE_INTERMEDIATE);\n  // osc\n  table.add(0x5d, ParserState.ESCAPE, ParserAction.OSC_START, ParserState.OSC_STRING);\n  table.addMany(PRINTABLES, ParserState.OSC_STRING, ParserAction.OSC_PUT, ParserState.OSC_STRING);\n  table.add(0x7f, ParserState.OSC_STRING, ParserAction.OSC_PUT, ParserState.OSC_STRING);\n  table.addMany([0x9c, 0x1b, 0x18, 0x1a, 0x07], ParserState.OSC_STRING, ParserAction.OSC_END, ParserState.GROUND);\n  table.addMany(r(0x1c, 0x20), ParserState.OSC_STRING, ParserAction.IGNORE, ParserState.OSC_STRING);\n  // sos/pm/apc does nothing\n  table.addMany([0x58, 0x5e, 0x5f], ParserState.ESCAPE, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\n  table.addMany(PRINTABLES, ParserState.SOS_PM_APC_STRING, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\n  table.addMany(EXECUTABLES, ParserState.SOS_PM_APC_STRING, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\n  table.add(0x9c, ParserState.SOS_PM_APC_STRING, ParserAction.IGNORE, ParserState.GROUND);\n  table.add(0x7f, ParserState.SOS_PM_APC_STRING, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\n  // csi entries\n  table.add(0x5b, ParserState.ESCAPE, ParserAction.CLEAR, ParserState.CSI_ENTRY);\n  table.addMany(r(0x40, 0x7f), ParserState.CSI_ENTRY, ParserAction.CSI_DISPATCH, ParserState.GROUND);\n  table.addMany(r(0x30, 0x3c), ParserState.CSI_ENTRY, ParserAction.PARAM, ParserState.CSI_PARAM);\n  table.addMany([0x3c, 0x3d, 0x3e, 0x3f], ParserState.CSI_ENTRY, ParserAction.COLLECT, ParserState.CSI_PARAM);\n  table.addMany(r(0x30, 0x3c), ParserState.CSI_PARAM, ParserAction.PARAM, ParserState.CSI_PARAM);\n  table.addMany(r(0x40, 0x7f), ParserState.CSI_PARAM, ParserAction.CSI_DISPATCH, ParserState.GROUND);\n  table.addMany([0x3c, 0x3d, 0x3e, 0x3f], ParserState.CSI_PARAM, ParserAction.IGNORE, ParserState.CSI_IGNORE);\n  table.addMany(r(0x20, 0x40), ParserState.CSI_IGNORE, ParserAction.IGNORE, ParserState.CSI_IGNORE);\n  table.add(0x7f, ParserState.CSI_IGNORE, ParserAction.IGNORE, ParserState.CSI_IGNORE);\n  table.addMany(r(0x40, 0x7f), ParserState.CSI_IGNORE, ParserAction.IGNORE, ParserState.GROUND);\n  table.addMany(r(0x20, 0x30), ParserState.CSI_ENTRY, ParserAction.COLLECT, ParserState.CSI_INTERMEDIATE);\n  table.addMany(r(0x20, 0x30), ParserState.CSI_INTERMEDIATE, ParserAction.COLLECT, ParserState.CSI_INTERMEDIATE);\n  table.addMany(r(0x30, 0x40), ParserState.CSI_INTERMEDIATE, ParserAction.IGNORE, ParserState.CSI_IGNORE);\n  table.addMany(r(0x40, 0x7f), ParserState.CSI_INTERMEDIATE, ParserAction.CSI_DISPATCH, ParserState.GROUND);\n  table.addMany(r(0x20, 0x30), ParserState.CSI_PARAM, ParserAction.COLLECT, ParserState.CSI_INTERMEDIATE);\n  // esc_intermediate\n  table.addMany(r(0x20, 0x30), ParserState.ESCAPE, ParserAction.COLLECT, ParserState.ESCAPE_INTERMEDIATE);\n  table.addMany(r(0x20, 0x30), ParserState.ESCAPE_INTERMEDIATE, ParserAction.COLLECT, ParserState.ESCAPE_INTERMEDIATE);\n  table.addMany(r(0x30, 0x7f), ParserState.ESCAPE_INTERMEDIATE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\n  table.addMany(r(0x30, 0x50), ParserState.ESCAPE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\n  table.addMany(r(0x51, 0x58), ParserState.ESCAPE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\n  table.addMany([0x59, 0x5a, 0x5c], ParserState.ESCAPE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\n  table.addMany(r(0x60, 0x7f), ParserState.ESCAPE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\n  // dcs entry\n  table.add(0x50, ParserState.ESCAPE, ParserAction.CLEAR, ParserState.DCS_ENTRY);\n  table.addMany(EXECUTABLES, ParserState.DCS_ENTRY, ParserAction.IGNORE, ParserState.DCS_ENTRY);\n  table.add(0x7f, ParserState.DCS_ENTRY, ParserAction.IGNORE, ParserState.DCS_ENTRY);\n  table.addMany(r(0x1c, 0x20), ParserState.DCS_ENTRY, ParserAction.IGNORE, ParserState.DCS_ENTRY);\n  table.addMany(r(0x20, 0x30), ParserState.DCS_ENTRY, ParserAction.COLLECT, ParserState.DCS_INTERMEDIATE);\n  table.addMany(r(0x30, 0x3c), ParserState.DCS_ENTRY, ParserAction.PARAM, ParserState.DCS_PARAM);\n  table.addMany([0x3c, 0x3d, 0x3e, 0x3f], ParserState.DCS_ENTRY, ParserAction.COLLECT, ParserState.DCS_PARAM);\n  table.addMany(EXECUTABLES, ParserState.DCS_IGNORE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.addMany(r(0x20, 0x80), ParserState.DCS_IGNORE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.addMany(r(0x1c, 0x20), ParserState.DCS_IGNORE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.addMany(EXECUTABLES, ParserState.DCS_PARAM, ParserAction.IGNORE, ParserState.DCS_PARAM);\n  table.add(0x7f, ParserState.DCS_PARAM, ParserAction.IGNORE, ParserState.DCS_PARAM);\n  table.addMany(r(0x1c, 0x20), ParserState.DCS_PARAM, ParserAction.IGNORE, ParserState.DCS_PARAM);\n  table.addMany(r(0x30, 0x3c), ParserState.DCS_PARAM, ParserAction.PARAM, ParserState.DCS_PARAM);\n  table.addMany([0x3c, 0x3d, 0x3e, 0x3f], ParserState.DCS_PARAM, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.addMany(r(0x20, 0x30), ParserState.DCS_PARAM, ParserAction.COLLECT, ParserState.DCS_INTERMEDIATE);\n  table.addMany(EXECUTABLES, ParserState.DCS_INTERMEDIATE, ParserAction.IGNORE, ParserState.DCS_INTERMEDIATE);\n  table.add(0x7f, ParserState.DCS_INTERMEDIATE, ParserAction.IGNORE, ParserState.DCS_INTERMEDIATE);\n  table.addMany(r(0x1c, 0x20), ParserState.DCS_INTERMEDIATE, ParserAction.IGNORE, ParserState.DCS_INTERMEDIATE);\n  table.addMany(r(0x20, 0x30), ParserState.DCS_INTERMEDIATE, ParserAction.COLLECT, ParserState.DCS_INTERMEDIATE);\n  table.addMany(r(0x30, 0x40), ParserState.DCS_INTERMEDIATE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.addMany(r(0x40, 0x7f), ParserState.DCS_INTERMEDIATE, ParserAction.DCS_HOOK, ParserState.DCS_PASSTHROUGH);\n  table.addMany(r(0x40, 0x7f), ParserState.DCS_PARAM, ParserAction.DCS_HOOK, ParserState.DCS_PASSTHROUGH);\n  table.addMany(r(0x40, 0x7f), ParserState.DCS_ENTRY, ParserAction.DCS_HOOK, ParserState.DCS_PASSTHROUGH);\n  table.addMany(EXECUTABLES, ParserState.DCS_PASSTHROUGH, ParserAction.DCS_PUT, ParserState.DCS_PASSTHROUGH);\n  table.addMany(PRINTABLES, ParserState.DCS_PASSTHROUGH, ParserAction.DCS_PUT, ParserState.DCS_PASSTHROUGH);\n  table.add(0x7f, ParserState.DCS_PASSTHROUGH, ParserAction.IGNORE, ParserState.DCS_PASSTHROUGH);\n  table.addMany([0x1b, 0x9c, 0x18, 0x1a], ParserState.DCS_PASSTHROUGH, ParserAction.DCS_UNHOOK, ParserState.GROUND);\n  // special handling of unicode chars\n  table.add(NON_ASCII_PRINTABLE, ParserState.GROUND, ParserAction.PRINT, ParserState.GROUND);\n  table.add(NON_ASCII_PRINTABLE, ParserState.OSC_STRING, ParserAction.OSC_PUT, ParserState.OSC_STRING);\n  table.add(NON_ASCII_PRINTABLE, ParserState.CSI_IGNORE, ParserAction.IGNORE, ParserState.CSI_IGNORE);\n  table.add(NON_ASCII_PRINTABLE, ParserState.DCS_IGNORE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.add(NON_ASCII_PRINTABLE, ParserState.DCS_PASSTHROUGH, ParserAction.DCS_PUT, ParserState.DCS_PASSTHROUGH);\n  return table;\n})();\n\n\n/**\n * EscapeSequenceParser.\n * This class implements the ANSI/DEC compatible parser described by\n * Paul Williams (https://vt100.net/emu/dec_ansi_parser).\n *\n * To implement custom ANSI compliant escape sequences it is not needed to\n * alter this parser, instead consider registering a custom handler.\n * For non ANSI compliant sequences change the transition table with\n * the optional `transitions` constructor argument and\n * reimplement the `parse` method.\n *\n * This parser is currently hardcoded to operate in ZDM (Zero Default Mode)\n * as suggested by the original parser, thus empty parameters are set to 0.\n * This this is not in line with the latest ECMA-48 specification\n * (ZDM was part of the early specs and got completely removed later on).\n *\n * Other than the original parser from vt100.net this parser supports\n * sub parameters in digital parameters separated by colons. Empty sub parameters\n * are set to -1 (no ZDM for sub parameters).\n *\n * About prefix and intermediate bytes:\n * This parser follows the assumptions of the vt100.net parser with these restrictions:\n * - only one prefix byte is allowed as first parameter byte, byte range 0x3c .. 0x3f\n * - max. two intermediates are respected, byte range 0x20 .. 0x2f\n * Note that this is not in line with ECMA-48 which does not limit either of those.\n * Furthermore ECMA-48 allows the prefix byte range at any param byte position. Currently\n * there are no known sequences that follow the broader definition of the specification.\n *\n * TODO: implement error recovery hook via error handler return values\n */\nexport class EscapeSequenceParser extends Disposable implements IEscapeSequenceParser {\n  public initialState: number;\n  public currentState: number;\n  public precedingJoinState: number; // UnicodeJoinProperties\n\n  // buffers over several parse calls\n  protected _params: Params;\n  protected _collect: number;\n\n  // handler lookup containers\n  protected _printHandler: PrintHandlerType;\n  protected _executeHandlers: { [flag: number]: ExecuteHandlerType };\n  protected _csiHandlers: IHandlerCollection<CsiHandlerType>;\n  protected _escHandlers: IHandlerCollection<EscHandlerType>;\n  protected readonly _oscParser: IOscParser;\n  protected readonly _dcsParser: IDcsParser;\n  protected _errorHandler: (state: IParsingState) => IParsingState;\n\n  // fallback handlers\n  protected _printHandlerFb: PrintFallbackHandlerType;\n  protected _executeHandlerFb: ExecuteFallbackHandlerType;\n  protected _csiHandlerFb: CsiFallbackHandlerType;\n  protected _escHandlerFb: EscFallbackHandlerType;\n  protected _errorHandlerFb: (state: IParsingState) => IParsingState;\n\n  // parser stack save for async handler support\n  protected _parseStack: IParserStackState = {\n    state: ParserStackType.NONE,\n    handlers: [],\n    handlerPos: 0,\n    transition: 0,\n    chunkPos: 0\n  };\n\n  constructor(\n    protected readonly _transitions: TransitionTable = VT500_TRANSITION_TABLE\n  ) {\n    super();\n\n    this.initialState = ParserState.GROUND;\n    this.currentState = this.initialState;\n    this._params = new Params(); // defaults to 32 storable params/subparams\n    this._params.addParam(0);    // ZDM\n    this._collect = 0;\n    this.precedingJoinState = 0;\n\n    // set default fallback handlers and handler lookup containers\n    this._printHandlerFb = (data, start, end): void => { };\n    this._executeHandlerFb = (code: number): void => { };\n    this._csiHandlerFb = (ident: number, params: IParams): void => { };\n    this._escHandlerFb = (ident: number): void => { };\n    this._errorHandlerFb = (state: IParsingState): IParsingState => state;\n    this._printHandler = this._printHandlerFb;\n    this._executeHandlers = Object.create(null);\n    this._csiHandlers = Object.create(null);\n    this._escHandlers = Object.create(null);\n    this.register(toDisposable(() => {\n      this._csiHandlers = Object.create(null);\n      this._executeHandlers = Object.create(null);\n      this._escHandlers = Object.create(null);\n    }));\n    this._oscParser = this.register(new OscParser());\n    this._dcsParser = this.register(new DcsParser());\n    this._errorHandler = this._errorHandlerFb;\n\n    // swallow 7bit ST (ESC+\\)\n    this.registerEscHandler({ final: '\\\\' }, () => true);\n  }\n\n  protected _identifier(id: IFunctionIdentifier, finalRange: number[] = [0x40, 0x7e]): number {\n    let res = 0;\n    if (id.prefix) {\n      if (id.prefix.length > 1) {\n        throw new Error('only one byte as prefix supported');\n      }\n      res = id.prefix.charCodeAt(0);\n      if (res && 0x3c > res || res > 0x3f) {\n        throw new Error('prefix must be in range 0x3c .. 0x3f');\n      }\n    }\n    if (id.intermediates) {\n      if (id.intermediates.length > 2) {\n        throw new Error('only two bytes as intermediates are supported');\n      }\n      for (let i = 0; i < id.intermediates.length; ++i) {\n        const intermediate = id.intermediates.charCodeAt(i);\n        if (0x20 > intermediate || intermediate > 0x2f) {\n          throw new Error('intermediate must be in range 0x20 .. 0x2f');\n        }\n        res <<= 8;\n        res |= intermediate;\n      }\n    }\n    if (id.final.length !== 1) {\n      throw new Error('final must be a single byte');\n    }\n    const finalCode = id.final.charCodeAt(0);\n    if (finalRange[0] > finalCode || finalCode > finalRange[1]) {\n      throw new Error(`final must be in range ${finalRange[0]} .. ${finalRange[1]}`);\n    }\n    res <<= 8;\n    res |= finalCode;\n\n    return res;\n  }\n\n  public identToString(ident: number): string {\n    const res: string[] = [];\n    while (ident) {\n      res.push(String.fromCharCode(ident & 0xFF));\n      ident >>= 8;\n    }\n    return res.reverse().join('');\n  }\n\n  public setPrintHandler(handler: PrintHandlerType): void {\n    this._printHandler = handler;\n  }\n  public clearPrintHandler(): void {\n    this._printHandler = this._printHandlerFb;\n  }\n\n  public registerEscHandler(id: IFunctionIdentifier, handler: EscHandlerType): IDisposable {\n    const ident = this._identifier(id, [0x30, 0x7e]);\n    if (this._escHandlers[ident] === undefined) {\n      this._escHandlers[ident] = [];\n    }\n    const handlerList = this._escHandlers[ident];\n    handlerList.push(handler);\n    return {\n      dispose: () => {\n        const handlerIndex = handlerList.indexOf(handler);\n        if (handlerIndex !== -1) {\n          handlerList.splice(handlerIndex, 1);\n        }\n      }\n    };\n  }\n  public clearEscHandler(id: IFunctionIdentifier): void {\n    if (this._escHandlers[this._identifier(id, [0x30, 0x7e])]) delete this._escHandlers[this._identifier(id, [0x30, 0x7e])];\n  }\n  public setEscHandlerFallback(handler: EscFallbackHandlerType): void {\n    this._escHandlerFb = handler;\n  }\n\n  public setExecuteHandler(flag: string, handler: ExecuteHandlerType): void {\n    this._executeHandlers[flag.charCodeAt(0)] = handler;\n  }\n  public clearExecuteHandler(flag: string): void {\n    if (this._executeHandlers[flag.charCodeAt(0)]) delete this._executeHandlers[flag.charCodeAt(0)];\n  }\n  public setExecuteHandlerFallback(handler: ExecuteFallbackHandlerType): void {\n    this._executeHandlerFb = handler;\n  }\n\n  public registerCsiHandler(id: IFunctionIdentifier, handler: CsiHandlerType): IDisposable {\n    const ident = this._identifier(id);\n    if (this._csiHandlers[ident] === undefined) {\n      this._csiHandlers[ident] = [];\n    }\n    const handlerList = this._csiHandlers[ident];\n    handlerList.push(handler);\n    return {\n      dispose: () => {\n        const handlerIndex = handlerList.indexOf(handler);\n        if (handlerIndex !== -1) {\n          handlerList.splice(handlerIndex, 1);\n        }\n      }\n    };\n  }\n  public clearCsiHandler(id: IFunctionIdentifier): void {\n    if (this._csiHandlers[this._identifier(id)]) delete this._csiHandlers[this._identifier(id)];\n  }\n  public setCsiHandlerFallback(callback: (ident: number, params: IParams) => void): void {\n    this._csiHandlerFb = callback;\n  }\n\n  public registerDcsHandler(id: IFunctionIdentifier, handler: IDcsHandler): IDisposable {\n    return this._dcsParser.registerHandler(this._identifier(id), handler);\n  }\n  public clearDcsHandler(id: IFunctionIdentifier): void {\n    this._dcsParser.clearHandler(this._identifier(id));\n  }\n  public setDcsHandlerFallback(handler: DcsFallbackHandlerType): void {\n    this._dcsParser.setHandlerFallback(handler);\n  }\n\n  public registerOscHandler(ident: number, handler: IOscHandler): IDisposable {\n    return this._oscParser.registerHandler(ident, handler);\n  }\n  public clearOscHandler(ident: number): void {\n    this._oscParser.clearHandler(ident);\n  }\n  public setOscHandlerFallback(handler: OscFallbackHandlerType): void {\n    this._oscParser.setHandlerFallback(handler);\n  }\n\n  public setErrorHandler(callback: (state: IParsingState) => IParsingState): void {\n    this._errorHandler = callback;\n  }\n  public clearErrorHandler(): void {\n    this._errorHandler = this._errorHandlerFb;\n  }\n\n  /**\n   * Reset parser to initial values.\n   *\n   * This can also be used to lift the improper continuation error condition\n   * when dealing with async handlers. Use this only as a last resort to silence\n   * that error when the terminal has no pending data to be processed. Note that\n   * the interrupted async handler might continue its work in the future messing\n   * up the terminal state even further.\n   */\n  public reset(): void {\n    this.currentState = this.initialState;\n    this._oscParser.reset();\n    this._dcsParser.reset();\n    this._params.reset();\n    this._params.addParam(0); // ZDM\n    this._collect = 0;\n    this.precedingJoinState = 0;\n    // abort pending continuation from async handler\n    // Here the RESET type indicates, that the next parse call will\n    // ignore any saved stack, instead continues sync with next codepoint from GROUND\n    if (this._parseStack.state !== ParserStackType.NONE) {\n      this._parseStack.state = ParserStackType.RESET;\n      this._parseStack.handlers = []; // also release handlers ref\n    }\n  }\n\n  /**\n   * Async parse support.\n   */\n  protected _preserveStack(\n    state: ParserStackType,\n    handlers: ResumableHandlersType,\n    handlerPos: number,\n    transition: number,\n    chunkPos: number\n  ): void {\n    this._parseStack.state = state;\n    this._parseStack.handlers = handlers;\n    this._parseStack.handlerPos = handlerPos;\n    this._parseStack.transition = transition;\n    this._parseStack.chunkPos = chunkPos;\n  }\n\n  /**\n   * Parse UTF32 codepoints in `data` up to `length`.\n   *\n   * Note: For several actions with high data load the parsing is optimized\n   * by using local read ahead loops with hardcoded conditions to\n   * avoid costly table lookups. Make sure that any change of table values\n   * will be reflected in the loop conditions as well and vice versa.\n   * Affected states/actions:\n   * - GROUND:PRINT\n   * - CSI_PARAM:PARAM\n   * - DCS_PARAM:PARAM\n   * - OSC_STRING:OSC_PUT\n   * - DCS_PASSTHROUGH:DCS_PUT\n   *\n   * Note on asynchronous handler support:\n   * Any handler returning a promise will be treated as asynchronous.\n   * To keep the in-band blocking working for async handlers, `parse` pauses execution,\n   * creates a stack save and returns the promise to the caller.\n   * For proper continuation of the paused state it is important\n   * to await the promise resolving. On resolve the parse must be repeated\n   * with the same chunk of data and the resolved value in `promiseResult`\n   * until no promise is returned.\n   *\n   * Important: With only sync handlers defined, parsing is completely synchronous as well.\n   * As soon as an async handler is involved, synchronous parsing is not possible anymore.\n   *\n   * Boilerplate for proper parsing of multiple chunks with async handlers:\n   *\n   * ```typescript\n   * async function parseMultipleChunks(chunks: Uint32Array[]): Promise<void> {\n   *   for (const chunk of chunks) {\n   *     let result: void | Promise<boolean>;\n   *     let prev: boolean | undefined;\n   *     while (result = parser.parse(chunk, chunk.length, prev)) {\n   *       prev = await result;\n   *     }\n   *   }\n   *   // finished parsing all chunks...\n   * }\n   * ```\n   */\n  public parse(data: Uint32Array, length: number, promiseResult?: boolean): void | Promise<boolean> {\n    let code = 0;\n    let transition = 0;\n    let start = 0;\n    let handlerResult: void | boolean | Promise<boolean>;\n\n    // resume from async handler\n    if (this._parseStack.state) {\n      // allow sync parser reset even in continuation mode\n      // Note: can be used to recover parser from improper continuation error below\n      if (this._parseStack.state === ParserStackType.RESET) {\n        this._parseStack.state = ParserStackType.NONE;\n        start = this._parseStack.chunkPos + 1; // continue with next codepoint in GROUND\n      } else {\n        if (promiseResult === undefined || this._parseStack.state === ParserStackType.FAIL) {\n          /**\n           * Reject further parsing on improper continuation after pausing. This is a really bad\n           * condition with screwed up execution order and prolly messed up terminal state,\n           * therefore we exit hard with an exception and reject any further parsing.\n           *\n           * Note: With `Terminal.write` usage this exception should never occur, as the top level\n           * calls are guaranteed to handle async conditions properly. If you ever encounter this\n           * exception in your terminal integration it indicates, that you injected data chunks to\n           * `InputHandler.parse` or `EscapeSequenceParser.parse` synchronously without waiting for\n           * continuation of a running async handler.\n           *\n           * It is possible to get rid of this error by calling `reset`. But dont rely on that, as\n           * the pending async handler still might mess up the terminal later. Instead fix the\n           * faulty async handling, so this error will not be thrown anymore.\n           */\n          this._parseStack.state = ParserStackType.FAIL;\n          throw new Error('improper continuation due to previous async handler, giving up parsing');\n        }\n\n        // we have to resume the old handler loop if:\n        // - return value of the promise was `false`\n        // - handlers are not exhausted yet\n        const handlers = this._parseStack.handlers;\n        let handlerPos = this._parseStack.handlerPos - 1;\n        switch (this._parseStack.state) {\n          case ParserStackType.CSI:\n            if (promiseResult === false && handlerPos > -1) {\n              for (; handlerPos >= 0; handlerPos--) {\n                handlerResult = (handlers as CsiHandlerType[])[handlerPos](this._params);\n                if (handlerResult === true) {\n                  break;\n                } else if (handlerResult instanceof Promise) {\n                  this._parseStack.handlerPos = handlerPos;\n                  return handlerResult;\n                }\n              }\n            }\n            this._parseStack.handlers = [];\n            break;\n          case ParserStackType.ESC:\n            if (promiseResult === false && handlerPos > -1) {\n              for (; handlerPos >= 0; handlerPos--) {\n                handlerResult = (handlers as EscHandlerType[])[handlerPos]();\n                if (handlerResult === true) {\n                  break;\n                } else if (handlerResult instanceof Promise) {\n                  this._parseStack.handlerPos = handlerPos;\n                  return handlerResult;\n                }\n              }\n            }\n            this._parseStack.handlers = [];\n            break;\n          case ParserStackType.DCS:\n            code = data[this._parseStack.chunkPos];\n            handlerResult = this._dcsParser.unhook(code !== 0x18 && code !== 0x1a, promiseResult);\n            if (handlerResult) {\n              return handlerResult;\n            }\n            if (code === 0x1b) this._parseStack.transition |= ParserState.ESCAPE;\n            this._params.reset();\n            this._params.addParam(0); // ZDM\n            this._collect = 0;\n            break;\n          case ParserStackType.OSC:\n            code = data[this._parseStack.chunkPos];\n            handlerResult = this._oscParser.end(code !== 0x18 && code !== 0x1a, promiseResult);\n            if (handlerResult) {\n              return handlerResult;\n            }\n            if (code === 0x1b) this._parseStack.transition |= ParserState.ESCAPE;\n            this._params.reset();\n            this._params.addParam(0); // ZDM\n            this._collect = 0;\n            break;\n        }\n        // cleanup before continuing with the main sync loop\n        this._parseStack.state = ParserStackType.NONE;\n        start = this._parseStack.chunkPos + 1;\n        this.precedingJoinState = 0;\n        this.currentState = this._parseStack.transition & TableAccess.TRANSITION_STATE_MASK;\n      }\n    }\n\n    // continue with main sync loop\n\n    // process input string\n    for (let i = start; i < length; ++i) {\n      code = data[i];\n\n      // normal transition & action lookup\n      transition = this._transitions.table[this.currentState << TableAccess.INDEX_STATE_SHIFT | (code < 0xa0 ? code : NON_ASCII_PRINTABLE)];\n      switch (transition >> TableAccess.TRANSITION_ACTION_SHIFT) {\n        case ParserAction.PRINT:\n          // read ahead with loop unrolling\n          // Note: 0x20 (SP) is included, 0x7F (DEL) is excluded\n          for (let j = i + 1; ; ++j) {\n            if (j >= length || (code = data[j]) < 0x20 || (code > 0x7e && code < NON_ASCII_PRINTABLE)) {\n              this._printHandler(data, i, j);\n              i = j - 1;\n              break;\n            }\n            if (++j >= length || (code = data[j]) < 0x20 || (code > 0x7e && code < NON_ASCII_PRINTABLE)) {\n              this._printHandler(data, i, j);\n              i = j - 1;\n              break;\n            }\n            if (++j >= length || (code = data[j]) < 0x20 || (code > 0x7e && code < NON_ASCII_PRINTABLE)) {\n              this._printHandler(data, i, j);\n              i = j - 1;\n              break;\n            }\n            if (++j >= length || (code = data[j]) < 0x20 || (code > 0x7e && code < NON_ASCII_PRINTABLE)) {\n              this._printHandler(data, i, j);\n              i = j - 1;\n              break;\n            }\n          }\n          break;\n        case ParserAction.EXECUTE:\n          if (this._executeHandlers[code]) this._executeHandlers[code]();\n          else this._executeHandlerFb(code);\n          this.precedingJoinState = 0;\n          break;\n        case ParserAction.IGNORE:\n          break;\n        case ParserAction.ERROR:\n          const inject: IParsingState = this._errorHandler(\n            {\n              position: i,\n              code,\n              currentState: this.currentState,\n              collect: this._collect,\n              params: this._params,\n              abort: false\n            });\n          if (inject.abort) return;\n          // inject values: currently not implemented\n          break;\n        case ParserAction.CSI_DISPATCH:\n          // Trigger CSI Handler\n          const handlers = this._csiHandlers[this._collect << 8 | code];\n          let j = handlers ? handlers.length - 1 : -1;\n          for (; j >= 0; j--) {\n            // true means success and to stop bubbling\n            // a promise indicates an async handler that needs to finish before progressing\n            handlerResult = handlers[j](this._params);\n            if (handlerResult === true) {\n              break;\n            } else if (handlerResult instanceof Promise) {\n              this._preserveStack(ParserStackType.CSI, handlers, j, transition, i);\n              return handlerResult;\n            }\n          }\n          if (j < 0) {\n            this._csiHandlerFb(this._collect << 8 | code, this._params);\n          }\n          this.precedingJoinState = 0;\n          break;\n        case ParserAction.PARAM:\n          // inner loop: digits (0x30 - 0x39) and ; (0x3b) and : (0x3a)\n          do {\n            switch (code) {\n              case 0x3b:\n                this._params.addParam(0);  // ZDM\n                break;\n              case 0x3a:\n                this._params.addSubParam(-1);\n                break;\n              default:  // 0x30 - 0x39\n                this._params.addDigit(code - 48);\n            }\n          } while (++i < length && (code = data[i]) > 0x2f && code < 0x3c);\n          i--;\n          break;\n        case ParserAction.COLLECT:\n          this._collect <<= 8;\n          this._collect |= code;\n          break;\n        case ParserAction.ESC_DISPATCH:\n          const handlersEsc = this._escHandlers[this._collect << 8 | code];\n          let jj = handlersEsc ? handlersEsc.length - 1 : -1;\n          for (; jj >= 0; jj--) {\n            // true means success and to stop bubbling\n            // a promise indicates an async handler that needs to finish before progressing\n            handlerResult = handlersEsc[jj]();\n            if (handlerResult === true) {\n              break;\n            } else if (handlerResult instanceof Promise) {\n              this._preserveStack(ParserStackType.ESC, handlersEsc, jj, transition, i);\n              return handlerResult;\n            }\n          }\n          if (jj < 0) {\n            this._escHandlerFb(this._collect << 8 | code);\n          }\n          this.precedingJoinState = 0;\n          break;\n        case ParserAction.CLEAR:\n          this._params.reset();\n          this._params.addParam(0); // ZDM\n          this._collect = 0;\n          break;\n        case ParserAction.DCS_HOOK:\n          this._dcsParser.hook(this._collect << 8 | code, this._params);\n          break;\n        case ParserAction.DCS_PUT:\n          // inner loop - exit DCS_PUT: 0x18, 0x1a, 0x1b, 0x7f, 0x80 - 0x9f\n          // unhook triggered by: 0x1b, 0x9c (success) and 0x18, 0x1a (abort)\n          for (let j = i + 1; ; ++j) {\n            if (j >= length || (code = data[j]) === 0x18 || code === 0x1a || code === 0x1b || (code > 0x7f && code < NON_ASCII_PRINTABLE)) {\n              this._dcsParser.put(data, i, j);\n              i = j - 1;\n              break;\n            }\n          }\n          break;\n        case ParserAction.DCS_UNHOOK:\n          handlerResult = this._dcsParser.unhook(code !== 0x18 && code !== 0x1a);\n          if (handlerResult) {\n            this._preserveStack(ParserStackType.DCS, [], 0, transition, i);\n            return handlerResult;\n          }\n          if (code === 0x1b) transition |= ParserState.ESCAPE;\n          this._params.reset();\n          this._params.addParam(0); // ZDM\n          this._collect = 0;\n          this.precedingJoinState = 0;\n          break;\n        case ParserAction.OSC_START:\n          this._oscParser.start();\n          break;\n        case ParserAction.OSC_PUT:\n          // inner loop: 0x20 (SP) included, 0x7F (DEL) included\n          for (let j = i + 1; ; j++) {\n            if (j >= length || (code = data[j]) < 0x20 || (code > 0x7f && code < NON_ASCII_PRINTABLE)) {\n              this._oscParser.put(data, i, j);\n              i = j - 1;\n              break;\n            }\n          }\n          break;\n        case ParserAction.OSC_END:\n          handlerResult = this._oscParser.end(code !== 0x18 && code !== 0x1a);\n          if (handlerResult) {\n            this._preserveStack(ParserStackType.OSC, [], 0, transition, i);\n            return handlerResult;\n          }\n          if (code === 0x1b) transition |= ParserState.ESCAPE;\n          this._params.reset();\n          this._params.addParam(0); // ZDM\n          this._collect = 0;\n          this.precedingJoinState = 0;\n          break;\n      }\n      this.currentState = transition & TableAccess.TRANSITION_STATE_MASK;\n    }\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IOscHandler, IHandlerCollection, OscFallbackHandlerType, IOscParser, ISubParserStackState } from 'common/parser/Types';\nimport { OscState, PAYLOAD_LIMIT } from 'common/parser/Constants';\nimport { utf32ToString } from 'common/input/TextDecoder';\nimport { IDisposable } from 'common/Types';\n\nconst EMPTY_HANDLERS: IOscHandler[] = [];\n\nexport class OscParser implements IOscParser {\n  private _state = OscState.START;\n  private _active = EMPTY_HANDLERS;\n  private _id = -1;\n  private _handlers: IHandlerCollection<IOscHandler> = Object.create(null);\n  private _handlerFb: OscFallbackHandlerType = () => { };\n  private _stack: ISubParserStackState = {\n    paused: false,\n    loopPosition: 0,\n    fallThrough: false\n  };\n\n  public registerHandler(ident: number, handler: IOscHandler): IDisposable {\n    if (this._handlers[ident] === undefined) {\n      this._handlers[ident] = [];\n    }\n    const handlerList = this._handlers[ident];\n    handlerList.push(handler);\n    return {\n      dispose: () => {\n        const handlerIndex = handlerList.indexOf(handler);\n        if (handlerIndex !== -1) {\n          handlerList.splice(handlerIndex, 1);\n        }\n      }\n    };\n  }\n  public clearHandler(ident: number): void {\n    if (this._handlers[ident]) delete this._handlers[ident];\n  }\n  public setHandlerFallback(handler: OscFallbackHandlerType): void {\n    this._handlerFb = handler;\n  }\n\n  public dispose(): void {\n    this._handlers = Object.create(null);\n    this._handlerFb = () => { };\n    this._active = EMPTY_HANDLERS;\n  }\n\n  public reset(): void {\n    // force cleanup handlers if payload was already sent\n    if (this._state === OscState.PAYLOAD) {\n      for (let j = this._stack.paused ? this._stack.loopPosition - 1 : this._active.length - 1; j >= 0; --j) {\n        this._active[j].end(false);\n      }\n    }\n    this._stack.paused = false;\n    this._active = EMPTY_HANDLERS;\n    this._id = -1;\n    this._state = OscState.START;\n  }\n\n  private _start(): void {\n    this._active = this._handlers[this._id] || EMPTY_HANDLERS;\n    if (!this._active.length) {\n      this._handlerFb(this._id, 'START');\n    } else {\n      for (let j = this._active.length - 1; j >= 0; j--) {\n        this._active[j].start();\n      }\n    }\n  }\n\n  private _put(data: Uint32Array, start: number, end: number): void {\n    if (!this._active.length) {\n      this._handlerFb(this._id, 'PUT', utf32ToString(data, start, end));\n    } else {\n      for (let j = this._active.length - 1; j >= 0; j--) {\n        this._active[j].put(data, start, end);\n      }\n    }\n  }\n\n  public start(): void {\n    // always reset leftover handlers\n    this.reset();\n    this._state = OscState.ID;\n  }\n\n  /**\n   * Put data to current OSC command.\n   * Expects the identifier of the OSC command in the form\n   * OSC id ; payload ST/BEL\n   * Payload chunks are not further processed and get\n   * directly passed to the handlers.\n   */\n  public put(data: Uint32Array, start: number, end: number): void {\n    if (this._state === OscState.ABORT) {\n      return;\n    }\n    if (this._state === OscState.ID) {\n      while (start < end) {\n        const code = data[start++];\n        if (code === 0x3b) {\n          this._state = OscState.PAYLOAD;\n          this._start();\n          break;\n        }\n        if (code < 0x30 || 0x39 < code) {\n          this._state = OscState.ABORT;\n          return;\n        }\n        if (this._id === -1) {\n          this._id = 0;\n        }\n        this._id = this._id * 10 + code - 48;\n      }\n    }\n    if (this._state === OscState.PAYLOAD && end - start > 0) {\n      this._put(data, start, end);\n    }\n  }\n\n  /**\n   * Indicates end of an OSC command.\n   * Whether the OSC got aborted or finished normally\n   * is indicated by `success`.\n   */\n  public end(success: boolean, promiseResult: boolean = true): void | Promise<boolean> {\n    if (this._state === OscState.START) {\n      return;\n    }\n    // do nothing if command was faulty\n    if (this._state !== OscState.ABORT) {\n      // if we are still in ID state and get an early end\n      // means that the command has no payload thus we still have\n      // to announce START and send END right after\n      if (this._state === OscState.ID) {\n        this._start();\n      }\n\n      if (!this._active.length) {\n        this._handlerFb(this._id, 'END', success);\n      } else {\n        let handlerResult: boolean | Promise<boolean> = false;\n        let j = this._active.length - 1;\n        let fallThrough = false;\n        if (this._stack.paused) {\n          j = this._stack.loopPosition - 1;\n          handlerResult = promiseResult;\n          fallThrough = this._stack.fallThrough;\n          this._stack.paused = false;\n        }\n        if (!fallThrough && handlerResult === false) {\n          for (; j >= 0; j--) {\n            handlerResult = this._active[j].end(success);\n            if (handlerResult === true) {\n              break;\n            } else if (handlerResult instanceof Promise) {\n              this._stack.paused = true;\n              this._stack.loopPosition = j;\n              this._stack.fallThrough = false;\n              return handlerResult;\n            }\n          }\n          j--;\n        }\n        // cleanup left over handlers\n        // we always have to call .end for proper cleanup,\n        // here we use `success` to indicate whether a handler should execute\n        for (; j >= 0; j--) {\n          handlerResult = this._active[j].end(false);\n          if (handlerResult instanceof Promise) {\n            this._stack.paused = true;\n            this._stack.loopPosition = j;\n            this._stack.fallThrough = true;\n            return handlerResult;\n          }\n        }\n      }\n\n    }\n    this._active = EMPTY_HANDLERS;\n    this._id = -1;\n    this._state = OscState.START;\n  }\n}\n\n/**\n * Convenient class to allow attaching string based handler functions\n * as OSC handlers.\n */\nexport class OscHandler implements IOscHandler {\n  private _data = '';\n  private _hitLimit: boolean = false;\n\n  constructor(private _handler: (data: string) => boolean | Promise<boolean>) { }\n\n  public start(): void {\n    this._data = '';\n    this._hitLimit = false;\n  }\n\n  public put(data: Uint32Array, start: number, end: number): void {\n    if (this._hitLimit) {\n      return;\n    }\n    this._data += utf32ToString(data, start, end);\n    if (this._data.length > PAYLOAD_LIMIT) {\n      this._data = '';\n      this._hitLimit = true;\n    }\n  }\n\n  public end(success: boolean): boolean | Promise<boolean> {\n    let ret: boolean | Promise<boolean> = false;\n    if (this._hitLimit) {\n      ret = false;\n    } else if (success) {\n      ret = this._handler(this._data);\n      if (ret instanceof Promise) {\n        // need to hold data until `ret` got resolved\n        // dont care for errors, data will be freed anyway on next start\n        return ret.then(res => {\n          this._data = '';\n          this._hitLimit = false;\n          return res;\n        });\n      }\n    }\n    this._data = '';\n    this._hitLimit = false;\n    return ret;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\nimport { IParams, ParamsArray } from 'common/parser/Types';\n\n// max value supported for a single param/subparam (clamped to positive int32 range)\nconst MAX_VALUE = 0x7FFFFFFF;\n// max allowed subparams for a single sequence (hardcoded limitation)\nconst MAX_SUBPARAMS = 256;\n\n/**\n * Params storage class.\n * This type is used by the parser to accumulate sequence parameters and sub parameters\n * and transmit them to the input handler actions.\n *\n * NOTES:\n *  - params object for action handlers is borrowed, use `.toArray` or `.clone` to get a copy\n *  - never read beyond `params.length - 1` (likely to contain arbitrary data)\n *  - `.getSubParams` returns a borrowed typed array, use `.getSubParamsAll` for cloned sub params\n *  - hardcoded limitations:\n *    - max. value for a single (sub) param is 2^31 - 1 (greater values are clamped to that)\n *    - max. 256 sub params possible\n *    - negative values are not allowed beside -1 (placeholder for default value)\n *\n * About ZDM (Zero Default Mode):\n * ZDM is not orchestrated by this class. If the parser is in ZDM,\n * it should add 0 for empty params, otherwise -1. This does not apply\n * to subparams, empty subparams should always be added with -1.\n */\nexport class Params implements IParams {\n  // params store and length\n  public params: Int32Array;\n  public length: number;\n\n  // sub params store and length\n  protected _subParams: Int32Array;\n  protected _subParamsLength: number;\n\n  // sub params offsets from param: param idx --> [start, end] offset\n  private _subParamsIdx: Uint16Array;\n  private _rejectDigits: boolean;\n  private _rejectSubDigits: boolean;\n  private _digitIsSub: boolean;\n\n  /**\n   * Create a `Params` type from JS array representation.\n   */\n  public static fromArray(values: ParamsArray): Params {\n    const params = new Params();\n    if (!values.length) {\n      return params;\n    }\n    // skip leading sub params\n    for (let i = (Array.isArray(values[0])) ? 1 : 0; i < values.length; ++i) {\n      const value = values[i];\n      if (Array.isArray(value)) {\n        for (let k = 0; k < value.length; ++k) {\n          params.addSubParam(value[k]);\n        }\n      } else {\n        params.addParam(value);\n      }\n    }\n    return params;\n  }\n\n  /**\n   * @param maxLength max length of storable parameters\n   * @param maxSubParamsLength max length of storable sub parameters\n   */\n  constructor(public maxLength: number = 32, public maxSubParamsLength: number = 32) {\n    if (maxSubParamsLength > MAX_SUBPARAMS) {\n      throw new Error('maxSubParamsLength must not be greater than 256');\n    }\n    this.params = new Int32Array(maxLength);\n    this.length = 0;\n    this._subParams = new Int32Array(maxSubParamsLength);\n    this._subParamsLength = 0;\n    this._subParamsIdx = new Uint16Array(maxLength);\n    this._rejectDigits = false;\n    this._rejectSubDigits = false;\n    this._digitIsSub = false;\n  }\n\n  /**\n   * Clone object.\n   */\n  public clone(): Params {\n    const newParams = new Params(this.maxLength, this.maxSubParamsLength);\n    newParams.params.set(this.params);\n    newParams.length = this.length;\n    newParams._subParams.set(this._subParams);\n    newParams._subParamsLength = this._subParamsLength;\n    newParams._subParamsIdx.set(this._subParamsIdx);\n    newParams._rejectDigits = this._rejectDigits;\n    newParams._rejectSubDigits = this._rejectSubDigits;\n    newParams._digitIsSub = this._digitIsSub;\n    return newParams;\n  }\n\n  /**\n   * Get a JS array representation of the current parameters and sub parameters.\n   * The array is structured as follows:\n   *    sequence: \"1;2:3:4;5::6\"\n   *    array   : [1, 2, [3, 4], 5, [-1, 6]]\n   */\n  public toArray(): ParamsArray {\n    const res: ParamsArray = [];\n    for (let i = 0; i < this.length; ++i) {\n      res.push(this.params[i]);\n      const start = this._subParamsIdx[i] >> 8;\n      const end = this._subParamsIdx[i] & 0xFF;\n      if (end - start > 0) {\n        res.push(Array.prototype.slice.call(this._subParams, start, end));\n      }\n    }\n    return res;\n  }\n\n  /**\n   * Reset to initial empty state.\n   */\n  public reset(): void {\n    this.length = 0;\n    this._subParamsLength = 0;\n    this._rejectDigits = false;\n    this._rejectSubDigits = false;\n    this._digitIsSub = false;\n  }\n\n  /**\n   * Add a parameter value.\n   * `Params` only stores up to `maxLength` parameters, any later\n   * parameter will be ignored.\n   * Note: VT devices only stored up to 16 values, xterm seems to\n   * store up to 30.\n   */\n  public addParam(value: number): void {\n    this._digitIsSub = false;\n    if (this.length >= this.maxLength) {\n      this._rejectDigits = true;\n      return;\n    }\n    if (value < -1) {\n      throw new Error('values lesser than -1 are not allowed');\n    }\n    this._subParamsIdx[this.length] = this._subParamsLength << 8 | this._subParamsLength;\n    this.params[this.length++] = value > MAX_VALUE ? MAX_VALUE : value;\n  }\n\n  /**\n   * Add a sub parameter value.\n   * The sub parameter is automatically associated with the last parameter value.\n   * Thus it is not possible to add a subparameter without any parameter added yet.\n   * `Params` only stores up to `subParamsLength` sub parameters, any later\n   * sub parameter will be ignored.\n   */\n  public addSubParam(value: number): void {\n    this._digitIsSub = true;\n    if (!this.length) {\n      return;\n    }\n    if (this._rejectDigits || this._subParamsLength >= this.maxSubParamsLength) {\n      this._rejectSubDigits = true;\n      return;\n    }\n    if (value < -1) {\n      throw new Error('values lesser than -1 are not allowed');\n    }\n    this._subParams[this._subParamsLength++] = value > MAX_VALUE ? MAX_VALUE : value;\n    this._subParamsIdx[this.length - 1]++;\n  }\n\n  /**\n   * Whether parameter at index `idx` has sub parameters.\n   */\n  public hasSubParams(idx: number): boolean {\n    return ((this._subParamsIdx[idx] & 0xFF) - (this._subParamsIdx[idx] >> 8) > 0);\n  }\n\n  /**\n   * Return sub parameters for parameter at index `idx`.\n   * Note: The values are borrowed, thus you need to copy\n   * the values if you need to hold them in nonlocal scope.\n   */\n  public getSubParams(idx: number): Int32Array | null {\n    const start = this._subParamsIdx[idx] >> 8;\n    const end = this._subParamsIdx[idx] & 0xFF;\n    if (end - start > 0) {\n      return this._subParams.subarray(start, end);\n    }\n    return null;\n  }\n\n  /**\n   * Return all sub parameters as {idx: subparams} mapping.\n   * Note: The values are not borrowed.\n   */\n  public getSubParamsAll(): {[idx: number]: Int32Array} {\n    const result: {[idx: number]: Int32Array} = {};\n    for (let i = 0; i < this.length; ++i) {\n      const start = this._subParamsIdx[i] >> 8;\n      const end = this._subParamsIdx[i] & 0xFF;\n      if (end - start > 0) {\n        result[i] = this._subParams.slice(start, end);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Add a single digit value to current parameter.\n   * This is used by the parser to account digits on a char by char basis.\n   */\n  public addDigit(value: number): void {\n    let length;\n    if (this._rejectDigits\n      || !(length = this._digitIsSub ? this._subParamsLength : this.length)\n      || (this._digitIsSub && this._rejectSubDigits)\n    ) {\n      return;\n    }\n\n    const store = this._digitIsSub ? this._subParams : this.params;\n    const cur = store[length - 1];\n    store[length - 1] = ~cur ? Math.min(cur * 10 + value, MAX_VALUE) : value;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ITerminalAddon, IDisposable, Terminal } from '@xterm/xterm';\n\nexport interface ILoadedAddon {\n  instance: ITerminalAddon;\n  dispose: () => void;\n  isDisposed: boolean;\n}\n\nexport class AddonManager implements IDisposable {\n  protected _addons: ILoadedAddon[] = [];\n\n  public dispose(): void {\n    for (let i = this._addons.length - 1; i >= 0; i--) {\n      this._addons[i].instance.dispose();\n    }\n  }\n\n  public loadAddon(terminal: Terminal, instance: ITerminalAddon): void {\n    const loadedAddon: ILoadedAddon = {\n      instance,\n      dispose: instance.dispose,\n      isDisposed: false\n    };\n    this._addons.push(loadedAddon);\n    instance.dispose = () => this._wrappedAddonDispose(loadedAddon);\n    instance.activate(terminal as any);\n  }\n\n  private _wrappedAddonDispose(loadedAddon: ILoadedAddon): void {\n    if (loadedAddon.isDisposed) {\n      // Do nothing if already disposed\n      return;\n    }\n    let index = -1;\n    for (let i = 0; i < this._addons.length; i++) {\n      if (this._addons[i] === loadedAddon) {\n        index = i;\n        break;\n      }\n    }\n    if (index === -1) {\n      throw new Error('Could not dispose an addon that has not been loaded');\n    }\n    loadedAddon.isDisposed = true;\n    loadedAddon.dispose.apply(loadedAddon.instance);\n    this._addons.splice(index, 1);\n  }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBuffer as IBufferApi, IBufferLine as IBufferLineApi, IBufferCell as IBufferCellApi } from '@xterm/xterm';\nimport { IBuffer } from 'common/buffer/Types';\nimport { BufferLineApiView } from 'common/public/BufferLineApiView';\nimport { CellData } from 'common/buffer/CellData';\n\nexport class BufferApiView implements IBufferApi {\n  constructor(\n    private _buffer: IBuffer,\n    public readonly type: 'normal' | 'alternate'\n  ) { }\n\n  public init(buffer: IBuffer): BufferApiView {\n    this._buffer = buffer;\n    return this;\n  }\n\n  public get cursorY(): number { return this._buffer.y; }\n  public get cursorX(): number { return this._buffer.x; }\n  public get viewportY(): number { return this._buffer.ydisp; }\n  public get baseY(): number { return this._buffer.ybase; }\n  public get length(): number { return this._buffer.lines.length; }\n  public getLine(y: number): IBufferLineApi | undefined {\n    const line = this._buffer.lines.get(y);\n    if (!line) {\n      return undefined;\n    }\n    return new BufferLineApiView(line);\n  }\n  public getNullCell(): IBufferCellApi { return new CellData(); }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CellData } from 'common/buffer/CellData';\nimport { IBufferLine, ICellData } from 'common/Types';\nimport { IBufferCell as IBufferCellApi, IBufferLine as IBufferLineApi } from '@xterm/xterm';\n\nexport class BufferLineApiView implements IBufferLineApi {\n  constructor(private _line: IBufferLine) { }\n\n  public get isWrapped(): boolean { return this._line.isWrapped; }\n  public get length(): number { return this._line.length; }\n  public getCell(x: number, cell?: IBufferCellApi): IBufferCellApi | undefined {\n    if (x < 0 || x >= this._line.length) {\n      return undefined;\n    }\n\n    if (cell) {\n      this._line.loadCell(x, cell as ICellData);\n      return cell;\n    }\n    return this._line.loadCell(x, new CellData());\n  }\n  public translateToString(trimRight?: boolean, startColumn?: number, endColumn?: number): string {\n    return this._line.translateToString(trimRight, startColumn, endColumn);\n  }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBuffer as IBufferApi, IBufferNamespace as IBufferNamespaceApi } from '@xterm/xterm';\nimport { BufferApiView } from 'common/public/BufferApiView';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { ICoreTerminal } from 'common/Types';\nimport { Disposable } from 'common/Lifecycle';\n\nexport class BufferNamespaceApi extends Disposable implements IBufferNamespaceApi {\n  private _normal: BufferApiView;\n  private _alternate: BufferApiView;\n\n  private readonly _onBufferChange = this.register(new EventEmitter<IBufferApi>());\n  public readonly onBufferChange = this._onBufferChange.event;\n\n  constructor(private _core: ICoreTerminal) {\n    super();\n    this._normal = new BufferApiView(this._core.buffers.normal, 'normal');\n    this._alternate = new BufferApiView(this._core.buffers.alt, 'alternate');\n    this._core.buffers.onBufferActivate(() => this._onBufferChange.fire(this.active));\n  }\n  public get active(): IBufferApi {\n    if (this._core.buffers.active === this._core.buffers.normal) { return this.normal; }\n    if (this._core.buffers.active === this._core.buffers.alt) { return this.alternate; }\n    throw new Error('Active buffer is neither normal nor alternate');\n  }\n  public get normal(): IBufferApi {\n    return this._normal.init(this._core.buffers.normal);\n  }\n  public get alternate(): IBufferApi {\n    return this._alternate.init(this._core.buffers.alt);\n  }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IParams } from 'common/parser/Types';\nimport { IDisposable, IFunctionIdentifier, IParser } from '@xterm/xterm';\nimport { ICoreTerminal } from 'common/Types';\n\nexport class ParserApi implements IParser {\n  constructor(private _core: ICoreTerminal) { }\n\n  public registerCsiHandler(id: IFunctionIdentifier, callback: (params: (number | number[])[]) => boolean | Promise<boolean>): IDisposable {\n    return this._core.registerCsiHandler(id, (params: IParams) => callback(params.toArray()));\n  }\n  public addCsiHandler(id: IFunctionIdentifier, callback: (params: (number | number[])[]) => boolean | Promise<boolean>): IDisposable {\n    return this.registerCsiHandler(id, callback);\n  }\n  public registerDcsHandler(id: IFunctionIdentifier, callback: (data: string, param: (number | number[])[]) => boolean | Promise<boolean>): IDisposable {\n    return this._core.registerDcsHandler(id, (data: string, params: IParams) => callback(data, params.toArray()));\n  }\n  public addDcsHandler(id: IFunctionIdentifier, callback: (data: string, param: (number | number[])[]) => boolean | Promise<boolean>): IDisposable {\n    return this.registerDcsHandler(id, callback);\n  }\n  public registerEscHandler(id: IFunctionIdentifier, handler: () => boolean | Promise<boolean>): IDisposable {\n    return this._core.registerEscHandler(id, handler);\n  }\n  public addEscHandler(id: IFunctionIdentifier, handler: () => boolean | Promise<boolean>): IDisposable {\n    return this.registerEscHandler(id, handler);\n  }\n  public registerOscHandler(ident: number, callback: (data: string) => boolean | Promise<boolean>): IDisposable {\n    return this._core.registerOscHandler(ident, callback);\n  }\n  public addOscHandler(ident: number, callback: (data: string) => boolean | Promise<boolean>): IDisposable {\n    return this.registerOscHandler(ident, callback);\n  }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICoreTerminal } from 'common/Types';\nimport { IUnicodeHandling, IUnicodeVersionProvider } from '@xterm/xterm';\n\nexport class UnicodeApi implements IUnicodeHandling {\n  constructor(private _core: ICoreTerminal) { }\n\n  public register(provider: IUnicodeVersionProvider): void {\n    this._core.unicodeService.register(provider);\n  }\n\n  public get versions(): string[] {\n    return this._core.unicodeService.versions;\n  }\n\n  public get activeVersion(): string {\n    return this._core.unicodeService.activeVersion;\n  }\n\n  public set activeVersion(version: string) {\n    this._core.unicodeService.activeVersion = version;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { EventEmitter } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\nimport { IAttributeData, IBufferLine, ScrollSource } from 'common/Types';\nimport { BufferSet } from 'common/buffer/BufferSet';\nimport { IBuffer, IBufferSet } from 'common/buffer/Types';\nimport { IBufferService, IOptionsService } from 'common/services/Services';\n\nexport const MINIMUM_COLS = 2; // Less than 2 can mess with wide chars\nexport const MINIMUM_ROWS = 1;\n\nexport class BufferService extends Disposable implements IBufferService {\n  public serviceBrand: any;\n\n  public cols: number;\n  public rows: number;\n  public buffers: IBufferSet;\n  /** Whether the user is scrolling (locks the scroll position) */\n  public isUserScrolling: boolean = false;\n\n  private readonly _onResize = this.register(new EventEmitter<{ cols: number, rows: number }>());\n  public readonly onResize = this._onResize.event;\n  private readonly _onScroll = this.register(new EventEmitter<number>());\n  public readonly onScroll = this._onScroll.event;\n\n  public get buffer(): IBuffer { return this.buffers.active; }\n\n  /** An IBufferline to clone/copy from for new blank lines */\n  private _cachedBlankLine: IBufferLine | undefined;\n\n  constructor(@IOptionsService optionsService: IOptionsService) {\n    super();\n    this.cols = Math.max(optionsService.rawOptions.cols || 0, MINIMUM_COLS);\n    this.rows = Math.max(optionsService.rawOptions.rows || 0, MINIMUM_ROWS);\n    this.buffers = this.register(new BufferSet(optionsService, this));\n  }\n\n  public resize(cols: number, rows: number): void {\n    this.cols = cols;\n    this.rows = rows;\n    this.buffers.resize(cols, rows);\n    // TODO: This doesn't fire when scrollback changes - add a resize event to BufferSet and forward\n    //       event\n    this._onResize.fire({ cols, rows });\n  }\n\n  public reset(): void {\n    this.buffers.reset();\n    this.isUserScrolling = false;\n  }\n\n  /**\n   * Scroll the terminal down 1 row, creating a blank line.\n   * @param eraseAttr The attribute data to use the for blank line.\n   * @param isWrapped Whether the new line is wrapped from the previous line.\n   */\n  public scroll(eraseAttr: IAttributeData, isWrapped: boolean = false): void {\n    const buffer = this.buffer;\n\n    let newLine: IBufferLine | undefined;\n    newLine = this._cachedBlankLine;\n    if (!newLine || newLine.length !== this.cols || newLine.getFg(0) !== eraseAttr.fg || newLine.getBg(0) !== eraseAttr.bg) {\n      newLine = buffer.getBlankLine(eraseAttr, isWrapped);\n      this._cachedBlankLine = newLine;\n    }\n    newLine.isWrapped = isWrapped;\n\n    const topRow = buffer.ybase + buffer.scrollTop;\n    const bottomRow = buffer.ybase + buffer.scrollBottom;\n\n    if (buffer.scrollTop === 0) {\n      // Determine whether the buffer is going to be trimmed after insertion.\n      const willBufferBeTrimmed = buffer.lines.isFull;\n\n      // Insert the line using the fastest method\n      if (bottomRow === buffer.lines.length - 1) {\n        if (willBufferBeTrimmed) {\n          buffer.lines.recycle().copyFrom(newLine);\n        } else {\n          buffer.lines.push(newLine.clone());\n        }\n      } else {\n        buffer.lines.splice(bottomRow + 1, 0, newLine.clone());\n      }\n\n      // Only adjust ybase and ydisp when the buffer is not trimmed\n      if (!willBufferBeTrimmed) {\n        buffer.ybase++;\n        // Only scroll the ydisp with ybase if the user has not scrolled up\n        if (!this.isUserScrolling) {\n          buffer.ydisp++;\n        }\n      } else {\n        // When the buffer is full and the user has scrolled up, keep the text\n        // stable unless ydisp is right at the top\n        if (this.isUserScrolling) {\n          buffer.ydisp = Math.max(buffer.ydisp - 1, 0);\n        }\n      }\n    } else {\n      // scrollTop is non-zero which means no line will be going to the\n      // scrollback, instead we can just shift them in-place.\n      const scrollRegionHeight = bottomRow - topRow + 1 /* as it's zero-based */;\n      buffer.lines.shiftElements(topRow + 1, scrollRegionHeight - 1, -1);\n      buffer.lines.set(bottomRow, newLine.clone());\n    }\n\n    // Move the viewport to the bottom of the buffer unless the user is\n    // scrolling.\n    if (!this.isUserScrolling) {\n      buffer.ydisp = buffer.ybase;\n    }\n\n    this._onScroll.fire(buffer.ydisp);\n  }\n\n  /**\n   * Scroll the display of the terminal\n   * @param disp The number of lines to scroll down (negative scroll up).\n   * @param suppressScrollEvent Don't emit the scroll event as scrollLines. This is used\n   * to avoid unwanted events being handled by the viewport when the event was triggered from the\n   * viewport originally.\n   */\n  public scrollLines(disp: number, suppressScrollEvent?: boolean, source?: ScrollSource): void {\n    const buffer = this.buffer;\n    if (disp < 0) {\n      if (buffer.ydisp === 0) {\n        return;\n      }\n      this.isUserScrolling = true;\n    } else if (disp + buffer.ydisp >= buffer.ybase) {\n      this.isUserScrolling = false;\n    }\n\n    const oldYdisp = buffer.ydisp;\n    buffer.ydisp = Math.max(Math.min(buffer.ydisp + disp, buffer.ybase), 0);\n\n    // No change occurred, don't trigger scroll/refresh\n    if (oldYdisp === buffer.ydisp) {\n      return;\n    }\n\n    if (!suppressScrollEvent) {\n      this._onScroll.fire(buffer.ydisp);\n    }\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharsetService } from 'common/services/Services';\nimport { ICharset } from 'common/Types';\n\nexport class CharsetService implements ICharsetService {\n  public serviceBrand: any;\n\n  public charset: ICharset | undefined;\n  public glevel: number = 0;\n\n  private _charsets: (ICharset | undefined)[] = [];\n\n  public reset(): void {\n    this.charset = undefined;\n    this._charsets = [];\n    this.glevel = 0;\n  }\n\n  public setgLevel(g: number): void {\n    this.glevel = g;\n    this.charset = this._charsets[g];\n  }\n\n  public setgCharset(g: number, charset: ICharset | undefined): void {\n    this._charsets[g] = charset;\n    if (this.glevel === g) {\n      this.charset = charset;\n    }\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\nimport { IBufferService, ICoreService, ICoreMouseService } from 'common/services/Services';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { ICoreMouseProtocol, ICoreMouseEvent, CoreMouseEncoding, CoreMouseEventType, CoreMouseButton, CoreMouseAction } from 'common/Types';\nimport { Disposable } from 'common/Lifecycle';\n\n/**\n * Supported default protocols.\n */\nconst DEFAULT_PROTOCOLS: { [key: string]: ICoreMouseProtocol } = {\n  /**\n   * NONE\n   * Events: none\n   * Modifiers: none\n   */\n  NONE: {\n    events: CoreMouseEventType.NONE,\n    restrict: () => false\n  },\n  /**\n   * X10\n   * Events: mousedown\n   * Modifiers: none\n   */\n  X10: {\n    events: CoreMouseEventType.DOWN,\n    restrict: (e: ICoreMouseEvent) => {\n      // no wheel, no move, no up\n      if (e.button === CoreMouseButton.WHEEL || e.action !== CoreMouseAction.DOWN) {\n        return false;\n      }\n      // no modifiers\n      e.ctrl = false;\n      e.alt = false;\n      e.shift = false;\n      return true;\n    }\n  },\n  /**\n   * VT200\n   * Events: mousedown / mouseup / wheel\n   * Modifiers: all\n   */\n  VT200: {\n    events: CoreMouseEventType.DOWN | CoreMouseEventType.UP | CoreMouseEventType.WHEEL,\n    restrict: (e: ICoreMouseEvent) => {\n      // no move\n      if (e.action === CoreMouseAction.MOVE) {\n        return false;\n      }\n      return true;\n    }\n  },\n  /**\n   * DRAG\n   * Events: mousedown / mouseup / wheel / mousedrag\n   * Modifiers: all\n   */\n  DRAG: {\n    events: CoreMouseEventType.DOWN | CoreMouseEventType.UP | CoreMouseEventType.WHEEL | CoreMouseEventType.DRAG,\n    restrict: (e: ICoreMouseEvent) => {\n      // no move without button\n      if (e.action === CoreMouseAction.MOVE && e.button === CoreMouseButton.NONE) {\n        return false;\n      }\n      return true;\n    }\n  },\n  /**\n   * ANY\n   * Events: all mouse related events\n   * Modifiers: all\n   */\n  ANY: {\n    events:\n      CoreMouseEventType.DOWN | CoreMouseEventType.UP | CoreMouseEventType.WHEEL\n      | CoreMouseEventType.DRAG | CoreMouseEventType.MOVE,\n    restrict: (e: ICoreMouseEvent) => true\n  }\n};\n\nconst enum Modifiers {\n  SHIFT = 4,\n  ALT = 8,\n  CTRL = 16\n}\n\n// helper for default encoders to generate the event code.\nfunction eventCode(e: ICoreMouseEvent, isSGR: boolean): number {\n  let code = (e.ctrl ? Modifiers.CTRL : 0) | (e.shift ? Modifiers.SHIFT : 0) | (e.alt ? Modifiers.ALT : 0);\n  if (e.button === CoreMouseButton.WHEEL) {\n    code |= 64;\n    code |= e.action;\n  } else {\n    code |= e.button & 3;\n    if (e.button & 4) {\n      code |= 64;\n    }\n    if (e.button & 8) {\n      code |= 128;\n    }\n    if (e.action === CoreMouseAction.MOVE) {\n      code |= CoreMouseAction.MOVE;\n    } else if (e.action === CoreMouseAction.UP && !isSGR) {\n      // special case - only SGR can report button on release\n      // all others have to go with NONE\n      code |= CoreMouseButton.NONE;\n    }\n  }\n  return code;\n}\n\nconst S = String.fromCharCode;\n\n/**\n * Supported default encodings.\n */\nconst DEFAULT_ENCODINGS: { [key: string]: CoreMouseEncoding } = {\n  /**\n   * DEFAULT - CSI M Pb Px Py\n   * Single byte encoding for coords and event code.\n   * Can encode values up to 223 (1-based).\n   */\n  DEFAULT: (e: ICoreMouseEvent) => {\n    const params = [eventCode(e, false) + 32, e.col + 32, e.row + 32];\n    // supress mouse report if we exceed addressible range\n    // Note this is handled differently by emulators\n    // - xterm:         sends 0;0 coords instead\n    // - vte, konsole:  no report\n    if (params[0] > 255 || params[1] > 255 || params[2] > 255) {\n      return '';\n    }\n    return `\\x1b[M${S(params[0])}${S(params[1])}${S(params[2])}`;\n  },\n  /**\n   * SGR - CSI < Pb ; Px ; Py M|m\n   * No encoding limitation.\n   * Can report button on release and works with a well formed sequence.\n   */\n  SGR: (e: ICoreMouseEvent) => {\n    const final = (e.action === CoreMouseAction.UP && e.button !== CoreMouseButton.WHEEL) ? 'm' : 'M';\n    return `\\x1b[<${eventCode(e, true)};${e.col};${e.row}${final}`;\n  },\n  SGR_PIXELS: (e: ICoreMouseEvent) => {\n    const final = (e.action === CoreMouseAction.UP && e.button !== CoreMouseButton.WHEEL) ? 'm' : 'M';\n    return `\\x1b[<${eventCode(e, true)};${e.x};${e.y}${final}`;\n  }\n};\n\n/**\n * CoreMouseService\n *\n * Provides mouse tracking reports with different protocols and encodings.\n *  - protocols: NONE (default), X10, VT200, DRAG, ANY\n *  - encodings: DEFAULT, SGR (UTF8, URXVT removed in #2507)\n *\n * Custom protocols/encodings can be added by `addProtocol` / `addEncoding`.\n * To activate a protocol/encoding, set `activeProtocol` / `activeEncoding`.\n * Switching a protocol will send a notification event `onProtocolChange`\n * with a list of needed events to track.\n *\n * The service handles the mouse tracking state and decides whether to send\n * a tracking report to the backend based on protocol and encoding limitations.\n * To send a mouse event call `triggerMouseEvent`.\n */\nexport class CoreMouseService extends Disposable implements ICoreMouseService {\n  private _protocols: { [name: string]: ICoreMouseProtocol } = {};\n  private _encodings: { [name: string]: CoreMouseEncoding } = {};\n  private _activeProtocol: string = '';\n  private _activeEncoding: string = '';\n  private _lastEvent: ICoreMouseEvent | null = null;\n\n  private readonly _onProtocolChange = this.register(new EventEmitter<CoreMouseEventType>());\n  public readonly onProtocolChange =  this._onProtocolChange.event;\n\n  constructor(\n    @IBufferService private readonly _bufferService: IBufferService,\n    @ICoreService private readonly _coreService: ICoreService\n  ) {\n    super();\n    // register default protocols and encodings\n    for (const name of Object.keys(DEFAULT_PROTOCOLS)) this.addProtocol(name, DEFAULT_PROTOCOLS[name]);\n    for (const name of Object.keys(DEFAULT_ENCODINGS)) this.addEncoding(name, DEFAULT_ENCODINGS[name]);\n    // call reset to set defaults\n    this.reset();\n  }\n\n  public addProtocol(name: string, protocol: ICoreMouseProtocol): void {\n    this._protocols[name] = protocol;\n  }\n\n  public addEncoding(name: string, encoding: CoreMouseEncoding): void {\n    this._encodings[name] = encoding;\n  }\n\n  public get activeProtocol(): string {\n    return this._activeProtocol;\n  }\n\n  public get areMouseEventsActive(): boolean {\n    return this._protocols[this._activeProtocol].events !== 0;\n  }\n\n  public set activeProtocol(name: string) {\n    if (!this._protocols[name]) {\n      throw new Error(`unknown protocol \"${name}\"`);\n    }\n    this._activeProtocol = name;\n    this._onProtocolChange.fire(this._protocols[name].events);\n  }\n\n  public get activeEncoding(): string {\n    return this._activeEncoding;\n  }\n\n  public set activeEncoding(name: string) {\n    if (!this._encodings[name]) {\n      throw new Error(`unknown encoding \"${name}\"`);\n    }\n    this._activeEncoding = name;\n  }\n\n  public reset(): void {\n    this.activeProtocol = 'NONE';\n    this.activeEncoding = 'DEFAULT';\n    this._lastEvent = null;\n  }\n\n  /**\n   * Triggers a mouse event to be sent.\n   *\n   * Returns true if the event passed all protocol restrictions and a report\n   * was sent, otherwise false. The return value may be used to decide whether\n   * the default event action in the bowser component should be omitted.\n   *\n   * Note: The method will change values of the given event object\n   * to fullfill protocol and encoding restrictions.\n   */\n  public triggerMouseEvent(e: ICoreMouseEvent): boolean {\n    // range check for col/row\n    if (e.col < 0 || e.col >= this._bufferService.cols\n      || e.row < 0 || e.row >= this._bufferService.rows) {\n      return false;\n    }\n\n    // filter nonsense combinations of button + action\n    if (e.button === CoreMouseButton.WHEEL && e.action === CoreMouseAction.MOVE) {\n      return false;\n    }\n    if (e.button === CoreMouseButton.NONE && e.action !== CoreMouseAction.MOVE) {\n      return false;\n    }\n    if (e.button !== CoreMouseButton.WHEEL && (e.action === CoreMouseAction.LEFT || e.action === CoreMouseAction.RIGHT)) {\n      return false;\n    }\n\n    // report 1-based coords\n    e.col++;\n    e.row++;\n\n    // debounce move events at grid or pixel level\n    if (e.action === CoreMouseAction.MOVE\n      && this._lastEvent\n      && this._equalEvents(this._lastEvent, e, this._activeEncoding === 'SGR_PIXELS')\n    ) {\n      return false;\n    }\n\n    // apply protocol restrictions\n    if (!this._protocols[this._activeProtocol].restrict(e)) {\n      return false;\n    }\n\n    // encode report and send\n    const report = this._encodings[this._activeEncoding](e);\n    if (report) {\n      // always send DEFAULT as binary data\n      if (this._activeEncoding === 'DEFAULT') {\n        this._coreService.triggerBinaryEvent(report);\n      } else {\n        this._coreService.triggerDataEvent(report, true);\n      }\n    }\n\n    this._lastEvent = e;\n\n    return true;\n  }\n\n  public explainEvents(events: CoreMouseEventType): { [event: string]: boolean } {\n    return {\n      down: !!(events & CoreMouseEventType.DOWN),\n      up: !!(events & CoreMouseEventType.UP),\n      drag: !!(events & CoreMouseEventType.DRAG),\n      move: !!(events & CoreMouseEventType.MOVE),\n      wheel: !!(events & CoreMouseEventType.WHEEL)\n    };\n  }\n\n  private _equalEvents(e1: ICoreMouseEvent, e2: ICoreMouseEvent, pixels: boolean): boolean {\n    if (pixels) {\n      if (e1.x !== e2.x) return false;\n      if (e1.y !== e2.y) return false;\n    } else {\n      if (e1.col !== e2.col) return false;\n      if (e1.row !== e2.row) return false;\n    }\n    if (e1.button !== e2.button) return false;\n    if (e1.action !== e2.action) return false;\n    if (e1.ctrl !== e2.ctrl) return false;\n    if (e1.alt !== e2.alt) return false;\n    if (e1.shift !== e2.shift) return false;\n    return true;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { clone } from 'common/Clone';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\nimport { IDecPrivateModes, IModes } from 'common/Types';\nimport { IBufferService, ICoreService, ILogService, IOptionsService } from 'common/services/Services';\n\nconst DEFAULT_MODES: IModes = Object.freeze({\n  insertMode: false\n});\n\nconst DEFAULT_DEC_PRIVATE_MODES: IDecPrivateModes = Object.freeze({\n  applicationCursorKeys: false,\n  applicationKeypad: false,\n  bracketedPasteMode: false,\n  origin: false,\n  reverseWraparound: false,\n  sendFocus: false,\n  wraparound: true // defaults: xterm - true, vt100 - false\n});\n\nexport class CoreService extends Disposable implements ICoreService {\n  public serviceBrand: any;\n\n  public isCursorInitialized: boolean = false;\n  public isCursorHidden: boolean = false;\n  public modes: IModes;\n  public decPrivateModes: IDecPrivateModes;\n\n  private readonly _onData = this.register(new EventEmitter<string>());\n  public readonly onData = this._onData.event;\n  private readonly _onUserInput = this.register(new EventEmitter<void>());\n  public readonly onUserInput = this._onUserInput.event;\n  private readonly _onBinary = this.register(new EventEmitter<string>());\n  public readonly onBinary = this._onBinary.event;\n  private readonly _onRequestScrollToBottom = this.register(new EventEmitter<void>());\n  public readonly onRequestScrollToBottom = this._onRequestScrollToBottom.event;\n\n  constructor(\n    @IBufferService private readonly _bufferService: IBufferService,\n    @ILogService private readonly _logService: ILogService,\n    @IOptionsService private readonly _optionsService: IOptionsService\n  ) {\n    super();\n    this.modes = clone(DEFAULT_MODES);\n    this.decPrivateModes = clone(DEFAULT_DEC_PRIVATE_MODES);\n  }\n\n  public reset(): void {\n    this.modes = clone(DEFAULT_MODES);\n    this.decPrivateModes = clone(DEFAULT_DEC_PRIVATE_MODES);\n  }\n\n  public triggerDataEvent(data: string, wasUserInput: boolean = false): void {\n    // Prevents all events to pty process if stdin is disabled\n    if (this._optionsService.rawOptions.disableStdin) {\n      return;\n    }\n\n    // Input is being sent to the terminal, the terminal should focus the prompt.\n    const buffer = this._bufferService.buffer;\n    if (wasUserInput && this._optionsService.rawOptions.scrollOnUserInput && buffer.ybase !== buffer.ydisp) {\n      this._onRequestScrollToBottom.fire();\n    }\n\n    // Fire onUserInput so listeners can react as well (eg. clear selection)\n    if (wasUserInput) {\n      this._onUserInput.fire();\n    }\n\n    // Fire onData API\n    this._logService.debug(`sending data \"${data}\"`, () => data.split('').map(e => e.charCodeAt(0)));\n    this._onData.fire(data);\n  }\n\n  public triggerBinaryEvent(data: string): void {\n    if (this._optionsService.rawOptions.disableStdin) {\n      return;\n    }\n    this._logService.debug(`sending binary \"${data}\"`, () => data.split('').map(e => e.charCodeAt(0)));\n    this._onBinary.fire(data);\n  }\n}\n", "/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { css } from 'common/Color';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { Disposable, toDisposable } from 'common/Lifecycle';\nimport { IDecorationService, IInternalDecoration } from 'common/services/Services';\nimport { SortedList } from 'common/SortedList';\nimport { IColor } from 'common/Types';\nimport { IDecoration, IDecorationOptions, IMarker } from '@xterm/xterm';\n\n// Work variables to avoid garbage collection\nlet $xmin = 0;\nlet $xmax = 0;\n\nexport class DecorationService extends Disposable implements IDecorationService {\n  public serviceBrand: any;\n\n  /**\n   * A list of all decorations, sorted by the marker's line value. This relies on the fact that\n   * while marker line values do change, they should all change by the same amount so this should\n   * never become out of order.\n   */\n  private readonly _decorations: SortedList<IInternalDecoration> = new SortedList(e => e?.marker.line);\n\n  private readonly _onDecorationRegistered = this.register(new EventEmitter<IInternalDecoration>());\n  public readonly onDecorationRegistered = this._onDecorationRegistered.event;\n  private readonly _onDecorationRemoved = this.register(new EventEmitter<IInternalDecoration>());\n  public readonly onDecorationRemoved = this._onDecorationRemoved.event;\n\n  public get decorations(): IterableIterator<IInternalDecoration> { return this._decorations.values(); }\n\n  constructor() {\n    super();\n\n    this.register(toDisposable(() => this.reset()));\n  }\n\n  public registerDecoration(options: IDecorationOptions): IDecoration | undefined {\n    if (options.marker.isDisposed) {\n      return undefined;\n    }\n    const decoration = new Decoration(options);\n    if (decoration) {\n      const markerDispose = decoration.marker.onDispose(() => decoration.dispose());\n      decoration.onDispose(() => {\n        if (decoration) {\n          if (this._decorations.delete(decoration)) {\n            this._onDecorationRemoved.fire(decoration);\n          }\n          markerDispose.dispose();\n        }\n      });\n      this._decorations.insert(decoration);\n      this._onDecorationRegistered.fire(decoration);\n    }\n    return decoration;\n  }\n\n  public reset(): void {\n    for (const d of this._decorations.values()) {\n      d.dispose();\n    }\n    this._decorations.clear();\n  }\n\n  public *getDecorationsAtCell(x: number, line: number, layer?: 'bottom' | 'top'): IterableIterator<IInternalDecoration> {\n    let xmin = 0;\n    let xmax = 0;\n    for (const d of this._decorations.getKeyIterator(line)) {\n      xmin = d.options.x ?? 0;\n      xmax = xmin + (d.options.width ?? 1);\n      if (x >= xmin && x < xmax && (!layer || (d.options.layer ?? 'bottom') === layer)) {\n        yield d;\n      }\n    }\n  }\n\n  public forEachDecorationAtCell(x: number, line: number, layer: 'bottom' | 'top' | undefined, callback: (decoration: IInternalDecoration) => void): void {\n    this._decorations.forEachByKey(line, d => {\n      $xmin = d.options.x ?? 0;\n      $xmax = $xmin + (d.options.width ?? 1);\n      if (x >= $xmin && x < $xmax && (!layer || (d.options.layer ?? 'bottom') === layer)) {\n        callback(d);\n      }\n    });\n  }\n}\n\nclass Decoration extends Disposable implements IInternalDecoration {\n  public readonly marker: IMarker;\n  public element: HTMLElement | undefined;\n  public get isDisposed(): boolean { return this._isDisposed; }\n\n  public readonly onRenderEmitter = this.register(new EventEmitter<HTMLElement>());\n  public readonly onRender = this.onRenderEmitter.event;\n  private readonly _onDispose = this.register(new EventEmitter<void>());\n  public readonly onDispose = this._onDispose.event;\n\n  private _cachedBg: IColor | undefined | null = null;\n  public get backgroundColorRGB(): IColor | undefined {\n    if (this._cachedBg === null) {\n      if (this.options.backgroundColor) {\n        this._cachedBg = css.toColor(this.options.backgroundColor);\n      } else {\n        this._cachedBg = undefined;\n      }\n    }\n    return this._cachedBg;\n  }\n\n  private _cachedFg: IColor | undefined | null = null;\n  public get foregroundColorRGB(): IColor | undefined {\n    if (this._cachedFg === null) {\n      if (this.options.foregroundColor) {\n        this._cachedFg = css.toColor(this.options.foregroundColor);\n      } else {\n        this._cachedFg = undefined;\n      }\n    }\n    return this._cachedFg;\n  }\n\n  constructor(\n    public readonly options: IDecorationOptions\n  ) {\n    super();\n    this.marker = options.marker;\n    if (this.options.overviewRulerOptions && !this.options.overviewRulerOptions.position) {\n      this.options.overviewRulerOptions.position = 'full';\n    }\n  }\n\n  public override dispose(): void {\n    this._onDispose.fire();\n    super.dispose();\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n *\n * This was heavily inspired from microsoft/vscode's dependency injection system (MIT).\n */\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IInstantiationService, IServiceIdentifier } from 'common/services/Services';\nimport { getServiceDependencies } from 'common/services/ServiceRegistry';\n\nexport class ServiceCollection {\n\n  private _entries = new Map<IServiceIdentifier<any>, any>();\n\n  constructor(...entries: [IServiceIdentifier<any>, any][]) {\n    for (const [id, service] of entries) {\n      this.set(id, service);\n    }\n  }\n\n  public set<T>(id: IServiceIdentifier<T>, instance: T): T {\n    const result = this._entries.get(id);\n    this._entries.set(id, instance);\n    return result;\n  }\n\n  public forEach(callback: (id: IServiceIdentifier<any>, instance: any) => any): void {\n    for (const [key, value] of this._entries.entries()) {\n      callback(key, value);\n    }\n  }\n\n  public has(id: IServiceIdentifier<any>): boolean {\n    return this._entries.has(id);\n  }\n\n  public get<T>(id: IServiceIdentifier<T>): T | undefined {\n    return this._entries.get(id);\n  }\n}\n\nexport class InstantiationService implements IInstantiationService {\n  public serviceBrand: undefined;\n\n  private readonly _services: ServiceCollection = new ServiceCollection();\n\n  constructor() {\n    this._services.set(IInstantiationService, this);\n  }\n\n  public setService<T>(id: IServiceIdentifier<T>, instance: T): void {\n    this._services.set(id, instance);\n  }\n\n  public getService<T>(id: IServiceIdentifier<T>): T | undefined {\n    return this._services.get(id);\n  }\n\n  public createInstance<T>(ctor: any, ...args: any[]): T {\n    const serviceDependencies = getServiceDependencies(ctor).sort((a, b) => a.index - b.index);\n\n    const serviceArgs: any[] = [];\n    for (const dependency of serviceDependencies) {\n      const service = this._services.get(dependency.id);\n      if (!service) {\n        throw new Error(`[createInstance] ${ctor.name} depends on UNKNOWN service ${dependency.id}.`);\n      }\n      serviceArgs.push(service);\n    }\n\n    const firstServiceArgPos = serviceDependencies.length > 0 ? serviceDependencies[0].index : args.length;\n\n    // check for argument mismatches, adjust static args if needed\n    if (args.length !== firstServiceArgPos) {\n      throw new Error(`[createInstance] First service dependency of ${ctor.name} at position ${firstServiceArgPos + 1} conflicts with ${args.length} static arguments`);\n    }\n\n    // now create the instance\n    return new ctor(...[...args, ...serviceArgs]);\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Disposable } from 'common/Lifecycle';\nimport { ILogService, IOptionsService, LogLevelEnum } from 'common/services/Services';\n\ntype LogType = (message?: any, ...optionalParams: any[]) => void;\n\ninterface IConsole {\n  log: LogType;\n  error: LogType;\n  info: LogType;\n  trace: LogType;\n  warn: LogType;\n}\n\n// console is available on both node.js and browser contexts but the common\n// module doesn't depend on them so we need to explicitly declare it.\ndeclare const console: IConsole;\n\nconst optionsKeyToLogLevel: { [key: string]: LogLevelEnum } = {\n  trace: LogLevelEnum.TRACE,\n  debug: LogLevelEnum.DEBUG,\n  info: LogLevelEnum.INFO,\n  warn: LogLevelEnum.WARN,\n  error: LogLevelEnum.ERROR,\n  off: LogLevelEnum.OFF\n};\n\nconst LOG_PREFIX = 'xterm.js: ';\n\nexport class LogService extends Disposable implements ILogService {\n  public serviceBrand: any;\n\n  private _logLevel: LogLevelEnum = LogLevelEnum.OFF;\n  public get logLevel(): LogLevelEnum { return this._logLevel; }\n\n  constructor(\n    @IOptionsService private readonly _optionsService: IOptionsService\n  ) {\n    super();\n    this._updateLogLevel();\n    this.register(this._optionsService.onSpecificOptionChange('logLevel', () => this._updateLogLevel()));\n\n    // For trace logging, assume the latest created log service is valid\n    traceLogger = this;\n  }\n\n  private _updateLogLevel(): void {\n    this._logLevel = optionsKeyToLogLevel[this._optionsService.rawOptions.logLevel];\n  }\n\n  private _evalLazyOptionalParams(optionalParams: any[]): void {\n    for (let i = 0; i < optionalParams.length; i++) {\n      if (typeof optionalParams[i] === 'function') {\n        optionalParams[i] = optionalParams[i]();\n      }\n    }\n  }\n\n  private _log(type: LogType, message: string, optionalParams: any[]): void {\n    this._evalLazyOptionalParams(optionalParams);\n    type.call(console, (this._optionsService.options.logger ? '' : LOG_PREFIX) + message, ...optionalParams);\n  }\n\n  public trace(message: string, ...optionalParams: any[]): void {\n    if (this._logLevel <= LogLevelEnum.TRACE) {\n      this._log(this._optionsService.options.logger?.trace.bind(this._optionsService.options.logger) ?? console.log, message, optionalParams);\n    }\n  }\n\n  public debug(message: string, ...optionalParams: any[]): void {\n    if (this._logLevel <= LogLevelEnum.DEBUG) {\n      this._log(this._optionsService.options.logger?.debug.bind(this._optionsService.options.logger) ?? console.log, message, optionalParams);\n    }\n  }\n\n  public info(message: string, ...optionalParams: any[]): void {\n    if (this._logLevel <= LogLevelEnum.INFO) {\n      this._log(this._optionsService.options.logger?.info.bind(this._optionsService.options.logger) ?? console.info, message, optionalParams);\n    }\n  }\n\n  public warn(message: string, ...optionalParams: any[]): void {\n    if (this._logLevel <= LogLevelEnum.WARN) {\n      this._log(this._optionsService.options.logger?.warn.bind(this._optionsService.options.logger) ?? console.warn, message, optionalParams);\n    }\n  }\n\n  public error(message: string, ...optionalParams: any[]): void {\n    if (this._logLevel <= LogLevelEnum.ERROR) {\n      this._log(this._optionsService.options.logger?.error.bind(this._optionsService.options.logger) ?? console.error, message, optionalParams);\n    }\n  }\n}\n\nlet traceLogger: ILogService;\nexport function setTraceLogger(logger: ILogService): void {\n  traceLogger = logger;\n}\n\n/**\n * A decorator that can be used to automatically log trace calls to the decorated function.\n */\nexport function traceCall(_target: any, key: string, descriptor: any): any {\n  if (typeof descriptor.value !== 'function') {\n    throw new Error('not supported');\n  }\n  const fnKey = 'value';\n  const fn = descriptor.value;\n  descriptor[fnKey] = function (...args: any[]) {\n    // Early exit\n    if (traceLogger.logLevel !== LogLevelEnum.TRACE) {\n      return fn.apply(this, args);\n    }\n\n    traceLogger.trace(`GlyphRenderer#${fn.name}(${args.map(e => JSON.stringify(e)).join(', ')})`);\n    const result = fn.apply(this, args);\n    traceLogger.trace(`GlyphRenderer#${fn.name} return`, result);\n    return result;\n  };\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { EventEmitter } from 'common/EventEmitter';\nimport { Disposable, toDisposable } from 'common/Lifecycle';\nimport { isMac } from 'common/Platform';\nimport { CursorStyle, IDisposable } from 'common/Types';\nimport { FontWeight, IOptionsService, ITerminalOptions } from 'common/services/Services';\n\nexport const DEFAULT_OPTIONS: Readonly<Required<ITerminalOptions>> = {\n  cols: 80,\n  rows: 24,\n  cursorBlink: false,\n  cursorStyle: 'block',\n  cursorWidth: 1,\n  cursorInactiveStyle: 'outline',\n  customGlyphs: true,\n  drawBoldTextInBrightColors: true,\n  documentOverride: null,\n  fastScrollModifier: 'alt',\n  fastScrollSensitivity: 5,\n  fontFamily: 'courier-new, courier, monospace',\n  fontSize: 15,\n  fontWeight: 'normal',\n  fontWeightBold: 'bold',\n  ignoreBracketedPasteMode: false,\n  lineHeight: 1.0,\n  letterSpacing: 0,\n  linkHandler: null,\n  logLevel: 'info',\n  logger: null,\n  scrollback: 1000,\n  scrollOnUserInput: true,\n  scrollSensitivity: 1,\n  screenReaderMode: false,\n  smoothScrollDuration: 0,\n  macOptionIsMeta: false,\n  macOptionClickForcesSelection: false,\n  minimumContrastRatio: 1,\n  disableStdin: false,\n  allowProposedApi: false,\n  allowTransparency: false,\n  tabStopWidth: 8,\n  theme: {},\n  rescaleOverlappingGlyphs: false,\n  rightClickSelectsWord: isMac,\n  windowOptions: {},\n  windowsMode: false,\n  windowsPty: {},\n  wordSeparator: ' ()[]{}\\',\"`',\n  altClickMovesCursor: true,\n  convertEol: false,\n  termName: 'xterm',\n  cancelEvents: false,\n  overviewRulerWidth: 0\n};\n\nconst FONT_WEIGHT_OPTIONS: Extract<FontWeight, string>[] = ['normal', 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900'];\n\nexport class OptionsService extends Disposable implements IOptionsService {\n  public serviceBrand: any;\n\n  public readonly rawOptions: Required<ITerminalOptions>;\n  public options: Required<ITerminalOptions>;\n\n  private readonly _onOptionChange = this.register(new EventEmitter<keyof ITerminalOptions>());\n  public readonly onOptionChange = this._onOptionChange.event;\n\n  constructor(options: Partial<ITerminalOptions>) {\n    super();\n    // set the default value of each option\n    const defaultOptions = { ...DEFAULT_OPTIONS };\n    for (const key in options) {\n      if (key in defaultOptions) {\n        try {\n          const newValue = options[key];\n          defaultOptions[key] = this._sanitizeAndValidateOption(key, newValue);\n        } catch (e) {\n          console.error(e);\n        }\n      }\n    }\n\n    // set up getters and setters for each option\n    this.rawOptions = defaultOptions;\n    this.options = { ... defaultOptions };\n    this._setupOptions();\n\n    // Clear out options that could link outside xterm.js as they could easily cause an embedder\n    // memory leak\n    this.register(toDisposable(() => {\n      this.rawOptions.linkHandler = null;\n      this.rawOptions.documentOverride = null;\n    }));\n  }\n\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  public onSpecificOptionChange<T extends keyof ITerminalOptions>(key: T, listener: (value: ITerminalOptions[T]) => any): IDisposable {\n    return this.onOptionChange(eventKey => {\n      if (eventKey === key) {\n        listener(this.rawOptions[key]);\n      }\n    });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  public onMultipleOptionChange(keys: (keyof ITerminalOptions)[], listener: () => any): IDisposable {\n    return this.onOptionChange(eventKey => {\n      if (keys.indexOf(eventKey) !== -1) {\n        listener();\n      }\n    });\n  }\n\n  private _setupOptions(): void {\n    const getter = (propName: string): any => {\n      if (!(propName in DEFAULT_OPTIONS)) {\n        throw new Error(`No option with key \"${propName}\"`);\n      }\n      return this.rawOptions[propName];\n    };\n\n    const setter = (propName: string, value: any): void => {\n      if (!(propName in DEFAULT_OPTIONS)) {\n        throw new Error(`No option with key \"${propName}\"`);\n      }\n\n      value = this._sanitizeAndValidateOption(propName, value);\n      // Don't fire an option change event if they didn't change\n      if (this.rawOptions[propName] !== value) {\n        this.rawOptions[propName] = value;\n        this._onOptionChange.fire(propName);\n      }\n    };\n\n    for (const propName in this.rawOptions) {\n      const desc = {\n        get: getter.bind(this, propName),\n        set: setter.bind(this, propName)\n      };\n      Object.defineProperty(this.options, propName, desc);\n    }\n  }\n\n  private _sanitizeAndValidateOption(key: string, value: any): any {\n    switch (key) {\n      case 'cursorStyle':\n        if (!value) {\n          value = DEFAULT_OPTIONS[key];\n        }\n        if (!isCursorStyle(value)) {\n          throw new Error(`\"${value}\" is not a valid value for ${key}`);\n        }\n        break;\n      case 'wordSeparator':\n        if (!value) {\n          value = DEFAULT_OPTIONS[key];\n        }\n        break;\n      case 'fontWeight':\n      case 'fontWeightBold':\n        if (typeof value === 'number' && 1 <= value && value <= 1000) {\n          // already valid numeric value\n          break;\n        }\n        value = FONT_WEIGHT_OPTIONS.includes(value) ? value : DEFAULT_OPTIONS[key];\n        break;\n      case 'cursorWidth':\n        value = Math.floor(value);\n        // Fall through for bounds check\n      case 'lineHeight':\n      case 'tabStopWidth':\n        if (value < 1) {\n          throw new Error(`${key} cannot be less than 1, value: ${value}`);\n        }\n        break;\n      case 'minimumContrastRatio':\n        value = Math.max(1, Math.min(21, Math.round(value * 10) / 10));\n        break;\n      case 'scrollback':\n        value = Math.min(value, 4294967295);\n        if (value < 0) {\n          throw new Error(`${key} cannot be less than 0, value: ${value}`);\n        }\n        break;\n      case 'fastScrollSensitivity':\n      case 'scrollSensitivity':\n        if (value <= 0) {\n          throw new Error(`${key} cannot be less than or equal to 0, value: ${value}`);\n        }\n        break;\n      case 'rows':\n      case 'cols':\n        if (!value && value !== 0) {\n          throw new Error(`${key} must be numeric, value: ${value}`);\n        }\n        break;\n      case 'windowsPty':\n        value = value ?? {};\n        break;\n    }\n    return value;\n  }\n}\n\nfunction isCursorStyle(value: unknown): value is CursorStyle {\n  return value === 'block' || value === 'underline' || value === 'bar';\n}\n", "/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\nimport { IBufferService, IOscLinkService } from 'common/services/Services';\nimport { IMarker, IOscLinkData } from 'common/Types';\n\nexport class OscLinkService implements IOscLinkService {\n  public serviceBrand: any;\n\n  private _nextId = 1;\n\n  /**\n   * A map of the link key to link entry. This is used to add additional lines to links with ids.\n   */\n  private _entriesWithId: Map<string, IOscLinkEntryWithId> = new Map();\n\n  /**\n   * A map of the link id to the link entry. The \"link id\" (number) which is the numberic\n   * representation of a unique link should not be confused with \"id\" (string) which comes in with\n   * `id=` in the OSC link's properties.\n   */\n  private _dataByLinkId: Map<number, IOscLinkEntryNoId | IOscLinkEntryWithId> = new Map();\n\n  constructor(\n    @IBufferService private readonly _bufferService: IBufferService\n  ) {\n  }\n\n  public registerLink(data: IOscLinkData): number {\n    const buffer = this._bufferService.buffer;\n\n    // Links with no id will only ever be registered a single time\n    if (data.id === undefined) {\n      const marker = buffer.addMarker(buffer.ybase + buffer.y);\n      const entry: IOscLinkEntryNoId = {\n        data,\n        id: this._nextId++,\n        lines: [marker]\n      };\n      marker.onDispose(() => this._removeMarkerFromLink(entry, marker));\n      this._dataByLinkId.set(entry.id, entry);\n      return entry.id;\n    }\n\n    // Add the line to the link if it already exists\n    const castData = data as Required<IOscLinkData>;\n    const key = this._getEntryIdKey(castData);\n    const match = this._entriesWithId.get(key);\n    if (match) {\n      this.addLineToLink(match.id, buffer.ybase + buffer.y);\n      return match.id;\n    }\n\n    // Create the link\n    const marker = buffer.addMarker(buffer.ybase + buffer.y);\n    const entry: IOscLinkEntryWithId = {\n      id: this._nextId++,\n      key: this._getEntryIdKey(castData),\n      data: castData,\n      lines: [marker]\n    };\n    marker.onDispose(() => this._removeMarkerFromLink(entry, marker));\n    this._entriesWithId.set(entry.key, entry);\n    this._dataByLinkId.set(entry.id, entry);\n    return entry.id;\n  }\n\n  public addLineToLink(linkId: number, y: number): void {\n    const entry = this._dataByLinkId.get(linkId);\n    if (!entry) {\n      return;\n    }\n    if (entry.lines.every(e => e.line !== y)) {\n      const marker = this._bufferService.buffer.addMarker(y);\n      entry.lines.push(marker);\n      marker.onDispose(() => this._removeMarkerFromLink(entry, marker));\n    }\n  }\n\n  public getLinkData(linkId: number): IOscLinkData | undefined {\n    return this._dataByLinkId.get(linkId)?.data;\n  }\n\n  private _getEntryIdKey(linkData: Required<IOscLinkData>): string {\n    return `${linkData.id};;${linkData.uri}`;\n  }\n\n  private _removeMarkerFromLink(entry: IOscLinkEntryNoId | IOscLinkEntryWithId, marker: IMarker): void {\n    const index = entry.lines.indexOf(marker);\n    if (index === -1) {\n      return;\n    }\n    entry.lines.splice(index, 1);\n    if (entry.lines.length === 0) {\n      if (entry.data.id !== undefined) {\n        this._entriesWithId.delete((entry as IOscLinkEntryWithId).key);\n      }\n      this._dataByLinkId.delete(entry.id);\n    }\n  }\n}\n\ninterface IOscLinkEntry<T extends IOscLinkData> {\n  data: T;\n  id: number;\n  lines: IMarker[];\n}\n\ninterface IOscLinkEntryNoId extends IOscLinkEntry<IOscLinkData> {\n}\n\ninterface IOscLinkEntryWithId extends IOscLinkEntry<Required<IOscLinkData>> {\n  key: string;\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n *\n * This was heavily inspired from microsoft/vscode's dependency injection system (MIT).\n */\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IServiceIdentifier } from 'common/services/Services';\n\nconst DI_TARGET = 'di$target';\nconst DI_DEPENDENCIES = 'di$dependencies';\n\nexport const serviceRegistry: Map<string, IServiceIdentifier<any>> = new Map();\n\nexport function getServiceDependencies(ctor: any): { id: IServiceIdentifier<any>, index: number, optional: boolean }[] {\n  return ctor[DI_DEPENDENCIES] || [];\n}\n\nexport function createDecorator<T>(id: string): IServiceIdentifier<T> {\n  if (serviceRegistry.has(id)) {\n    return serviceRegistry.get(id)!;\n  }\n\n  const decorator: any = function (target: Function, key: string, index: number): any {\n    if (arguments.length !== 3) {\n      throw new Error('@IServiceName-decorator can only be used to decorate a parameter');\n    }\n\n    storeServiceDependency(decorator, target, index);\n  };\n\n  decorator.toString = () => id;\n\n  serviceRegistry.set(id, decorator);\n  return decorator;\n}\n\nfunction storeServiceDependency(id: Function, target: Function, index: number): void {\n  if ((target as any)[DI_TARGET] === target) {\n    (target as any)[DI_DEPENDENCIES].push({ id, index });\n  } else {\n    (target as any)[DI_DEPENDENCIES] = [{ id, index }];\n    (target as any)[DI_TARGET] = target;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IEvent, IEventEmitter } from 'common/EventEmitter';\nimport { IBuffer, IBufferSet } from 'common/buffer/Types';\nimport { IDecPrivateModes, ICoreMouseEvent, CoreMouseEncoding, ICoreMouseProtocol, CoreMouseEventType, ICharset, IWindowOptions, IModes, IAttributeData, ScrollSource, IDisposable, IColor, CursorStyle, CursorInactiveStyle, IOscLinkData } from 'common/Types';\nimport { createDecorator } from 'common/services/ServiceRegistry';\nimport { IDecorationOptions, IDecoration, ILinkHandler, IWindowsPty, ILogger } from '@xterm/xterm';\n\nexport const IBufferService = createDecorator<IBufferService>('BufferService');\nexport interface IBufferService {\n  serviceBrand: undefined;\n\n  readonly cols: number;\n  readonly rows: number;\n  readonly buffer: IBuffer;\n  readonly buffers: IBufferSet;\n  isUserScrolling: boolean;\n  onResize: IEvent<{ cols: number, rows: number }>;\n  onScroll: IEvent<number>;\n  scroll(eraseAttr: IAttributeData, isWrapped?: boolean): void;\n  scrollLines(disp: number, suppressScrollEvent?: boolean, source?: ScrollSource): void;\n  resize(cols: number, rows: number): void;\n  reset(): void;\n}\n\nexport const ICoreMouseService = createDecorator<ICoreMouseService>('CoreMouseService');\nexport interface ICoreMouseService {\n  activeProtocol: string;\n  activeEncoding: string;\n  areMouseEventsActive: boolean;\n  addProtocol(name: string, protocol: ICoreMouseProtocol): void;\n  addEncoding(name: string, encoding: CoreMouseEncoding): void;\n  reset(): void;\n\n  /**\n   * Triggers a mouse event to be sent.\n   *\n   * Returns true if the event passed all protocol restrictions and a report\n   * was sent, otherwise false. The return value may be used to decide whether\n   * the default event action in the bowser component should be omitted.\n   *\n   * Note: The method will change values of the given event object\n   * to fullfill protocol and encoding restrictions.\n   */\n  triggerMouseEvent(event: ICoreMouseEvent): boolean;\n\n  /**\n   * Event to announce changes in mouse tracking.\n   */\n  onProtocolChange: IEvent<CoreMouseEventType>;\n\n  /**\n   * Human readable version of mouse events.\n   */\n  explainEvents(events: CoreMouseEventType): { [event: string]: boolean };\n}\n\nexport const ICoreService = createDecorator<ICoreService>('CoreService');\nexport interface ICoreService {\n  serviceBrand: undefined;\n\n  /**\n   * Initially the cursor will not be visible until the first time the terminal\n   * is focused.\n   */\n  isCursorInitialized: boolean;\n  isCursorHidden: boolean;\n\n  readonly modes: IModes;\n  readonly decPrivateModes: IDecPrivateModes;\n\n  readonly onData: IEvent<string>;\n  readonly onUserInput: IEvent<void>;\n  readonly onBinary: IEvent<string>;\n  readonly onRequestScrollToBottom: IEvent<void>;\n\n  reset(): void;\n\n  /**\n   * Triggers the onData event in the public API.\n   * @param data The data that is being emitted.\n   * @param wasUserInput Whether the data originated from the user (as opposed to\n   * resulting from parsing incoming data). When true this will also:\n   * - Scroll to the bottom of the buffer if option scrollOnUserInput is true.\n   * - Fire the `onUserInput` event (so selection can be cleared).\n   */\n  triggerDataEvent(data: string, wasUserInput?: boolean): void;\n\n  /**\n   * Triggers the onBinary event in the public API.\n   * @param data The data that is being emitted.\n   */\n  triggerBinaryEvent(data: string): void;\n}\n\nexport const ICharsetService = createDecorator<ICharsetService>('CharsetService');\nexport interface ICharsetService {\n  serviceBrand: undefined;\n\n  charset: ICharset | undefined;\n  readonly glevel: number;\n\n  reset(): void;\n\n  /**\n   * Set the G level of the terminal.\n   * @param g\n   */\n  setgLevel(g: number): void;\n\n  /**\n   * Set the charset for the given G level of the terminal.\n   * @param g\n   * @param charset\n   */\n  setgCharset(g: number, charset: ICharset | undefined): void;\n}\n\nexport interface IServiceIdentifier<T> {\n  (...args: any[]): void;\n  type: T;\n}\n\nexport interface IBrandedService {\n  serviceBrand: undefined;\n}\n\ntype GetLeadingNonServiceArgs<TArgs extends any[]> = TArgs extends [] ? []\n  : TArgs extends [...infer TFirst, infer TLast] ? TLast extends IBrandedService ? GetLeadingNonServiceArgs<TFirst> : TArgs\n    : never;\n\nexport const IInstantiationService = createDecorator<IInstantiationService>('InstantiationService');\nexport interface IInstantiationService {\n  serviceBrand: undefined;\n\n  setService<T>(id: IServiceIdentifier<T>, instance: T): void;\n  getService<T>(id: IServiceIdentifier<T>): T | undefined;\n  createInstance<Ctor extends new (...args: any[]) => any, R extends InstanceType<Ctor>>(t: Ctor, ...args: GetLeadingNonServiceArgs<ConstructorParameters<Ctor>>): R;\n}\n\nexport enum LogLevelEnum {\n  TRACE = 0,\n  DEBUG = 1,\n  INFO = 2,\n  WARN = 3,\n  ERROR = 4,\n  OFF = 5\n}\n\nexport const ILogService = createDecorator<ILogService>('LogService');\nexport interface ILogService {\n  serviceBrand: undefined;\n\n  readonly logLevel: LogLevelEnum;\n\n  trace(message: any, ...optionalParams: any[]): void;\n  debug(message: any, ...optionalParams: any[]): void;\n  info(message: any, ...optionalParams: any[]): void;\n  warn(message: any, ...optionalParams: any[]): void;\n  error(message: any, ...optionalParams: any[]): void;\n}\n\nexport const IOptionsService = createDecorator<IOptionsService>('OptionsService');\nexport interface IOptionsService {\n  serviceBrand: undefined;\n\n  /**\n   * Read only access to the raw options object, this is an internal-only fast path for accessing\n   * single options without any validation as we trust TypeScript to enforce correct usage\n   * internally.\n   */\n  readonly rawOptions: Required<ITerminalOptions>;\n\n  /**\n   * Options as exposed through the public API, this property uses getters and setters with\n   * validation which makes it safer but slower. {@link rawOptions} should be used for pretty much\n   * all internal usage for performance reasons.\n   */\n  readonly options: Required<ITerminalOptions>;\n\n  /**\n   * Adds an event listener for when any option changes.\n   */\n  readonly onOptionChange: IEvent<keyof ITerminalOptions>;\n\n  /**\n   * Adds an event listener for when a specific option changes, this is a convenience method that is\n   * preferred over {@link onOptionChange} when only a single option is being listened to.\n   */\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  onSpecificOptionChange<T extends keyof ITerminalOptions>(key: T, listener: (arg1: Required<ITerminalOptions>[T]) => any): IDisposable;\n\n  /**\n   * Adds an event listener for when a set of specific options change, this is a convenience method\n   * that is preferred over {@link onOptionChange} when multiple options are being listened to and\n   * handled the same way.\n   */\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  onMultipleOptionChange(keys: (keyof ITerminalOptions)[], listener: () => any): IDisposable;\n}\n\nexport type FontWeight = 'normal' | 'bold' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | number;\nexport type LogLevel = 'trace' | 'debug' | 'info' | 'warn' | 'error' | 'off';\n\nexport interface ITerminalOptions {\n  allowProposedApi?: boolean;\n  allowTransparency?: boolean;\n  altClickMovesCursor?: boolean;\n  cols?: number;\n  convertEol?: boolean;\n  cursorBlink?: boolean;\n  cursorStyle?: CursorStyle;\n  cursorWidth?: number;\n  cursorInactiveStyle?: CursorInactiveStyle;\n  customGlyphs?: boolean;\n  disableStdin?: boolean;\n  documentOverride?: any | null;\n  drawBoldTextInBrightColors?: boolean;\n  fastScrollModifier?: 'none' | 'alt' | 'ctrl' | 'shift';\n  fastScrollSensitivity?: number;\n  fontSize?: number;\n  fontFamily?: string;\n  fontWeight?: FontWeight;\n  fontWeightBold?: FontWeight;\n  ignoreBracketedPasteMode?: boolean;\n  letterSpacing?: number;\n  lineHeight?: number;\n  linkHandler?: ILinkHandler | null;\n  logLevel?: LogLevel;\n  logger?: ILogger | null;\n  macOptionIsMeta?: boolean;\n  macOptionClickForcesSelection?: boolean;\n  minimumContrastRatio?: number;\n  rescaleOverlappingGlyphs?: boolean;\n  rightClickSelectsWord?: boolean;\n  rows?: number;\n  screenReaderMode?: boolean;\n  scrollback?: number;\n  scrollOnUserInput?: boolean;\n  scrollSensitivity?: number;\n  smoothScrollDuration?: number;\n  tabStopWidth?: number;\n  theme?: ITheme;\n  windowsMode?: boolean;\n  windowsPty?: IWindowsPty;\n  windowOptions?: IWindowOptions;\n  wordSeparator?: string;\n  overviewRulerWidth?: number;\n\n  [key: string]: any;\n  cancelEvents: boolean;\n  termName: string;\n}\n\nexport interface ITheme {\n  foreground?: string;\n  background?: string;\n  cursor?: string;\n  cursorAccent?: string;\n  selectionForeground?: string;\n  selectionBackground?: string;\n  selectionInactiveBackground?: string;\n  black?: string;\n  red?: string;\n  green?: string;\n  yellow?: string;\n  blue?: string;\n  magenta?: string;\n  cyan?: string;\n  white?: string;\n  brightBlack?: string;\n  brightRed?: string;\n  brightGreen?: string;\n  brightYellow?: string;\n  brightBlue?: string;\n  brightMagenta?: string;\n  brightCyan?: string;\n  brightWhite?: string;\n  extendedAnsi?: string[];\n}\n\nexport const IOscLinkService = createDecorator<IOscLinkService>('OscLinkService');\nexport interface IOscLinkService {\n  serviceBrand: undefined;\n  /**\n   * Registers a link to the service, returning the link ID. The link data is managed by this\n   * service and will be freed when this current cursor position is trimmed off the buffer.\n   */\n  registerLink(linkData: IOscLinkData): number;\n  /**\n   * Adds a line to a link if needed.\n   */\n  addLineToLink(linkId: number, y: number): void;\n  /** Get the link data associated with a link ID. */\n  getLinkData(linkId: number): IOscLinkData | undefined;\n}\n\n/*\n * Width and Grapheme_Cluster_Break properties of a character as a bit mask.\n *\n * bit 0: shouldJoin - should combine with preceding character.\n * bit 1..2: wcwidth - see UnicodeCharWidth.\n * bit 3..31: class of character (currently only 4 bits are used).\n *   This is used to determined grapheme clustering - i.e. which codepoints\n *   are to be combined into a single compound character.\n *\n * Use the UnicodeService static function createPropertyValue to create a\n * UnicodeCharProperties; use extractShouldJoin, extractWidth, and\n * extractCharKind to extract the components.\n */\nexport type UnicodeCharProperties = number;\n\n/**\n * Width in columns of a character.\n * In a CJK context, \"half-width\" characters (such as Latin) are width 1,\n * while \"full-width\" characters (such as Kanji) are 2 columns wide.\n * Combining characters (such as accents) are width 0.\n */\nexport type UnicodeCharWidth = 0 | 1 | 2;\n\nexport const IUnicodeService = createDecorator<IUnicodeService>('UnicodeService');\nexport interface IUnicodeService {\n  serviceBrand: undefined;\n  /** Register an Unicode version provider. */\n  register(provider: IUnicodeVersionProvider): void;\n  /** Registered Unicode versions. */\n  readonly versions: string[];\n  /** Currently active version. */\n  activeVersion: string;\n  /** Event triggered, when activate version changed. */\n  readonly onChange: IEvent<string>;\n\n  /**\n   * Unicode version dependent\n   */\n  wcwidth(codepoint: number): UnicodeCharWidth;\n  getStringCellWidth(s: string): number;\n  /**\n   * Return character width and type for grapheme clustering.\n   * If preceding != 0, it is the return code from the previous character;\n   * in that case the result specifies if the characters should be joined.\n   */\n  charProperties(codepoint: number, preceding: UnicodeCharProperties): UnicodeCharProperties;\n}\n\nexport interface IUnicodeVersionProvider {\n  readonly version: string;\n  wcwidth(ucs: number): UnicodeCharWidth;\n  charProperties(codepoint: number, preceding: UnicodeCharProperties): UnicodeCharProperties;\n}\n\nexport const IDecorationService = createDecorator<IDecorationService>('DecorationService');\nexport interface IDecorationService extends IDisposable {\n  serviceBrand: undefined;\n  readonly decorations: IterableIterator<IInternalDecoration>;\n  readonly onDecorationRegistered: IEvent<IInternalDecoration>;\n  readonly onDecorationRemoved: IEvent<IInternalDecoration>;\n  registerDecoration(decorationOptions: IDecorationOptions): IDecoration | undefined;\n  reset(): void;\n  /**\n   * Trigger a callback over the decoration at a cell (in no particular order). This uses a callback\n   * instead of an iterator as it's typically used in hot code paths.\n   */\n  forEachDecorationAtCell(x: number, line: number, layer: 'bottom' | 'top' | undefined, callback: (decoration: IInternalDecoration) => void): void;\n}\nexport interface IInternalDecoration extends IDecoration {\n  readonly options: IDecorationOptions;\n  readonly backgroundColorRGB: IColor | undefined;\n  readonly foregroundColorRGB: IColor | undefined;\n  readonly onRenderEmitter: IEventEmitter<HTMLElement>;\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { EventEmitter } from 'common/EventEmitter';\nimport { UnicodeV6 } from 'common/input/UnicodeV6';\nimport { IUnicodeService, IUnicodeVersionProvider, UnicodeCharProperties, UnicodeCharWidth } from 'common/services/Services';\n\nexport class UnicodeService implements IUnicodeService {\n  public serviceBrand: any;\n\n  private _providers: {[key: string]: IUnicodeVersionProvider} = Object.create(null);\n  private _active: string = '';\n  private _activeProvider: IUnicodeVersionProvider;\n\n  private readonly _onChange = new EventEmitter<string>();\n  public readonly onChange = this._onChange.event;\n\n  public static extractShouldJoin(value: UnicodeCharProperties): boolean {\n    return (value & 1) !== 0;\n  }\n  public static extractWidth(value: UnicodeCharProperties): UnicodeCharWidth {\n    return ((value >> 1) & 0x3) as UnicodeCharWidth;\n  }\n  public static extractCharKind(value: UnicodeCharProperties): number {\n    return value >> 3;\n  }\n  public static createPropertyValue(state: number, width: number, shouldJoin: boolean = false): UnicodeCharProperties {\n    return ((state & 0xffffff) << 3) | ((width & 3) << 1) | (shouldJoin?1:0);\n  }\n\n  constructor() {\n    const defaultProvider = new UnicodeV6();\n    this.register(defaultProvider);\n    this._active = defaultProvider.version;\n    this._activeProvider = defaultProvider;\n  }\n\n  public dispose(): void {\n    this._onChange.dispose();\n  }\n\n  public get versions(): string[] {\n    return Object.keys(this._providers);\n  }\n\n  public get activeVersion(): string {\n    return this._active;\n  }\n\n  public set activeVersion(version: string) {\n    if (!this._providers[version]) {\n      throw new Error(`unknown Unicode version \"${version}\"`);\n    }\n    this._active = version;\n    this._activeProvider = this._providers[version];\n    this._onChange.fire(version);\n  }\n\n  public register(provider: IUnicodeVersionProvider): void {\n    this._providers[provider.version] = provider;\n  }\n\n  /**\n   * Unicode version dependent interface.\n   */\n  public wcwidth(num: number): UnicodeCharWidth {\n    return this._activeProvider.wcwidth(num);\n  }\n\n  public getStringCellWidth(s: string): number {\n    let result = 0;\n    let precedingInfo = 0;\n    const length = s.length;\n    for (let i = 0; i < length; ++i) {\n      let code = s.charCodeAt(i);\n      // surrogate pair first\n      if (0xD800 <= code && code <= 0xDBFF) {\n        if (++i >= length) {\n          // this should not happen with strings retrieved from\n          // Buffer.translateToString as it converts from UTF-32\n          // and therefore always should contain the second part\n          // for any other string we still have to handle it somehow:\n          // simply treat the lonely surrogate first as a single char (UCS-2 behavior)\n          return result + this.wcwidth(code);\n        }\n        const second = s.charCodeAt(i);\n        // convert surrogate pair to high codepoint only for valid second part (UTF-16)\n        // otherwise treat them independently (UCS-2 behavior)\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          code = (code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n        } else {\n          result += this.wcwidth(second);\n        }\n      }\n      const currentInfo = this.charProperties(code, precedingInfo);\n      let chWidth = UnicodeService.extractWidth(currentInfo);\n      if (UnicodeService.extractShouldJoin(currentInfo)) {\n        chWidth -= UnicodeService.extractWidth(precedingInfo);\n      }\n      result += chWidth;\n      precedingInfo = currentInfo;\n    }\n    return result;\n  }\n\n  public charProperties(codepoint: number, preceding: UnicodeCharProperties): UnicodeCharProperties {\n    return this._activeProvider.charProperties(codepoint, preceding);\n  }\n}\n", "// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport * as Strings from 'browser/LocalizableStrings';\nimport { Terminal as TerminalCore } from 'browser/Terminal';\nimport { IBufferRange, ITerminal } from 'browser/Types';\nimport { IEvent } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\nimport { ITerminalOptions } from 'common/Types';\nimport { AddonManager } from 'common/public/AddonManager';\nimport { BufferNamespaceApi } from 'common/public/BufferNamespaceApi';\nimport { ParserApi } from 'common/public/ParserApi';\nimport { UnicodeApi } from 'common/public/UnicodeApi';\nimport { IBufferNamespace as IBufferNamespaceApi, IDecoration, IDecorationOptions, IDisposable, ILinkProvider, ILocalizableStrings, IMarker, IModes, IParser, ITerminalAddon, Terminal as ITerminalApi, ITerminalInitOnlyOptions, IUnicodeHandling } from '@xterm/xterm';\n\n/**\n * The set of options that only have an effect when set in the Terminal constructor.\n */\nconst CONSTRUCTOR_ONLY_OPTIONS = ['cols', 'rows'];\n\nexport class Terminal extends Disposable implements ITerminalApi {\n  private _core: ITerminal;\n  private _addonManager: AddonManager;\n  private _parser: IParser | undefined;\n  private _buffer: BufferNamespaceApi | undefined;\n  private _publicOptions: Required<ITerminalOptions>;\n\n  constructor(options?: ITerminalOptions & ITerminalInitOnlyOptions) {\n    super();\n\n    this._core = this.register(new TerminalCore(options));\n    this._addonManager = this.register(new AddonManager());\n\n    this._publicOptions = { ... this._core.options };\n    const getter = (propName: string): any => {\n      return this._core.options[propName];\n    };\n    const setter = (propName: string, value: any): void => {\n      this._checkReadonlyOptions(propName);\n      this._core.options[propName] = value;\n    };\n\n    for (const propName in this._core.options) {\n      const desc = {\n        get: getter.bind(this, propName),\n        set: setter.bind(this, propName)\n      };\n      Object.defineProperty(this._publicOptions, propName, desc);\n    }\n  }\n\n  private _checkReadonlyOptions(propName: string): void {\n    // Throw an error if any constructor only option is modified\n    // from terminal.options\n    // Modifications from anywhere else are allowed\n    if (CONSTRUCTOR_ONLY_OPTIONS.includes(propName)) {\n      throw new Error(`Option \"${propName}\" can only be set in the constructor`);\n    }\n  }\n\n  private _checkProposedApi(): void {\n    if (!this._core.optionsService.rawOptions.allowProposedApi) {\n      throw new Error('You must set the allowProposedApi option to true to use proposed API');\n    }\n  }\n\n  public get onBell(): IEvent<void> { return this._core.onBell; }\n  public get onBinary(): IEvent<string> { return this._core.onBinary; }\n  public get onCursorMove(): IEvent<void> { return this._core.onCursorMove; }\n  public get onData(): IEvent<string> { return this._core.onData; }\n  public get onKey(): IEvent<{ key: string, domEvent: KeyboardEvent }> { return this._core.onKey; }\n  public get onLineFeed(): IEvent<void> { return this._core.onLineFeed; }\n  public get onRender(): IEvent<{ start: number, end: number }> { return this._core.onRender; }\n  public get onResize(): IEvent<{ cols: number, rows: number }> { return this._core.onResize; }\n  public get onScroll(): IEvent<number> { return this._core.onScroll; }\n  public get onSelectionChange(): IEvent<void> { return this._core.onSelectionChange; }\n  public get onTitleChange(): IEvent<string> { return this._core.onTitleChange; }\n  public get onWriteParsed(): IEvent<void> { return this._core.onWriteParsed; }\n\n  public get element(): HTMLElement | undefined { return this._core.element; }\n  public get parser(): IParser {\n    if (!this._parser) {\n      this._parser = new ParserApi(this._core);\n    }\n    return this._parser;\n  }\n  public get unicode(): IUnicodeHandling {\n    this._checkProposedApi();\n    return new UnicodeApi(this._core);\n  }\n  public get textarea(): HTMLTextAreaElement | undefined { return this._core.textarea; }\n  public get rows(): number { return this._core.rows; }\n  public get cols(): number { return this._core.cols; }\n  public get buffer(): IBufferNamespaceApi {\n    if (!this._buffer) {\n      this._buffer = this.register(new BufferNamespaceApi(this._core));\n    }\n    return this._buffer;\n  }\n  public get markers(): ReadonlyArray<IMarker> {\n    this._checkProposedApi();\n    return this._core.markers;\n  }\n  public get modes(): IModes {\n    const m = this._core.coreService.decPrivateModes;\n    let mouseTrackingMode: 'none' | 'x10' | 'vt200' | 'drag' | 'any' = 'none';\n    switch (this._core.coreMouseService.activeProtocol) {\n      case 'X10': mouseTrackingMode = 'x10'; break;\n      case 'VT200': mouseTrackingMode = 'vt200'; break;\n      case 'DRAG': mouseTrackingMode = 'drag'; break;\n      case 'ANY': mouseTrackingMode = 'any'; break;\n    }\n    return {\n      applicationCursorKeysMode: m.applicationCursorKeys,\n      applicationKeypadMode: m.applicationKeypad,\n      bracketedPasteMode: m.bracketedPasteMode,\n      insertMode: this._core.coreService.modes.insertMode,\n      mouseTrackingMode: mouseTrackingMode,\n      originMode: m.origin,\n      reverseWraparoundMode: m.reverseWraparound,\n      sendFocusMode: m.sendFocus,\n      wraparoundMode: m.wraparound\n    };\n  }\n  public get options(): Required<ITerminalOptions> {\n    return this._publicOptions;\n  }\n  public set options(options: ITerminalOptions) {\n    for (const propName in options) {\n      this._publicOptions[propName] = options[propName];\n    }\n  }\n  public blur(): void {\n    this._core.blur();\n  }\n  public focus(): void {\n    this._core.focus();\n  }\n  public input(data: string, wasUserInput: boolean = true): void {\n    this._core.input(data, wasUserInput);\n  }\n  public resize(columns: number, rows: number): void {\n    this._verifyIntegers(columns, rows);\n    this._core.resize(columns, rows);\n  }\n  public open(parent: HTMLElement): void {\n    this._core.open(parent);\n  }\n  public attachCustomKeyEventHandler(customKeyEventHandler: (event: KeyboardEvent) => boolean): void {\n    this._core.attachCustomKeyEventHandler(customKeyEventHandler);\n  }\n  public attachCustomWheelEventHandler(customWheelEventHandler: (event: WheelEvent) => boolean): void {\n    this._core.attachCustomWheelEventHandler(customWheelEventHandler);\n  }\n  public registerLinkProvider(linkProvider: ILinkProvider): IDisposable {\n    return this._core.registerLinkProvider(linkProvider);\n  }\n  public registerCharacterJoiner(handler: (text: string) => [number, number][]): number {\n    this._checkProposedApi();\n    return this._core.registerCharacterJoiner(handler);\n  }\n  public deregisterCharacterJoiner(joinerId: number): void {\n    this._checkProposedApi();\n    this._core.deregisterCharacterJoiner(joinerId);\n  }\n  public registerMarker(cursorYOffset: number = 0): IMarker {\n    this._verifyIntegers(cursorYOffset);\n    return this._core.registerMarker(cursorYOffset);\n  }\n  public registerDecoration(decorationOptions: IDecorationOptions): IDecoration | undefined {\n    this._checkProposedApi();\n    this._verifyPositiveIntegers(decorationOptions.x ?? 0, decorationOptions.width ?? 0, decorationOptions.height ?? 0);\n    return this._core.registerDecoration(decorationOptions);\n  }\n  public hasSelection(): boolean {\n    return this._core.hasSelection();\n  }\n  public select(column: number, row: number, length: number): void {\n    this._verifyIntegers(column, row, length);\n    this._core.select(column, row, length);\n  }\n  public getSelection(): string {\n    return this._core.getSelection();\n  }\n  public getSelectionPosition(): IBufferRange | undefined {\n    return this._core.getSelectionPosition();\n  }\n  public clearSelection(): void {\n    this._core.clearSelection();\n  }\n  public selectAll(): void {\n    this._core.selectAll();\n  }\n  public selectLines(start: number, end: number): void {\n    this._verifyIntegers(start, end);\n    this._core.selectLines(start, end);\n  }\n  public dispose(): void {\n    super.dispose();\n  }\n  public scrollLines(amount: number): void {\n    this._verifyIntegers(amount);\n    this._core.scrollLines(amount);\n  }\n  public scrollPages(pageCount: number): void {\n    this._verifyIntegers(pageCount);\n    this._core.scrollPages(pageCount);\n  }\n  public scrollToTop(): void {\n    this._core.scrollToTop();\n  }\n  public scrollToBottom(): void {\n    this._core.scrollToBottom();\n  }\n  public scrollToLine(line: number): void {\n    this._verifyIntegers(line);\n    this._core.scrollToLine(line);\n  }\n  public clear(): void {\n    this._core.clear();\n  }\n  public write(data: string | Uint8Array, callback?: () => void): void {\n    this._core.write(data, callback);\n  }\n  public writeln(data: string | Uint8Array, callback?: () => void): void {\n    this._core.write(data);\n    this._core.write('\\r\\n', callback);\n  }\n  public paste(data: string): void {\n    this._core.paste(data);\n  }\n  public refresh(start: number, end: number): void {\n    this._verifyIntegers(start, end);\n    this._core.refresh(start, end);\n  }\n  public reset(): void {\n    this._core.reset();\n  }\n  public clearTextureAtlas(): void {\n    this._core.clearTextureAtlas();\n  }\n  public loadAddon(addon: ITerminalAddon): void {\n    this._addonManager.loadAddon(this, addon);\n  }\n  public static get strings(): ILocalizableStrings {\n    return Strings;\n  }\n\n  private _verifyIntegers(...values: number[]): void {\n    for (const value of values) {\n      if (value === Infinity || isNaN(value) || value % 1 !== 0) {\n        throw new Error('This API only accepts integers');\n      }\n    }\n  }\n\n  private _verifyPositiveIntegers(...values: number[]): void {\n    for (const value of values) {\n      if (value && (value === Infinity || isNaN(value) || value % 1 !== 0 || value < 0)) {\n        throw new Error('This API only accepts positive integers');\n      }\n    }\n  }\n}\n", "(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"FitAddon\"] = factory();\n\telse\n\t\troot[\"FitAddon\"] = factory();\n})(self, () => {\nreturn ", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport type { Terminal, ITerminalAddon } from '@xterm/xterm';\nimport type { FitAddon as IFitApi } from '@xterm/addon-fit';\nimport { IRenderDimensions } from 'browser/renderer/shared/Types';\n\ninterface ITerminalDimensions {\n  /**\n   * The number of rows in the terminal.\n   */\n  rows: number;\n\n  /**\n   * The number of columns in the terminal.\n   */\n  cols: number;\n}\n\nconst MINIMUM_COLS = 2;\nconst MINIMUM_ROWS = 1;\n\nexport class FitAddon implements ITerminalAddon , IFitApi {\n  private _terminal: Terminal | undefined;\n\n  public activate(terminal: Terminal): void {\n    this._terminal = terminal;\n  }\n\n  public dispose(): void {}\n\n  public fit(): void {\n    const dims = this.proposeDimensions();\n    if (!dims || !this._terminal || isNaN(dims.cols) || isNaN(dims.rows)) {\n      return;\n    }\n\n    // TODO: Remove reliance on private API\n    const core = (this._terminal as any)._core;\n\n    // Force a full render\n    if (this._terminal.rows !== dims.rows || this._terminal.cols !== dims.cols) {\n      core._renderService.clear();\n      this._terminal.resize(dims.cols, dims.rows);\n    }\n  }\n\n  public proposeDimensions(): ITerminalDimensions | undefined {\n    if (!this._terminal) {\n      return undefined;\n    }\n\n    if (!this._terminal.element || !this._terminal.element.parentElement) {\n      return undefined;\n    }\n\n    // TODO: Remove reliance on private API\n    const core = (this._terminal as any)._core;\n    const dims: IRenderDimensions = core._renderService.dimensions;\n\n    if (dims.css.cell.width === 0 || dims.css.cell.height === 0) {\n      return undefined;\n    }\n\n    const scrollbarWidth = this._terminal.options.scrollback === 0 ?\n      0 : core.viewport.scrollBarWidth;\n\n    const parentElementStyle = window.getComputedStyle(this._terminal.element.parentElement);\n    const parentElementHeight = parseInt(parentElementStyle.getPropertyValue('height'));\n    const parentElementWidth = Math.max(0, parseInt(parentElementStyle.getPropertyValue('width')));\n    const elementStyle = window.getComputedStyle(this._terminal.element);\n    const elementPadding = {\n      top: parseInt(elementStyle.getPropertyValue('padding-top')),\n      bottom: parseInt(elementStyle.getPropertyValue('padding-bottom')),\n      right: parseInt(elementStyle.getPropertyValue('padding-right')),\n      left: parseInt(elementStyle.getPropertyValue('padding-left'))\n    };\n    const elementPaddingVer = elementPadding.top + elementPadding.bottom;\n    const elementPaddingHor = elementPadding.right + elementPadding.left;\n    const availableHeight = parentElementHeight - elementPaddingVer;\n    const availableWidth = parentElementWidth - elementPaddingHor - scrollbarWidth;\n    const geometry = {\n      cols: Math.max(MINIMUM_COLS, Math.floor(availableWidth / dims.css.cell.width)),\n      rows: Math.max(MINIMUM_ROWS, Math.floor(availableHeight / dims.css.cell.height))\n    };\n    return geometry;\n  }\n}\n", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/Terminal.client.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/Terminal.client.tsx\");\n}\n// REMIX HMR END\n\nimport { useEffect, useRef } from 'react';\nimport pkg from '@xterm/xterm';\nimport { FitAddon } from '@xterm/addon-fit';\nimport \"@xterm/xterm/css/xterm.css?__remix_sideEffect__\";\nconst {\n  Terminal: XTerm\n} = pkg;\nexport function Terminal({\n  options,\n  onInit,\n  className = \"h-96\"\n}) {\n  _s();\n  const terminalRef = useRef(null);\n  const terminalInstance = useRef(null);\n  const modeRef = useRef('normal');\n  const contentRef = useRef([]);\n  const cursorPosRef = useRef({\n    x: 0,\n    y: 0\n  });\n  const commandBufferRef = useRef('');\n  const visualStartRef = useRef({\n    x: 0,\n    y: 0\n  });\n  const initializedRef = useRef(false);\n  const writeInitialContent = (terminal, content) => {\n    contentRef.current = content;\n    terminal.clear();\n    content.forEach((line, index) => {\n      if (index === content.length - 1) {\n        terminal.write(line);\n      } else {\n        terminal.writeln(line);\n      }\n    });\n    cursorPosRef.current = {\n      x: 0,\n      y: 0\n    };\n    updateStatusLine(terminal);\n  };\n  const updateStatusLine = terminal => {\n    terminal.write('\\x1b7'); // Save cursor position\n    terminal.write(`\\x1b[${terminal.rows};0H`); // Move to last line\n    terminal.write('\\x1b[2K'); // Clear line\n\n    switch (modeRef.current) {\n      case 'insert':\n        terminal.write('-- INSERT --');\n        break;\n      case 'command':\n        terminal.write(`:${commandBufferRef.current}`);\n        break;\n      case 'visual':\n        terminal.write('-- VISUAL --');\n        break;\n    }\n    terminal.write('\\x1b8'); // Restore cursor position\n  };\n  const moveCursor = (terminal, direction) => {\n    const currentLine = contentRef.current[cursorPosRef.current.y] || '';\n    const maxX = currentLine.length;\n    const maxY = contentRef.current.length - 1;\n    switch (direction) {\n      case 'left':\n        if (cursorPosRef.current.x > 0) {\n          cursorPosRef.current.x--;\n          terminal.write('\\x1b[D');\n        }\n        break;\n      case 'right':\n        if (cursorPosRef.current.x < maxX) {\n          cursorPosRef.current.x++;\n          terminal.write('\\x1b[C');\n        }\n        break;\n      case 'up':\n        if (cursorPosRef.current.y > 0) {\n          cursorPosRef.current.y--;\n          terminal.write('\\x1b[A');\n          // Adjust x position if needed\n          const upLine = contentRef.current[cursorPosRef.current.y] || '';\n          if (cursorPosRef.current.x > upLine.length) {\n            cursorPosRef.current.x = upLine.length;\n            terminal.write(`\\x1b[${cursorPosRef.current.x + 1}G`);\n          }\n        }\n        break;\n      case 'down':\n        if (cursorPosRef.current.y < maxY) {\n          cursorPosRef.current.y++;\n          terminal.write('\\x1b[B');\n          // Adjust x position if needed\n          const downLine = contentRef.current[cursorPosRef.current.y] || '';\n          if (cursorPosRef.current.x > downLine.length) {\n            cursorPosRef.current.x = downLine.length;\n            terminal.write(`\\x1b[${cursorPosRef.current.x + 1}G`);\n          }\n        }\n        break;\n    }\n  };\n  const handleBackspace = terminal => {\n    const currentLine = contentRef.current[cursorPosRef.current.y];\n    if (cursorPosRef.current.x > 0) {\n      contentRef.current[cursorPosRef.current.y] = currentLine.slice(0, cursorPosRef.current.x - 1) + currentLine.slice(cursorPosRef.current.x);\n      cursorPosRef.current.x--;\n      terminal.write('\\x1b[D \\x1b[D'); // Move left, clear character, move left again\n    } else if (cursorPosRef.current.y > 0) {\n      // Join with previous line\n      const previousLine = contentRef.current[cursorPosRef.current.y - 1];\n      cursorPosRef.current.x = previousLine.length;\n      cursorPosRef.current.y--;\n      contentRef.current[cursorPosRef.current.y] = previousLine + currentLine;\n      contentRef.current.splice(cursorPosRef.current.y + 1, 1);\n      terminal.write('\\x1b[A\\x1b[G\\x1b[' + (cursorPosRef.current.x + 1) + 'G');\n    }\n  };\n  const refreshScreen = terminal => {\n    // Save current content and cursor\n    const content = [...contentRef.current];\n    const cursor = {\n      ...cursorPosRef.current\n    };\n\n    // Clear screen and reset cursor\n    terminal.write('\\x1b[2J'); // Clear entire screen\n    terminal.write('\\x1b[H'); // Move cursor to home position\n\n    // Write content line by line\n    content.forEach((line, index) => {\n      terminal.write(line);\n      if (index < content.length - 1) {\n        terminal.write('\\r\\n');\n      }\n    });\n\n    // Restore cursor position\n    terminal.write(`\\x1b[${cursor.y + 1};${cursor.x + 1}H`);\n    updateStatusLine(terminal);\n  };\n  const highlightSelection = terminal => {\n    const start = visualStartRef.current;\n    const end = cursorPosRef.current;\n\n    // Save current content\n    const content = [...contentRef.current];\n\n    // Clear screen and reset cursor\n    terminal.write('\\x1b[2J'); // Clear entire screen\n    terminal.write('\\x1b[H'); // Move cursor to home position\n\n    // Calculate selection range\n    const startLine = Math.min(start.y, end.y);\n    const endLine = Math.max(start.y, end.y);\n    const isForwardSelection = start.y < end.y || start.y === end.y && start.x <= end.x;\n\n    // Write content line by line with highlighting\n    content.forEach((line, lineIndex) => {\n      if (lineIndex >= startLine && lineIndex <= endLine) {\n        // Line is part of selection\n        if (startLine === endLine) {\n          // Single line selection\n          const selStart = Math.min(start.x, end.x);\n          const selEnd = Math.min(Math.max(start.x, end.x) + 1, line.length);\n          terminal.write(line.slice(0, selStart));\n          terminal.write('\\x1b[7m');\n          terminal.write(line.slice(selStart, selEnd));\n          terminal.write('\\x1b[27m');\n          if (selEnd < line.length) {\n            terminal.write(line.slice(selEnd));\n          }\n        } else {\n          // Multi-line selection\n          if (lineIndex === startLine) {\n            // First line of selection\n            const selStart = isForwardSelection ? start.x : end.x;\n            terminal.write(line.slice(0, selStart));\n            terminal.write('\\x1b[7m');\n            terminal.write(line.slice(selStart));\n            terminal.write('\\x1b[27m');\n          } else if (lineIndex === endLine) {\n            // Last line of selection\n            const selEnd = Math.min((isForwardSelection ? end.x : start.x) + 1, line.length);\n            terminal.write('\\x1b[7m');\n            terminal.write(line.slice(0, selEnd));\n            terminal.write('\\x1b[27m');\n            if (selEnd < line.length) {\n              terminal.write(line.slice(selEnd));\n            }\n          } else {\n            // Middle line of selection\n            terminal.write('\\x1b[7m');\n            terminal.write(line);\n            terminal.write('\\x1b[27m');\n          }\n        }\n      } else {\n        // Line is not part of selection\n        terminal.write(line);\n      }\n\n      // Add line break if not the last line\n      if (lineIndex < content.length - 1) {\n        terminal.write('\\r\\n');\n      }\n    });\n\n    // Restore cursor position\n    terminal.write(`\\x1b[${end.y + 1};${end.x + 1}H`);\n    updateStatusLine(terminal);\n  };\n  useEffect(() => {\n    if (!terminalRef.current || initializedRef.current) return;\n    initializedRef.current = true;\n\n    // Ensure the container has dimensions before creating the terminal\n    const container = terminalRef.current;\n    container.style.height = '384px'; // 24rem (h-96)\n    container.style.minWidth = '320px';\n\n    // Create terminal with explicit dimensions\n    const terminal = new XTerm({\n      cursorBlink: true,\n      theme: {\n        background: '#1e1e1e',\n        foreground: '#ffffff',\n        cursor: '#ffffff'\n      },\n      rows: 24,\n      cols: 80,\n      ...(options || {})\n    });\n    const fitAddon = new FitAddon();\n    terminal.loadAddon(fitAddon);\n    try {\n      // Ensure container is ready\n      requestAnimationFrame(() => {\n        try {\n          terminal.open(container);\n          terminalInstance.current = terminal;\n\n          // Wait for next frame to ensure terminal is mounted\n          requestAnimationFrame(() => {\n            try {\n              fitAddon.fit();\n\n              // Initialize with content\n              if (onInit) {\n                const lines = [];\n\n                // Override write temporarily to capture content\n                const originalWrite = terminal.write.bind(terminal);\n                terminal.write = data => {\n                  const text = data.toString();\n                  if (text.includes('\\r\\n')) {\n                    lines.push(...text.split('\\r\\n'));\n                  } else {\n                    lines.push(text);\n                  }\n                  return originalWrite(data);\n                };\n\n                // Call initialization\n                onInit(terminal);\n\n                // Restore original write function\n                terminal.write = originalWrite;\n\n                // Clear and rewrite content properly\n                terminal.clear();\n                writeInitialContent(terminal, lines.filter(line => line.trim()));\n              }\n\n              // Add key handlers after content is initialized\n              terminal.onKey(({\n                key,\n                domEvent\n              }) => {\n                const printable = !domEvent.altKey && !domEvent.ctrlKey && !domEvent.metaKey;\n                switch (modeRef.current) {\n                  case 'normal':\n                    switch (key) {\n                      case 'i':\n                        modeRef.current = 'insert';\n                        updateStatusLine(terminal);\n                        break;\n                      case 'v':\n                        modeRef.current = 'visual';\n                        visualStartRef.current = {\n                          ...cursorPosRef.current\n                        };\n                        updateStatusLine(terminal);\n                        break;\n                      case ':':\n                        modeRef.current = 'command';\n                        commandBufferRef.current = '';\n                        updateStatusLine(terminal);\n                        break;\n                      case 'h':\n                        moveCursor(terminal, 'left');\n                        break;\n                      case 'l':\n                        moveCursor(terminal, 'right');\n                        break;\n                      case 'j':\n                        moveCursor(terminal, 'down');\n                        break;\n                      case 'k':\n                        moveCursor(terminal, 'up');\n                        break;\n                    }\n                    break;\n                  case 'insert':\n                    if (domEvent.key === 'Escape') {\n                      modeRef.current = 'normal';\n                      updateStatusLine(terminal);\n                    } else if (domEvent.key === 'Backspace') {\n                      handleBackspace(terminal);\n                    } else if (domEvent.key === 'Enter') {\n                      const currentLine = contentRef.current[cursorPosRef.current.y];\n                      const newLine = currentLine.slice(cursorPosRef.current.x);\n                      contentRef.current[cursorPosRef.current.y] = currentLine.slice(0, cursorPosRef.current.x);\n                      contentRef.current.splice(cursorPosRef.current.y + 1, 0, newLine);\n                      cursorPosRef.current.y++;\n                      cursorPosRef.current.x = 0;\n                      terminal.write('\\r\\n');\n                    } else if (printable) {\n                      const currentLine = contentRef.current[cursorPosRef.current.y];\n                      contentRef.current[cursorPosRef.current.y] = currentLine.slice(0, cursorPosRef.current.x) + key + currentLine.slice(cursorPosRef.current.x);\n                      cursorPosRef.current.x++;\n                      terminal.write(key);\n                    }\n                    break;\n                  case 'visual':\n                    if (domEvent.key === 'Escape') {\n                      modeRef.current = 'normal';\n                      refreshScreen(terminal);\n                    } else {\n                      switch (key) {\n                        case 'h':\n                          moveCursor(terminal, 'left');\n                          highlightSelection(terminal);\n                          break;\n                        case 'l':\n                          moveCursor(terminal, 'right');\n                          highlightSelection(terminal);\n                          break;\n                        case 'j':\n                          moveCursor(terminal, 'down');\n                          highlightSelection(terminal);\n                          break;\n                        case 'k':\n                          moveCursor(terminal, 'up');\n                          highlightSelection(terminal);\n                          break;\n                      }\n                    }\n                    break;\n                  case 'command':\n                    if (domEvent.key === 'Enter') {\n                      if (commandBufferRef.current === 'q') {\n                        terminal.write('\\r\\n\\r\\nExiting vim...\\r\\n');\n                      }\n                      modeRef.current = 'normal';\n                      commandBufferRef.current = '';\n                      updateStatusLine(terminal);\n                    } else if (domEvent.key === 'Escape') {\n                      modeRef.current = 'normal';\n                      commandBufferRef.current = '';\n                      updateStatusLine(terminal);\n                    } else if (domEvent.key === 'Backspace') {\n                      if (commandBufferRef.current.length > 0) {\n                        commandBufferRef.current = commandBufferRef.current.slice(0, -1);\n                        updateStatusLine(terminal);\n                      }\n                    } else if (printable) {\n                      commandBufferRef.current += key;\n                      updateStatusLine(terminal);\n                    }\n                    break;\n                }\n              });\n\n              // Handle resize\n              const handleResize = () => {\n                try {\n                  if (terminal && fitAddon) {\n                    requestAnimationFrame(() => {\n                      fitAddon.fit();\n                      updateStatusLine(terminal);\n                    });\n                  }\n                } catch (error) {\n                  console.error('Error resizing terminal:', error);\n                }\n              };\n              window.addEventListener('resize', handleResize);\n              return () => {\n                window.removeEventListener('resize', handleResize);\n                if (terminal) {\n                  terminal.dispose();\n                }\n              };\n            } catch (error) {\n              console.error('Error during terminal initialization:', error);\n            }\n          });\n        } catch (error) {\n          console.error('Error opening terminal:', error);\n        }\n      });\n    } catch (error) {\n      console.error('Error setting up terminal:', error);\n    }\n  }, [options, onInit]);\n  return <div ref={terminalRef} className={`rounded border border-gray-200 ${className}`} style={{\n    minHeight: '384px'\n  }} />;\n}\n_s(Terminal, \"aSq5N9UMJU7ISbWxYueRnrEKCdE=\");\n_c = Terminal;\nvar _c;\n$RefreshReg$(_c, \"Terminal\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "import * as React from \"react\";\nimport { useHydrated } from \"./use-hydrated.js\";\n/**\n * Render the children only after the JS has loaded client-side. Use an optional\n * fallback component if the JS is not yet loaded.\n *\n * Example: Render a Chart component if JS loads, renders a simple FakeChart\n * component server-side or if there is no JS. The FakeChart can have only the\n * UI without the behavior or be a loading spinner or skeleton.\n * ```tsx\n * return (\n *   <ClientOnly fallback={<FakeChart />}>\n *     {() => <Chart />}\n *   </ClientOnly>\n * );\n * ```\n */\nexport function ClientOnly({ children, fallback = null }) {\n    return useHydrated() ? React.createElement(React.Fragment, null, children()) : React.createElement(React.Fragment, null, fallback);\n}\n", "import { useSyncExternalStore } from \"react\";\nfunction subscribe() {\n    // biome-ignore lint/suspicious/noEmptyBlockStatements: Mock function\n    return () => { };\n}\n/**\n * Return a boolean indicating if the JS has been hydrated already.\n * When doing Server-Side Rendering, the result will always be false.\n * When doing Client-Side Rendering, the result will always be false on the\n * first render and true from then on. Even if a new component renders it will\n * always start with true.\n *\n * Example: Disable a button that needs JS to work.\n * ```tsx\n * let hydrated = useHydrated();\n * return (\n *   <button type=\"button\" disabled={!hydrated} onClick={doSomethingCustom}>\n *     Click me\n *   </button>\n * );\n * ```\n */\nexport function useHydrated() {\n    return useSyncExternalStore(subscribe, () => true, () => false);\n}\n", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/vim.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/vim.tsx\");\n  import.meta.hot.lastModified = \"1730554158553.8628\";\n}\n// REMIX HMR END\n\nimport { Layout } from \"~/components/Layout\";\nimport { Terminal as VimTerminal } from \"~/components/Terminal.client\";\nimport { ClientOnly } from \"remix-utils/client-only\";\nexport const meta = () => {\n  return [{\n    title: \"Learn Vim - Zoney Hotkeys\"\n  }, {\n    name: \"description\",\n    content: \"Interactive Vim tutorial with hands-on practice\"\n  }];\n};\nfunction initializeVimTerminal(terminal) {\n  terminal.write(\"Welcome to Vim Tutorial!\\r\\n\");\n  terminal.write(\"Press i for insert mode\\r\\n\");\n  terminal.write(\"Press Esc to exit insert mode\\r\\n\");\n  terminal.write(\"Type :q to quit\\r\\n\");\n  terminal.write('\\x1b[H');\n}\nexport default function VimRoute() {\n  return <div className=\"min-h-screen bg-zinc-900 text-zinc-100\">\n      <Layout>\n        <h1 className=\"text-3xl font-bold mb-6\">Learn Vim</h1>\n        \n        <main className=\"p-6 space-y-8\">\n          <div className=\"bg-zinc-800 rounded-lg p-6 shadow-lg\">\n            <h2 className=\"text-xl font-semibold mb-4\">Interactive Terminal</h2>\n            <ClientOnly fallback={<div>Loading terminal...</div>}>\n              {() => <VimTerminal onInit={initializeVimTerminal} />}\n            </ClientOnly>\n          </div>\n\n          <div className=\"bg-zinc-800 rounded-lg p-6 shadow-lg\">\n            <h2 className=\"text-xl font-semibold mb-4\">Quick Reference</h2>\n            <div className=\"space-y-4\">\n              <div>\n                <h3 className=\"font-medium\">Basic Navigation</h3>\n                <ul className=\"ml-4 list-disc\">\n                  <li>h - move left</li>\n                  <li>j - move down</li>\n                  <li>k - move up</li>\n                  <li>l - move right</li>\n                </ul>\n              </div>\n              \n              <div>\n                <h3 className=\"font-medium\">Modes</h3>\n                <ul className=\"ml-4 list-disc\">\n                  <li>i - enter insert mode</li>\n                  <li>Esc - return to normal mode</li>\n                  <li>v - enter visual mode</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </main>\n      </Layout>\n    </div>;\n}\n_c = VimRoute;\nvar _c;\n$RefreshReg$(_c, \"VimRoute\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["root", "factory", "exports", "module", "define", "amd", "i", "a", "globalThis", "e", "t", "s", "r", "n", "o", "AccessibilityManager", "Disposable", "super", "_terminal", "_coreBrowserService", "_renderService", "_rowColumns", "WeakMap", "_liveRegionLineCount", "_charsToConsume", "_charsToAnnounce", "this", "_accessibilityContainer", "mainDocument", "createElement", "classList", "_rowContainer", "setAttribute", "_rowElements", "_createAccessibilityTreeNode", "appendChild", "_topBoundaryFocusListener", "_handleBoundaryFocus", "_bottomBoundaryFocusListener", "addEventListener", "_refreshRowsDimensions", "_liveRegion", "_liveRegionDebouncer", "register", "TimeBasedDebouncer", "_renderRows", "bind", "insertAdjacentElement", "onResize", "_handleResize", "rows", "onRender", "_refreshRows", "onScroll", "char", "_handleChar", "onLineFeed", "onA11yTab", "_handleTab", "spaceCount", "onKey", "_handleKey", "key", "onBlur", "_clearLiveRegion", "onDimensionsChange", "addDisposableDomListener", "document", "_handleSelectionChange", "onDprChange", "toDisposable", "remove", "length", "shift", "MAX_ROWS_TO_READ", "textContent", "tooMuchOutput", "test", "keyChar", "refresh", "start", "buffer", "lines", "toString", "get", "translateToString", "undefined", "columns", "ydisp", "element", "set", "posInSet", "setSize", "_announceCharacters", "position", "boundaryElement", "getAttribute", "relatedTarget", "topBoundaryElement", "bottomBoundaryElement", "removeChild", "removeEventListener", "unshift", "newElement", "push", "focus", "preventDefault", "stopImmediatePropagation", "getSelection", "selection", "isCollapsed", "contains", "anchorNode", "clearSelection", "focusNode", "console", "begin", "anchorOffset", "offset", "focusOffset", "node", "compareDocumentPosition", "DOCUMENT_POSITION_PRECEDING", "DOCUMENT_POSITION_CONTAINED_BY", "Node", "DOCUMENT_POSITION_FOLLOWING", "childNodes", "slice", "end", "lastRowElement", "toRowColumn", "Text", "parentNode", "parseInt", "rowElement", "isNaN", "warn", "row", "column", "beginRowColumn", "children", "pop", "tabIndex", "_refreshRowDimensions", "dimensions", "css", "cell", "style", "width", "height", "IInstantiationService", "ICoreBrowserService", "bracketedPasteMode", "optionsService", "text", "prepareTextForTerminal", "decPrivateModes", "rawOptions", "ignoreBracketedPasteMode", "triggerDataEvent", "textarea", "getBoundingClientRect", "clientX", "left", "clientY", "top", "zIndex", "selectionService", "ev", "clipboardData", "setData", "selectionText", "stopPropagation", "screenElement", "moveTextAreaUnderMouseCursor", "rightClickSelect", "value", "select", "TwoKeyMap", "bg", "_color", "getColor", "clear", "handler", "options", "disposed", "Linkifier", "currentLink", "_currentLink", "_element", "_mouseService", "_bufferService", "_linkProviderService", "_linkCacheDisposables", "_wasResized", "_activeLine", "_onShowLinkUnderline", "EventEmitter", "onShowLinkUnderline", "event", "_onHideLinkUnderline", "onHideLinkUnderline", "getDisposeArrayDisposable", "_lastMouseEvent", "_activeProviderReplies", "_clearCurrentLink", "_isMouseOut", "_handleMouseMove", "_handleMouseDown", "_handleMouseUp", "_positionFromMouseEvent", "composedPath", "target", "_lastBufferCell", "y", "_handleHover", "_askForLink", "_linkAtPosition", "useLineCache", "forEach", "linkWithState", "link", "dispose", "linkProviders", "entries", "existingReply", "_checkLinkProviderResult", "linkProvider", "provideLinks", "links", "linksWithState", "size", "_removeIntersectingLinks", "replies", "occupiedCells", "Set", "range", "cols", "x", "index", "hasLinkBefore", "j", "linkAtPosition", "_handleNewLink", "linkProvided", "_mouseDownLink", "activate", "endRow", "_linkLeave", "disposeArray", "decorations", "underline", "pointerCursor", "_linkHover", "Object", "defineProperties", "state", "v", "isHovered", "_fireUnderlineEvent", "onRenderedViewportChange", "hover", "_createLinkUnderlineEvent", "scrollOffset", "fire", "leave", "current", "mouseService", "getCoords", "coords", "x2", "y2", "fg", "IMouseService", "IRenderService", "IBufferService", "ILinkProviderService", "promptLabel", "OscLinkProvider", "_oscLinkService", "_optionsService", "callback", "line", "linkHandler", "CellData", "getTrimmedLength", "currentStart", "finishLink", "hasContent", "loadCell", "hasExtendedAttrs", "extended", "urlId", "currentLinkId", "getLinkData", "uri", "lineLength", "ignoreLink", "allowNonHttpProtocols", "URL", "includes", "parsed", "protocol", "defaultActivate", "window", "newWindow", "opener", "href", "IOptionsService", "IOscLinkService", "constructor", "_renderCallback", "_refreshCallbacks", "_animationFrame", "cancelAnimationFrame", "requestAnimationFrame", "_innerRefresh", "rowEnd", "rowCount", "_rowCount", "rowStart", "_rowStart", "_rowEnd", "Math", "_runRefreshCallbacks", "max", "min", "Terminal", "CoreTerminal", "onFocus", "_onFocus", "_onA11yTabEmitter", "onWillOpen", "_onWillOpen", "_keyDownSeen", "_keyPressHandled", "_unprocessedDeadKey", "_accessibilityManager", "MutableDisposable", "_onCursorMove", "_onKey", "_onRender", "_onSelectionChange", "onSelectionChange", "_onTitleChange", "_onBell", "onBell", "_onA11yCharEmitter", "_setup", "_decorationService", "_instantiationService", "createInstance", "DecorationService", "setService", "IDecorationService", "LinkProviderService", "registerLinkProvider", "_inputHandler", "onRequestBell", "onRequestRefreshRows", "onRequestSendFocus", "_reportFocus", "onRequestReset", "reset", "onRequestWindowsOptionsReport", "type", "_reportWindowsOptions", "onColor", "_handleColorEvent", "forwardEvent", "onCursorMove", "onTitleChange", "onA11yChar", "_afterResize", "_customKeyEventHandler", "_themeService", "req", "ident", "acc", "colorRgb", "color", "toColorRGB", "ansi", "colors", "coreService", "ESC", "toRgbString", "C1_ESCAPED", "channels", "toColor", "modifyColors", "narrowedAcc", "restoreColor", "buffers", "preventScroll", "sendFocus", "_onBlur", "_syncTextArea", "isCursorInViewport", "_compositionHelper", "isComposing", "ybase", "cursorY", "bufferLine", "getWidth", "cursorTop", "lineHeight", "_initGlobal", "_bindKeys", "hasSelection", "copyHandler", "_selectionService", "pasteHandlerWrapper", "Browser", "isFirefox", "button", "rightClickHandler", "rightClickSelectsWord", "isLinux", "_keyDown", "compositionstart", "compositionupdate", "compositionend", "_inputEvent", "updateCompositionElements", "Error", "isConnected", "_logService", "ownerDocument", "defaultView", "_document", "documentOverride", "Document", "dir", "add", "parent", "fragment", "createDocumentFragment", "_viewportElement", "_viewportScrollArea", "updateCursorStyle", "_helperContainer", "Strings", "isChromeOS", "CoreBrowserService", "_handleTextAreaFocus", "_handleTextAreaBlur", "_charSizeService", "CharSizeService", "ICharSizeService", "ThemeService", "IThemeService", "CharacterJoinerService", "ICharacterJoinerService", "_characterJoinerService", "RenderService", "resize", "_compositionView", "CompositionHelper", "MouseService", "linkifier", "hasRenderer", "setRenderer", "_createRenderer", "viewport", "Viewport", "onRequestScrollLines", "scrollLines", "amount", "suppressScrollEvent", "onRequestSyncScrollBar", "syncScrollArea", "handleCursorMove", "handleResize", "handleBlur", "handleFocus", "SelectionService", "ISelectionService", "onRequestRedraw", "handleSelectionChanged", "columnSelectMode", "onLinuxMouseSelection", "BufferDecorationRenderer", "handleMouseDown", "coreMouseService", "areMouseEventsActive", "disable", "enable", "screenReaderMode", "onSpecificOptionChange", "_handleScreenReaderModeOptionChange", "overviewRulerWidth", "_overviewRulerRenderer", "OverviewRulerRenderer", "measure", "bindMouse", "self", "sendEvent", "pos", "getMouseReportCoords", "buttons", "but", "action", "_customWheelEventHandler", "getLinesScrolled", "deltaY", "triggerMouseEvent", "col", "ctrlKey", "requestedEvents", "mouseup", "mousedrag", "mousemove", "cancel", "onProtocolChange", "debug", "explainEvents", "eventListeners", "el", "wheel", "passive", "activeProtocol", "shouldForceSelection", "hasScrollback", "applicationCursorKeys", "abs", "data", "handleWheel", "handleTouchStart", "handleTouchMove", "refreshRows", "shouldColumnSelect", "_showCursor", "isCursorInitialized", "source", "paste", "attachCustomKeyEventHandler", "customKeyEventHandler", "customWheelEventHandler", "joinerId", "markers", "addMarker", "registerDecoration", "setSelection", "getSelectionPosition", "selectionStart", "selectionEnd", "selectAll", "selectLines", "browser", "macOptionIsMeta", "keydown", "scrollOnUserInput", "scrollToBottom", "evaluateKeyboardEvent", "isMac", "result", "scrollCount", "_isThirdLevelShift", "altKey", "metaKey", "charCodeAt", "C0", "ETX", "domEvent", "getModifierState", "keyCode", "wasModifierKeyOnlyEvent", "_keyDownHandled", "charCode", "which", "String", "fromCharCode", "inputType", "hasValidSize", "clearAllMarkers", "getBlankLine", "DEFAULT_ATTR_DATA", "_onScroll", "clearTextureAtlas", "WindowsOptionsReportType", "GET_WIN_SIZE_PIXELS", "toFixed", "canvas", "canvasHeight", "GET_CELL_SIZE_PIXELS", "cellHeight", "cellWidth", "force", "cancelEvents", "_debounceThresholdMS", "_lastRefreshMs", "_additionalRefreshRequested", "_refreshTimeoutID", "clearTimeout", "now", "elapsed", "refreshRequestTime", "setTimeout", "themeService", "_scrollArea", "_currentRowHeight", "_currentDeviceCellHeight", "_lastRecordedBufferLength", "_lastRecordedViewportHeight", "_lastRecordedBufferHeight", "_lastTouchY", "_wheelPartialScroll", "_refreshAnimationFrame", "_ignoreNextScrollEvent", "_smoothScrollState", "startTime", "origin", "_onRequestScrollLines", "scrollBarWidth", "offsetWidth", "_handleScroll", "_activeBuffer", "onBufferActivate", "activeBuffer", "_renderDimensions", "_handleThemeChange", "onChangeColors", "backgroundColor", "background", "_lastScrollTop", "dpr", "device", "offsetHeight", "scrollTop", "immediate", "_refresh", "offsetParent", "diff", "_isDisposed", "_smoothScrollPercent", "round", "percent", "_smoothScroll", "_clearSmoothScrollState", "smoothScrollDuration", "Date", "h", "c", "scrollHeight", "_bubbleScroll", "shiftKey", "_applyScrollModifier", "deltaMode", "WheelEvent", "DOM_DELTA_PAGE", "bufferElements", "cursorElement", "DOM_DELTA_PIXEL", "fastScrollModifier", "modifier", "fastScrollSensitivity", "scrollSensitivity", "touches", "pageY", "_decorationElements", "_altBufferIsActive", "_dimensionsChanged", "_container", "_screenElement", "_doRefreshDecorations", "_queueRefresh", "alt", "onDecorationRegistered", "onDecorationRemoved", "_removeDecoration", "decoration", "addRefreshCallback", "_renderDecoration", "_refreshStyle", "_refreshXPosition", "toggle", "layer", "marker", "display", "active", "onRenderEmitter", "_createElement", "onDispose", "delete", "anchor", "right", "_zones", "_zonePool", "_zonePoolIndex", "_linePadding", "overviewRulerOptions", "z", "_lineIntersectsZone", "_lineAdjacentToZone", "_addLineToZone", "startBufferLine", "endBufferLine", "padding", "zone", "full", "drawX", "_colorZoneStore", "ColorZoneStore", "_shouldUpdateDimensions", "_shouldUpdateAnchor", "_lastKnownBufferLength", "_canvas", "_refreshCanvasDimensions", "parentElement", "ctx", "_registerDecorationListeners", "_registerBufferChangeListeners", "_registerDimensionChangeListeners", "normal", "_refreshDrawHeightConstants", "_refreshColorZonePadding", "_containerHeight", "clientHeight", "outerWidth", "floor", "drawWidth", "center", "drawHeight", "pixelsPerLine", "nonFullHeight", "setPadding", "_width", "_refreshDrawConstants", "_ctx", "clearRect", "addDecoration", "_renderColorZone", "fillStyle", "fillRect", "updateCanvasDimensions", "_refreshDecorations", "_isComposing", "_textarea", "_coreService", "_isSendingComposition", "_compositionPosition", "_dataAlreadySent", "_finalizeComposition", "_handleAnyTextareaChanges", "waitForPropagation", "substring", "currentCompositionPosition", "input", "oldValue", "newValue", "dontRecurse", "fontFamily", "fontSize", "cursorLeft", "ICoreService", "getComputedStyle", "elementStyle", "getPropertyValue", "leftPadding", "rect", "cssCellWidth", "isSelection", "cssCellHeight", "moveToRequestedRow", "bufferService", "wrappedRowsForRow", "targetY", "startY", "verticalDirection", "startRow", "isWrapped", "wrappedRows", "applicationCursor", "lineWraps", "currentRow", "forward", "currentCol", "endCol", "translateBufferLineToString", "startCol", "bufferStr", "mod", "str", "targetX", "startX", "resetStartingRow", "sequence", "repeat", "colsFromRowEnd", "direction", "ROW_CONTAINER_CLASS", "FG_CLASS_PREFIX", "FOCUS_CLASS", "SELECTION_CLASS", "nextTerminalId", "_terminalClass", "_selectionRenderModel", "createSelectionRenderModel", "_refreshRowElements", "_selectionContainer", "createRenderDimensions", "_updateDimensions", "onOptionChange", "_handleOptionsChanged", "_injectCss", "_rowFactory", "instantiationService", "DomRendererRowFactory", "_linkifier2", "_handleLinkHover", "_handleLinkLeave", "_widthCache", "_themeStyleElement", "_dimensionsStyleElement", "WidthCache", "setFont", "fontWeight", "fontWeightBold", "_setDefaultSpacing", "letterSpacing", "overflow", "_terminalSelector", "styles", "multiplyOpacity", "foreground", "blinkAnimationBlockId", "blinkAnimationUnderlineId", "blinkAnimationBarId", "cursor", "cursorAccent", "cursorWidth", "selectionBackgroundOpaque", "selectionInactiveBackgroundOpaque", "BG_CLASS_PREFIX", "INVERTED_DEFAULT_COLOR", "opaque", "spacing", "defaultSpacing", "w", "renderRows", "replaceChildren", "viewportStartRow", "viewportEndRow", "viewportCappedStartRow", "viewportCappedEndRow", "isXFlipped", "_createSelectionElement", "documentFragment", "colEnd", "cursorBlink", "cursorStyle", "cursorInactiveStyle", "lineData", "createRow", "cursorAbsoluteY", "cursorX", "TERMINAL_CLASS_PREFIX", "_setCellUnderline", "y1", "enabled", "bufferline", "DomRenderer", "_selectionStart", "_columnSelectMode", "getJoinedCharacters", "oldLinkHover", "hasHover", "_workCell", "JoinedCellData", "isInSelection", "isDecorated", "forEachDecorationAtCell", "d", "WHITESPACE_CELL_CHAR", "isUnderline", "chars", "isBold", "charElement", "oldSpacing", "isCursorCell", "isFocused", "classes", "isInvisible", "getChars", "underlineStyle", "isUnderlineColorDefault", "isUnderlineColorRGB", "textDecorationColor", "AttributeData", "getUnderlineColor", "join", "drawBoldTextInBrightColors", "isOverline", "isStrikethrough", "textDecoration", "getFgColor", "getFgColorMode", "getBgColor", "getBgColorMode", "isInverse", "temp2", "bgColorMode", "fgOverride", "isTop", "backgroundColorRGB", "foregroundColorRGB", "rgba", "selectionForeground", "fgColorMode", "_addStyle", "padStart", "resolvedBg", "_applyMinimumContrast", "cellAmount", "elements", "minimumContrastRatio", "treatGlyphAsBackgroundColor", "getCode", "_getContrastCache", "bgOverride", "cache", "adjustedColor", "isDim", "ensureContrastRatio", "ratio", "setColor", "halfContrastCache", "contrastCache", "_selectionEnd", "padChar", "_flat", "Float32Array", "_font", "_weight", "_weightBold", "_measureElements", "whiteSpace", "fontKerning", "bold", "italic", "l", "boldItalic", "_", "_holey", "weight", "weightBold", "font", "_fontSize", "cp", "_measure", "variant", "TEXT_BASELINE", "codepoint", "f", "b", "glyphSizeX", "ceil", "deviceCellWidth", "isNerdFontGlyph", "isPowerlineGlyph", "currentOffset", "lineWidth", "SelectionRenderModel", "update", "viewportY", "terminal", "isSelectAllActive", "selectionStartLength", "areSelectionValuesReversed", "startPlusLength", "handleTrim", "_onCharSizeChange", "onCharSizeChange", "_measureStrategy", "TextMetricsMeasureStrategy", "onMultipleOptionChange", "BaseMeasureStategy", "_result", "DomMeasureStrategy", "_parentElement", "_measureElement", "_validateAndSet", "Number", "OffscreenCanvas", "getContext", "measureText", "fontBoundingBoxAscent", "fontBoundingBoxDescent", "content", "combinedData", "firstCell", "getAsCharData", "_characterJoiners", "_nextCharacterJoinerId", "id", "splice", "rangeStartStringIndex", "rangeAttrFG", "getBg", "rangeAttrBG", "_getJoinedRanges", "currentStringIndex", "joinedRanges", "rangeStartColumn", "startIndex", "endIndex", "joinerRanges", "_stringRangesToCellRanges", "allJoinedRanges", "currentRangeStarted", "currentRange", "currentRangeIndex", "getString", "inRange", "newRange", "ranges", "_window", "_isFocused", "_cachedIsFocused", "_screenDprMonitor", "_onDprChange", "_onWindowChange", "onWindowChange", "setWindow", "devicePixelRatio", "hasFocus", "queueMicrotask", "ScreenDprMonitor", "_parentWindow", "_windowResizeListener", "_outerListener", "_setDprAndFireIfDiffers", "_currentDevicePixelRatio", "_setWindowResizeListener", "clearListener", "_updateDpr", "_resolutionMediaMatchList", "removeListener", "matchMedia", "indexOf", "providerIndex", "colCount", "getCoordsRelativeToElement", "_renderer", "coreBrowserService", "_pausedResizeTask", "DebouncedIdleTask", "_observerDisposable", "_isPaused", "_needsFullRefresh", "_isNextRenderRedrawOnly", "_needsSelectionRefresh", "_canvasWidth", "_canvasHeight", "_selectionState", "_onDimensionsChange", "_onRenderedViewportChange", "_onRefreshRequest", "onRefreshRequest", "_renderDebouncer", "RenderDebouncer", "handleDevicePixelRatioChange", "_fullRefresh", "handleCharSizeChanged", "_registerIntersectionObserver", "IntersectionObserver", "_handleIntersectionChange", "observe", "disconnect", "entry", "isIntersecting", "intersectionRatio", "flush", "_fireOnCanvasResize", "renderer", "RegExp", "_linkifier", "_dragScrollAmount", "_enabled", "_mouseDownTimeStamp", "_oldHasSelection", "_oldSelectionStart", "_oldSelectionEnd", "_onLinuxMouseSelection", "_onRedrawRequest", "_mouseMoveListener", "_mouseUpListener", "onUserInput", "_trimListener", "_handleTrim", "_handleBufferActivate", "_model", "SelectionModel", "_activeSelectionMode", "_removeMouseDownListeners", "finalSelectionStart", "finalSelectionEnd", "startRowEndCol", "lineText", "replace", "isLinuxMouseSelection", "_getMouseBufferCoords", "_areCoordsInSelection", "allowWhitespaceOnlySelection", "getRangeLength", "_selectWordAt", "terminalHeight", "macOptionClickForcesSelection", "timeStamp", "_handleIncrementalClick", "detail", "_handleSingleClick", "_handleDoubleClick", "_handleTripleClick", "_addMouseDownListeners", "_dragScrollIntervalTimer", "setInterval", "_dragScroll", "clearInterval", "hasWidth", "_selectWordAtCursor", "_selectLineAt", "_selectToWordAt", "_getMouseEventScrollAmount", "timeElapsed", "altClickMovesCursor", "coordinates", "moveToCellSequence", "_fireEventIfSelectionChanged", "_fireOnSelectionChange", "onTrim", "_isClickInSelection", "followWrappedLinesAbove", "followWrappedLinesBelow", "_convertViewportColToCharacterIndex", "charAt", "leftWideCharCount", "rightWideCharCount", "rightLongCharOffset", "_isCharWordSeparator", "leftLongCharOffset", "getCodePoint", "previousBufferLine", "_getWordAt", "nextBufferLine", "nextLineWordPosition", "wordPosition", "wordSeparator", "getWrappedRangeForLine", "wrappedRange", "first", "last", "createDecorator", "DEFAULT_FOREGROUND", "DEFAULT_ANSI_COLORS", "freeze", "g", "toCss", "toRgba", "_colors", "_contrastCache", "ColorContrastCache", "_halfContrastCache", "_onChangeColors", "DEFAULT_CURSOR", "DEFAULT_CURSOR_ACCENT", "selectionBackgroundTransparent", "DEFAULT_SELECTION", "blend", "selectionInactiveBackgroundTransparent", "_updateRestoreColors", "_setTheme", "theme", "parseColor", "DEFAULT_BACKGROUND", "selectionBackground", "selectionInactiveBackground", "NULL_COLOR", "isOpaque", "opacity", "blue", "white", "brightRed", "brightYellow", "brightCyan", "extendedAnsi", "colorCount", "_restoreColor", "slot", "_restoreColors", "cssString", "CircularList", "_maxLength", "onDeleteEmitter", "onDelete", "onInsertEmitter", "onTrimEmitter", "_startIndex", "_length", "maxLength", "_array", "_getCyclicIndex", "newMaxLength", "newLength", "recycle", "deleteCount", "items", "countToTrim", "trimStart", "count", "expandListBy", "val", "depth", "clone", "$r", "$g", "contrastRatio", "l2", "l1", "toPaddedHex", "$a", "toChannels", "bgG", "bgR", "fgR", "fgG", "$b", "bgB", "u", "rgbaColor", "factor", "willReadFrequently", "globalCompositeOperation", "createLinearGradient", "match", "parseFloat", "$ctx", "$litmusColor", "getImageData", "rs", "pow", "relativeLuminance", "rgb", "relativeLuminance2", "reduceLuminance", "bgRgba", "fgRgba", "fgB", "cr", "fgL", "resultARatio", "resultA", "increaseLuminance", "resultB", "_onScrollApi", "_windowsWrappingHeuristics", "_onBinary", "onBinary", "_onData", "onData", "_onLineFeed", "_onResize", "_onWriteParsed", "onWriteParsed", "InstantiationService", "OptionsService", "BufferService", "LogService", "ILogService", "CoreService", "CoreMouseService", "unicodeService", "UnicodeService", "IUnicodeService", "_charsetService", "CharsetService", "ICharsetService", "OscLinkService", "InputHandler", "onRequestScrollToBottom", "_writeBuffer", "handleUserInput", "_handleWindowsPtyOptionChange", "scrollBottom", "markRangeDirty", "WriteBuffer", "promiseResult", "write", "writeSync", "logLevel", "LogLevelEnum", "hasWriteSyncWarnHappened", "MINIMUM_COLS", "MINIMUM_ROWS", "eraseAttr", "pageCount", "scrollToTop", "scrollToLine", "scrollAmount", "registerEscHandler", "registerDcsHandler", "registerCsiHandler", "registerOscHandler", "windowsPty", "buildNumber", "backend", "windowsMode", "_enableWindowsWrappingHeuristics", "disposables", "updateWindowsModeWrappedState", "final", "_listeners", "_disposed", "_event", "listener", "arg2", "queue", "call", "arg1", "clearListeners", "from", "to", "opts", "setWinLines", "restoreWin", "minimizeWin", "setWinPosition", "setWinSizePixels", "raiseWin", "lowerWin", "refreshWin", "setWinSizeChars", "maximizeWin", "fullscreenWin", "getWinState", "getWinPosition", "getWinSizePixels", "getScreenSizePixels", "getCellSizePixels", "getWinSizeChars", "getScreenSizeChars", "getIconTitle", "getWinTitle", "pushTitle", "popTitle", "$temp", "_curAttrData", "_unicodeService", "EscapeSequenceParser", "_coreMouseService", "_parseBuffer", "Uint32Array", "_stringDecoder", "StringToUtf32", "_utf8Decoder", "Utf8ToUtf32", "_windowTitle", "_iconName", "_windowTitleStack", "_iconNameStack", "_eraseAttrDataInternal", "_onRequestBell", "_onRequestRefreshRows", "_onRequestReset", "_onRequestSendFocus", "_onRequestSyncScrollBar", "_onRequestWindowsOptionsReport", "_onA11yChar", "_onA11yTab", "_onColor", "_parseStack", "cursorStartX", "cursorStartY", "decodedLength", "_specialColors", "_parser", "_dirtyRowTracker", "setCsiHandlerFallback", "params", "identifier", "identToString", "toArray", "setEscHandlerFallback", "setExecuteHandlerFallback", "code", "setOscHandlerFallback", "setDcsHandlerFallback", "payload", "setPrintHandler", "print", "insertChars", "intermediates", "scrollLeft", "cursorUp", "cursorDown", "cursorForward", "cursorBackward", "cursorPrecedingLine", "cursorCharAbsolute", "cursorPosition", "cursorForwardTab", "eraseInDisplay", "prefix", "eraseInLine", "insertLines", "deleteLines", "deleteChars", "scrollUp", "scrollDown", "eraseChars", "cursorBackwardTab", "charPosAbsolute", "hPositionRelative", "repeatPrecedingCharacter", "sendDeviceAttributesPrimary", "sendDeviceAttributesSecondary", "linePosAbsolute", "vPositionRelative", "hVPosition", "tabClear", "setMode", "setModePrivate", "resetMode", "charAttributes", "deviceStatus", "deviceStatusPrivate", "softReset", "setCursorStyle", "saveCursor", "windowOptions", "restoreCursor", "insertColumns", "deleteColumns", "selectProtected", "requestMode", "setExecuteHandler", "bell", "LF", "lineFeed", "VT", "FF", "CR", "carriageReturn", "backspace", "tab", "shiftOut", "SI", "shiftIn", "C1", "nextLine", "HTS", "tabSet", "setTitle", "setIconName", "OscHandler", "setOrReportIndexedColor", "setOrReportFgColor", "setOrReportBgColor", "setOrReportCursorColor", "restoreIndexedColor", "restoreFgColor", "restoreBgColor", "restoreCursorColor", "keypadApplicationMode", "keypadNumericMode", "fullReset", "setgLevel", "selectDefaultCharset", "flag", "CHARSETS", "selectCharset", "screenAlignmentPattern", "setErrorHandler", "error", "DcsHandler", "requestStatusString", "_logSlowResolvingAsync", "WARN", "Promise", "race", "p", "rej", "catch", "_getCurrentLinkId", "paused", "parse", "MAX_PARSEBUFFER_LENGTH", "DEBUG", "Array", "map", "clearRange", "decode", "len", "_preserveStack", "viewportEnd", "charset", "wraparound", "modes", "insertMode", "markDirty", "setCellFromCodepoint", "curAttr", "precedingJoinState", "ch", "currentInfo", "charProperties", "chWidth", "extractWidth", "shouldJoin", "extractShouldJoin", "stringFromCodePoint", "addLineToLink", "oldWidth", "oldCol", "scroll", "_eraseAttrData", "bufferRow", "BufferLine", "copyCellsFrom", "oldRow", "addCodepointToCell", "delta", "insertCells", "getNullCell", "NULL_CELL_CODE", "NULL_CELL_WIDTH", "convertEol", "reverseWraparound", "_restrictCursor", "nextStop", "_moveCursor", "_setCursor", "cursorNextLine", "param", "prevStop", "respectProtect", "replaceCells", "clearWrap", "fill", "clearMarkers", "_eraseInBufferLine", "_resetBufferLine", "scrollBackSize", "scrollBottomRowsOffset", "scrollBottomAbsolute", "deleteCells", "joinState", "codePointAt", "itext", "idata", "copyWithin", "tlength", "_is", "setgCharset", "DEFAULT_CHARSET", "applicationKeypad", "activeEncoding", "isCursorHidden", "activateAltBuffer", "m", "activateNormalBuffer", "cs", "b2v", "dm", "mouseProtocol", "mouseEncoding", "_updateAttrColor", "mode", "c2", "fromColorRGB", "c3", "accu", "cSpace", "advance", "hasSubParams", "getSubParams", "underlineColor", "attr", "updateExtended", "_processSGR0", "_processUnderline", "_extractColor", "savedX", "savedY", "savedCurAttrData", "savedCharset", "isBlinking", "bottom", "paramToWindowOption", "second", "_savedCharset", "split", "idx", "slots", "exec", "spec", "_createHyperlink", "args", "_finishHyperlink", "parsedParams", "findIndex", "startsWith", "idParamIndex", "registerLink", "_setOrReportSpecialColor", "GLEVEL", "shiftElements", "level", "yOffset", "markAllDirty", "isProtected", "DirtyRowTracker", "_disposables", "_value", "_data", "fourth", "third", "isNode", "process", "navigator", "userAgent", "platform", "isLegacyEdge", "isSafari", "majorVersion", "isIpad", "isWindows", "_getKey", "_search", "midKey", "mid", "TaskQueue", "_start", "_tasks", "_i", "_cancelCallback", "_idleCallback", "_requestCallback", "_process", "deadline", "deadlineRemaining", "taskDuration", "longestTask", "timeRemaining", "lastDeadlineRemaining", "PriorityTaskQueue", "_createDeadline", "duration", "IdleTaskQueue", "requestIdleCallback", "cancelIdleCallback", "_queue", "task", "lastChar", "CHAR_DATA_CODE_INDEX", "WHITESPACE_CELL_CODE", "isBgRGB", "isFgPalette", "isBgPalette", "isFgDefault", "isBgDefault", "isEmpty", "getUnderlineColorMode", "isFgRGB", "getUnderlineStyle", "getUnderlineVariantOffset", "underlineVariantOffset", "ext", "_ext", "_urlId", "ExtendedAttrs", "MAX_BUFFER_SIZE", "_hasScrollback", "_nullCell", "fromCharData", "NULL_CELL_CHAR", "_whitespaceCell", "WHITESPACE_CELL_WIDTH", "_memoryCleanupQueue", "_memoryCleanupPosition", "_cols", "_rows", "_getCorrectBufferLength", "setupTabStops", "correctBufferLength", "fillAttr", "newRows", "dirtyMemoryLines", "nullCell", "amountToTrim", "addToY", "newCols", "_isReflowEnabled", "_reflow", "enqueue", "_batchedMemoryCleanup", "normalRun", "cleanupMemory", "_reflowLarger", "_reflowSmaller", "reflowLargerGetLinesToRemove", "reflowLargerCreateNewLayout", "toRemove", "reflowLargerApplyNewLayout", "layout", "_reflowLargerAdjustViewport", "newLayoutResult", "countRemoved", "wrappedLines", "absoluteY", "lastLineLength", "destLineLengths", "reflowSmallerGetNewLineLengths", "linesToAdd", "newLines", "countToInsert", "destCol", "destLineIndex", "srcCol", "cellsToCopy", "srcLineIndex", "getWrappedLineTrimmedLength", "setCell", "trimmedLines", "viewportAdjustments", "insertEvents", "originalLines", "nextToInsertIndex", "nextToInsert", "originalLinesLength", "originalLineIndex", "nextI", "toInsert", "insertCountEmitted", "trimRight", "tabStopWidth", "tabs", "_isClearing", "onInsert", "_removeMarker", "$startIndex", "_extendedAttrs", "_combined", "CHAR_DATA_ATTR_INDEX", "CHAR_DATA_CHAR_INDEX", "CHAR_DATA_WIDTH_INDEX", "attrs", "codePoint", "fillCellData", "byteLength", "uint32Cells", "subarray", "keys", "extKeys", "newLine", "getNoBgTrimmedLength", "src", "applyInReverse", "srcData", "srcCombinedKeys", "outColumns", "bufferCols", "endsInNull", "oldCols", "bufferAbsoluteY", "destRemainingCells", "srcTrimmedTineLength", "countToRemove", "nextToRemoveStart", "nextToRemoveIndex", "newLayoutLines", "newLayout", "cellsNeeded", "reduce", "cellsAvailable", "srcLine", "newLineLengths", "_onBufferActivate", "_normal", "Buffer", "fillViewportRows", "inactiveBuffer", "_alt", "setFromCharData", "isCombined", "combined", "DEFAULT_COLOR", "DEFAULT_ATTR", "DEFAULT_EXT", "Marker", "isDisposed", "_id", "_nextId", "_onDispose", "disposable", "C", "NUL", "SOH", "ACK", "BEL", "HT", "DC1", "DC2", "NAK", "ETB", "GS", "DEL", "BPH", "NEL", "SSA", "ESA", "VTS", "PLD", "PLU", "RI", "SS3", "DCS", "PU1", "CCH", "MW", "EPA", "SOS", "SGCI", "APC", "ST", "applicationCursorMode", "modifiers", "US", "keyMapping", "keyString", "toUpperCase", "toLowerCase", "_interim", "startPos", "interim", "Uint8Array", "byte1", "byte4", "missing", "tmp", "discardInterim", "fourStop", "byte3", "byte2", "version", "table", "BMP_COMBINING", "num", "ucs", "wcwidth", "preceding", "createPropertyValue", "_action", "_callbacks", "_pendingData", "_bufferOffset", "_isSyncWriting", "_syncCalls", "_didUserInput", "maxSubsequentCalls", "chunk", "cb", "_innerWrite", "lastTime", "err", "resolve", "bits", "s2", "low", "base", "adv", "pad", "PAYLOAD_LIMIT", "_handlers", "create", "_active", "_ident", "_handlerFb", "_stack", "loopPosition", "fallThrough", "handlerIndex", "unhook", "hook", "put", "utf32ToString", "handlerResult", "success", "Params", "EMPTY_PARAMS", "addParam", "_handler", "_params", "_hitLimit", "ret", "then", "next", "NON_ASCII_PRINTABLE", "apply", "blueprint", "PRINTABLES", "EXECUTABLES", "states", "setDefault", "addMany", "VT500_TRANSITION_TABLE", "_transitions", "handlerPos", "transition", "chunkPos", "initialState", "currentState", "_collect", "_printHandlerFb", "_executeHandlerFb", "_csiHandlerFb", "_escHandlerFb", "_errorHandlerFb", "_printHandler", "_executeHandlers", "_csiHandlers", "_escHandlers", "_oscParser", "OscParser", "_dcsParser", "DcsParser", "_errorHandler", "finalRange", "res", "intermediate", "finalCode", "reverse", "_identifier", "handlerList", "registerHandler", "clearDcsHandler", "clearHandler", "setHandlerFallback", "clearOscHandler", "clearErrorHandler", "handlers", "collect", "abort", "addSubParam", "addDigit", "handlersEsc", "jj", "_state", "EMPTY_HANDLERS", "values", "isArray", "k", "maxSubParamsLength", "Int32Array", "_subParams", "_subParamsLength", "_subParamsIdx", "Uint16Array", "_rejectDigits", "_rejectSubDigits", "_digitIsSub", "newParams", "prototype", "MAX_VALUE", "getSubParamsAll", "store", "cur", "_addons", "instance", "loadedAddon", "_wrappedAddonDispose", "_buffer", "BufferLineApiView", "_line", "startColumn", "endColumn", "BufferNamespaceApi", "_core", "_onBufferChange", "onBufferChange", "BufferApiView", "_alternate", "alternate", "init", "provider", "versions", "activeVersion", "isUserScrolling", "BufferSet", "_cachedBlankLine", "getFg", "bottomRow", "isFull", "willBufferBeTrimmed", "copyFrom", "scrollRegionHeight", "topRow", "disp", "oldYdisp", "_charsets", "glevel", "events", "restrict", "X10", "ctrl", "VT200", "DRAG", "ANY", "isSGR", "DEFAULT_ENCODINGS", "eventCode", "SGR", "_protocols", "_encodings", "_activeProtocol", "_activeEncoding", "_lastEvent", "_onProtocolChange", "name", "DEFAULT_PROTOCOLS", "addProtocol", "addEncoding", "encoding", "_equalEvents", "report", "triggerBinaryEvent", "down", "up", "drag", "move", "pixels", "e2", "e1", "DEFAULT_DEC_PRIVATE_MODES", "_onUserInput", "_onRequestScrollToBottom", "DEFAULT_MODES", "wasUserInput", "disableStdin", "_decorations", "SortedList", "_onDecorationRegistered", "_onDecorationRemoved", "markerDispose", "insert", "xmin", "getKeyIterator", "xmax", "forEachByKey", "$xmin", "$xmax", "Decoration", "_cachedBg", "_cachedFg", "foregroundColor", "_entries", "Map", "service", "has", "_services", "ctor", "serviceDependencies", "getServiceDependencies", "sort", "serviceArgs", "dependency", "firstServiceArgPos", "optionsKeyToLogLevel", "trace", "TRACE", "info", "INFO", "ERROR", "off", "OFF", "traceLogger", "_logLevel", "_updateLogLevel", "optionalParams", "_log", "_evalLazyOptionalParams", "message", "logger", "log", "_target", "fn", "descriptor", "JSON", "stringify", "DEFAULT_OPTIONS", "customGlyphs", "scrollback", "allowProposedApi", "allowTransparency", "rescaleOverlappingGlyphs", "termName", "_onOptionChange", "_sanitizeAndValidateOption", "defaultOptions", "_setupOptions", "eventKey", "propName", "desc", "getter", "defineProperty", "_entriesWithId", "_dataByLinkId", "_removeMarkerFromLink", "_getEntryIdKey", "castData", "linkData", "serviceRegistry", "DI_DEPENDENCIES", "arguments", "DI_TARGET", "decorator", "ICoreMouseService", "_providers", "_onChange", "onChange", "UnicodeV6", "_activeProvider", "__webpack_module_cache__", "moduleId", "cachedModule", "__webpack_modules__", "__webpack_require__", "CONSTRUCTOR_ONLY_OPTIONS", "_addonManager", "AddonManager", "_publicOptions", "setter", "_checkReadonlyOptions", "parser", "ParserApi", "_checkProposedApi", "UnicodeApi", "mouseTrackingMode", "applicationCursorKeysMode", "applicationKeypadMode", "originMode", "reverseWraparoundMode", "sendFocusMode", "wraparoundMode", "blur", "_verifyIntegers", "open", "attachCustomWheelEventHandler", "registerCharacterJoiner", "deregisterCharacterJoiner", "registerMarker", "decorationOptions", "_verifyPositiveIntegers", "scrollPages", "loadAddon", "addon", "Infinity", "root", "factory", "exports", "module", "define", "amd", "terminal", "this", "_terminal", "dispose", "proposeDimensions", "isNaN", "dims", "cols", "core", "rows", "_renderService", "clear", "resize", "e", "t", "element", "parentElement", "_core", "dimensions", "cell", "height", "scrollbarWidth", "options", "scrollback", "viewport", "scrollBarWidth", "parentElementStyle", "window", "getComputedStyle", "parseInt", "getPropertyValue", "max", "elementStyle", "parentElementWidth", "Math", "floor", "availableWidth", "css", "width", "availableHeight", "pkg", "import_react", "import_jsx_dev_runtime", "_c"]
}
